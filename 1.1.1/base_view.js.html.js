tui.util.defineNamespace("fedoc.content", {});
fedoc.content["base_view.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Base class for Views\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar common = require('./common');\n\n/**\n * Base class for Views\n * @module base/view\n */\nvar View = Backbone.View.extend(/**@lends module:base/view.prototype */{\n    /**\n     * @constructs\n     * @mixes module:base/common\n     * @param {Object} attributes Attributes\n     */\n    initialize: function(attributes) {\n        this._children = [];\n    },\n\n    /**\n     * 에러 객체를 반환한다.\n     * @param {String} message - Error message\n     * @return {error} 에러객체\n     */\n    error: function(message) {\n        var GridError = function() {\n            this.name = 'Grid Exception';\n            this.message = message || 'error';\n        };\n        GridError.prototype = new Error();\n        return new GridError();\n    },\n\n    /**\n     * destroy 시 함께 삭제할 View 를 내부 변수 _children 에 추가한다.\n     * @param {instance} instance 인스턴스 객체\n     * @return {instance} instance 인자로 전달받은 인스턴스 객체\n     */\n    _addChildren: function(views) {\n        if (!_.isArray(views)) {\n            views = [views];\n        }\n        _.each(views, function(view) {\n            this._children.push(view);\n        }, this);\n    },\n\n    /**\n     * Render children and returns thier elements as array.\n     * @return {array.&lt;HTMLElement>} An array of element of children\n     */\n    _renderChildren: function() {\n        var elements = [];\n\n        _.each(this._children, function(view) {\n            elements.push(view.render().el);\n        });\n        return elements;\n    },\n\n    /**\n     * 자식 View를 제거한 뒤 자신도 제거한다.\n     */\n    destroy: function() {\n        this.stopListening();\n        this._destroyChildren();\n        this.remove();\n    },\n\n    /**\n     * customEvent 에서 사용할 이벤트 객체를 포멧에 맞게 생성하여 반환한다.\n     * @param {Object} data 이벤트 핸들러에 넘길 데이터\n     * @return {{_isStopped: boolean, stop: function, param1: param1, param2: param2}} 생성된 커스텀 이벤트 객체\n     */\n    createEventData: function(data) {\n        var eventData = $.extend({}, data);\n        eventData.stop = function() {\n            this._isStopped = true;\n        };\n        eventData.isStopped = function() {\n            return this._isStopped;\n        };\n        eventData._isStopped = eventData._isStopped || false;\n        return eventData;\n    },\n\n    /**\n     * 등록되어있는 자식 View 들을 제거한다.\n     */\n    _destroyChildren: function() {\n        if (_.isArray(this._children)) {\n            while (this._children.length > 0) {\n                this._children.pop().destroy();\n            }\n        }\n    }\n});\n\n_.assign(View.prototype, common);\n\nmodule.exports = View;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"