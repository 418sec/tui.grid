tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_cell_list.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview 리스트 형태의 Cell Painter을 위한 Base 클래스\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Cell = require('../cell');\n\n/**\n * editOption 에 list 를 가지고 있는 형태의 Base 클래스\n * @module painter/cell/list\n */\nvar ListCell = tui.util.defineClass(Cell,/**@lends module:painter/cell/list.prototype */{\n    /**\n     * @constructs\n     * @extends module:painter/cell\n     */\n    init: function() {\n        Cell.apply(this, arguments);\n    },\n\n    redrawAttributes: ['isDisabled', 'isEditable', 'optionList'],\n\n    eventHandler: {},\n\n    /* eslint-disable */\n    /**\n     * 자기 자신의 인스턴스의 editType 을 반환한다.\n     * @return {String} editType 'normal|button|select|button|text|text-password|text-convertible'\n     */\n    getEditType: function() {},\n\n    /**\n     * cell 에서 키보드 enter 를 입력했을 때 편집모드로 전환. cell 내 input 에 focus 를 수행하는 로직. 필요에 따라 override 한다.\n     * @param {jQuery} $td 해당 cell 엘리먼트\n     */\n    focusIn: function($td) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * Cell data 를 인자로 받아 &lt;td> 안에 들아갈 html string 을 반환한다.\n     * redrawAttributes 에 해당하는 프로퍼티가 변경되었을 때 수행될 로직을 구현한다.\n     * @param {object} cellData 모델의 셀 데이터\n     * @return  {string} html 마크업 문자열\n     * @example\n     * var html = this.getContentHtml();\n     * &lt;select>\n     *     &lt;option value='1'>option1&lt;/option>\n     *     &lt;option value='2'>option1&lt;/option>\n     *     &lt;option value='3'>option1&lt;/option>\n     * &lt;/select>\n     */\n    getContentHtml: function(cellData) { // eslint-disable-line no-unused-vars\n        throw this.error('Implement getContentHtml(cellData, $target) method. On re-rendering');\n    },\n\n    /**\n     * model의 redrawAttributes 에 해당하지 않는 프로퍼티의 변화가 발생했을 때 수행할 메서드\n     * redrawAttributes 에 해당하지 않는 프로퍼티가 변경되었을 때 수행할 로직을 구현한다.\n     * @param {object} cellData 모델의 셀 데이터\n     * @param {jQuery} $td 해당 cell 엘리먼트\n     * @param {boolean} hasFocusedElement 해당 셀에 실제 focus 된 엘리먼트가 존재하는지 여부\n     */\n    setElementAttribute: function(cellData, $td, hasFocusedElement) { // eslint-disable-line no-unused-vars\n        throw this.error('Implement setElementAttribute(cellData, $target) method. ');\n    },\n    /* eslint-enable */\n\n    /**\n     * List Type 의 option list 를 반환하는 메서드\n     *\n     * cellData 의 optionsList 가 존재한다면 cellData 의 옵션 List 를 반환하고,\n     * 그렇지 않다면 columnModel 의 optionList 를 반환한다.\n     * @param {Object} cellData 모델의 셀 데이터\n     * @return {Array} 옵션 리스트\n     */\n    getOptionList: function(cellData) {\n        var columnModel = this.grid.columnModel.getColumnModel(cellData.columnName);\n        return cellData.optionList &amp;&amp; cellData.optionList.length ? cellData.optionList : columnModel.editOption.list;\n    }\n});\n\nmodule.exports = ListCell;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"