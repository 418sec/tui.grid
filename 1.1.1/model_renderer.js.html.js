tui.util.defineNamespace("fedoc.content", {});
fedoc.content["model_renderer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Rendering 모델\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Model = require('../base/model');\nvar RowList = require('./rowList');\nvar renderStateMap = require('../common/constMap').renderState;\n\n/**\n * View 에서 Rendering 시 사용할 객체\n * @module model/renderer\n */\nvar Renderer = Model.extend(/**@lends module:model/renderer.prototype */{\n    /**\n     * @extends module:base/model\n     * @constructs\n     */\n    initialize: function(attrs, options) {\n        var lside, rside, rowListOptions;\n\n        this.setOwnProperties({\n            dataModel: options.dataModel,\n            columnModel: options.columnModel,\n            dimensionModel: options.dimensionModel,\n            timeoutIdForRefresh: 0,\n            isColumnModelChanged: false\n        });\n        rowListOptions = {\n            dataModel: this.dataModel,\n            columnModel: this.columnModel\n        };\n\n        lside = new RowList([], rowListOptions);\n        rside = new RowList([], rowListOptions);\n        this.set({\n            lside: lside,\n            rside: rside\n        });\n\n        this.listenTo(this.columnModel, 'all', this._onColumnModelChange)\n            .listenTo(this.dataModel, 'add remove sort reset', this._onRowListChange)\n            .listenTo(this.dataModel, 'beforeReset', this._onBeforeResetData)\n            .listenTo(lside, 'valueChange', this._onValueChange)\n            .listenTo(rside, 'valueChange', this._onValueChange)\n            .listenTo(this.dimensionModel, 'change:width', this._updateMaxScrollLeft)\n            .listenTo(this.dimensionModel, 'change:totalRowHeight change:scrollBarSize change:bodyHeight',\n                this._updateMaxScrollTop);\n\n        this._updateMaxScrollLeft();\n    },\n\n    defaults: {\n        top: 0,\n        scrollTop: 0,\n        scrollLeft: 0,\n        maxScrollLeft: 0,\n        maxScrollTop: 0,\n        startIndex: 0,\n        endIndex: 0,\n        startNumber: 1,\n        lside: null,\n        rside: null,\n\n        // text that will be shown if no data to render (custom value set by user)\n        emptyMessage: null,\n\n        // constMap.renderState\n        state: renderStateMap.EMPTY\n    },\n\n    /**\n     * lside 와 rside collection 에서 value 값이 변경되었을 시 executeRelation 을 수행하기 위한 이벤트 핸들러\n     * @param {number} rowIndex row 의 index 값\n     * @private\n     */\n    _onValueChange: function(rowIndex) {\n        this.executeRelation(rowIndex);\n    },\n\n    /**\n     * Event handler for 'chage:width' event on Dimension.\n     * @private\n     */\n    _updateMaxScrollLeft: function() {\n        var dimension = this.dimensionModel;\n        this.set('maxScrollLeft', dimension.getFrameWidth('R') - dimension.get('rsideWidth'));\n    },\n\n    /**\n     * Event handler to reset 'maxScrollTop' attribute.\n     * @private\n     */\n    _updateMaxScrollTop: function() {\n        var dimension = this.dimensionModel,\n            maxScrollTop = dimension.get('totalRowHeight') - dimension.get('bodyHeight') + dimension.get('scrollBarSize');\n\n        this.set('maxScrollTop', maxScrollTop);\n    },\n\n    /**\n     * Event handler for 'beforeReset' event on dataModel\n     */\n    _onBeforeResetData: function() {\n        this.set('state', renderStateMap.LOADING);\n    },\n\n    /**\n     * 내부 변수를 초기화 한다.\n     */\n    initializeVariables: function() {\n        this.set({\n            top: 0,\n            scrollTop: 0,\n            $scrollTarget: null,\n            scrollLeft: 0,\n            startIndex: 0,\n            endIndex: 0,\n            startNumber: 1\n        });\n    },\n\n    /**\n     * 열고정 영역 또는 열고정이 아닌 영역에 대한 Render Collection 을 반환한다.\n     * @param {String} [whichSide='R']    어느 영역인지 여부. 'L|R' 중에 하나의 값을 넘긴다.\n     * @return {Object} collection  해당 영역의 랜더 데이터 콜랙션\n     */\n    getCollection: function(whichSide) {\n        return this.get(tui.util.isString(whichSide) ? whichSide.toLowerCase() + 'side' : 'rside');\n    },\n\n    /**\n     * Data.ColumnModel 이 변경되었을 때 열고정 영역 frame, 열고정 영역이 아닌 frame 의 list 를 재생성 하기 위한 이벤트 핸들러\n     * @private\n     */\n    _onColumnModelChange: function() {\n        this.set({\n            scrollTop: 0,\n            top: 0,\n            startIndex: 0,\n            endIndex: 0\n        });\n        this.isColumnModelChanged = true;\n        clearTimeout(this.timeoutIdForRefresh);\n        this.timeoutIdForRefresh = setTimeout($.proxy(this.refresh, this), 0);\n    },\n\n    /**\n     * Data.RowList 가 변경되었을 때 열고정 영역 frame, 열고정 영역이 아닌 frame 의 list 를 재생성 하기 위한 이벤트 핸들러\n     * @private\n     */\n    _onRowListChange: function() {\n        clearTimeout(this.timeoutIdForRefresh);\n        this.timeoutIdForRefresh = setTimeout($.proxy(this.refresh, this, true), 0);\n    },\n\n    /**\n     * rendering 할 index 범위를 결정한다.\n     * Smart rendering 을 사용하지 않을 경우 전체 범위로 랜더링한다.\n     * @private\n     */\n    _setRenderingRange: function() {\n        this.set({\n            startIndex: 0,\n            endIndex: this.dataModel.length - 1\n        });\n    },\n\n    /**\n     * rendering 할 데이터를 생성한다.\n     * @param {boolean} isDataModelChanged - The boolean value whether dataModel has changed\n     */\n    refresh: function(isDataModelChanged) {\n        this._setRenderingRange(this.get('scrollTop'));\n\n        //TODO : rendering 해야할 데이터만 가져온다.\n        //TODO : eslint 에러 수정\n        var columnFixCount = this.columnModel.getVisibleColumnFixCount(true), // eslint-disable-line\n            columnList = this.columnModel.getVisibleColumnModelList(null, true),\n            columnNameList = _.pluck(columnList, 'columnName'),\n\n            lsideColumnList = columnNameList.slice(0, columnFixCount),\n            rsideColumnList = columnNameList.slice(columnFixCount),\n\n            lsideRowList = [],\n            rsideRowList = [],\n            lsideRow = [],\n            rsideRow = [],\n            startIndex = this.get('startIndex'),\n            endIndex = this.get('endIndex'),\n            num = this.get('startNumber') + startIndex,\n            len,\n            i,\n            rowModel,\n            rowKey;\n\n        for (i = startIndex; i &lt; endIndex + 1; i += 1) {\n            rowModel = this.dataModel.at(i);\n            if (rowModel) {\n                rowKey = rowModel.get('rowKey');\n\n                //데이터 초기화\n                lsideRow = {\n                    '_extraData': rowModel.get('_extraData'),\n                    'rowKey': rowKey\n                };\n                rsideRow = {\n                    '_extraData': rowModel.get('_extraData'),\n                    'rowKey': rowKey\n                };\n\n                //lside 데이터 먼저 채운다.\n                _.each(lsideColumnList, function (columnName) { // eslint-disable-line\n                    if (columnName === '_number') {\n                        lsideRow[columnName] = num++; // eslint-disable-line\n                    } else {\n                        lsideRow[columnName] = rowModel.get(columnName);\n                    }\n                });\n\n                _.each(rsideColumnList, function (columnName) { // eslint-disable-line\n                    if (columnName === '_number') {\n                        rsideRow[columnName] = num++; // eslint-disable-line\n                    } else {\n                        rsideRow[columnName] = rowModel.get(columnName);\n                    }\n                });\n                lsideRowList.push(lsideRow);\n                rsideRowList.push(rsideRow);\n            }\n        }\n\n        this.get('lside').clear().reset(lsideRowList, {\n            parse: true\n        });\n        this.get('rside').clear().reset(rsideRowList, {\n            parse: true\n        });\n\n        len = rsideRowList.length + startIndex;\n        for (i = startIndex; i &lt; len; i += 1) {\n            this.executeRelation(i);\n        }\n\n        if (this.isColumnModelChanged) {\n            this.trigger('columnModelChanged');\n            this.isColumnModelChanged = false;\n        } else {\n            this.trigger('rowListChanged', isDataModelChanged);\n        }\n        this._refreshState();\n        this.trigger('refresh');\n    },\n\n    /**\n     * Set state value based on the DataModel.length\n     */\n    _refreshState: function() {\n        if (this.dataModel.length) {\n            this.set('state', renderStateMap.DONE);\n        } else {\n            this.set('state', renderStateMap.EMPTY);\n        }\n    },\n\n    /**\n     * columnName 으로 lside 와 rside rendering collection 중 하나를 반환한다.\n     * @param {String} columnName   컬럼명\n     * @return {Collection} 컬럼명에 해당하는 영역의 콜랙션\n     * @private\n     */\n    _getCollectionByColumnName: function(columnName) {\n        var lside = this.get('lside'),\n            collection;\n\n        if (lside.at(0) &amp;&amp; lside.at(0).get(columnName)) {\n            collection = lside;\n        } else {\n            collection = this.get('rside');\n        }\n        return collection;\n    },\n\n    /**\n     * 셀 데이터를 반환한다.\n     * @param {number} rowKey   데이터의 키값\n     * @param {String} columnName   컬럼명\n     * @return {object} cellData 셀 데이터\n     * @example\n     =>\n     {\n         rowKey: rowKey,\n         columnName: columnName,\n         value: value,\n         rowSpan: rowSpanData.count,\n         isMainRow: rowSpanData.isMainRow,\n         mainRowKey: rowSpanData.mainRowKey,\n         isEditable: isEditable,\n         isDisabled: isDisabled,\n         optionList: [],\n         className: row.getClassNameList(columnName).join(' '),\n         changed: []    //변경된 프로퍼티 목록들\n     }\n     */\n    getCellData: function(rowKey, columnName) {\n        var collection = this._getCollectionByColumnName(columnName),\n            row = collection.get(rowKey);\n        if (row) {\n           return row.get(columnName);\n        }\n    },\n\n    /**\n     * rowIndex 에 해당하는 relation 을 수행한다.\n     * @param {Number} rowIndex row 의 index 값\n     */\n    executeRelation: function(rowIndex) {\n        var row = this.dataModel.at(rowIndex),\n            renderIdx = rowIndex - this.get('startIndex'),\n            rowModel, relationResult;\n        relationResult = row.getRelationResult();\n\n        _.each(relationResult, function(changes, columnName) {\n            rowModel = this._getCollectionByColumnName(columnName).at(renderIdx);\n            if (rowModel) {\n                rowModel.setCell(columnName, changes);\n            }\n        }, this);\n    },\n\n    /**\n     * Destroys itself\n     * @private\n     */\n    _destroy: function() {\n        clearTimeout(this.timeoutIdForRefresh);\n    }\n});\n\nmodule.exports = Renderer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"