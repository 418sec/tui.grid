tui.util.defineNamespace("fedoc.content", {});
fedoc.content["model_data_extraDataManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Grid 의 Data Source 에 해당하는 Model 정의\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Model = require('../../base/model');\nvar util = require('../../common/util');\n\n/**\n * Data 중 각 행의 데이터 모델 (DataSource)\n * @module data/row\n */\nvar ExtraDataManager = tui.util.defineClass(/**@lends module:model/data/extraData.prototype */{\n    /**\n     * @constructs\n     * @extends module:base/model\n     */\n    init: function(data) {\n        this.data = data;\n    },\n\n    /**\n     * Returns rowSpan data\n     * @param  {string} columnName - column name\n     * @param  {(number|string)} rowKey - rowKey\n     * @param  {boolean} isRowSpanEnable - Boolean value whether row span is enable.\n     * @return {*|{count: number, isMainRow: boolean, mainRowKey: *}} rowSpan data\n     */\n    getRowSpanData: function(columnName, rowKey, isRowSpanEnable) {\n        var rowSpanData = null;\n\n        if (isRowSpanEnable) {\n            rowSpanData = this.data.rowSpanData;\n            if (columnName &amp;&amp; rowSpanData) {\n                rowSpanData = rowSpanData[columnName];\n            }\n        }\n\n        if (!rowSpanData &amp;&amp; columnName) {\n            rowSpanData = {\n                count: 0,\n                isMainRow: true,\n                mainRowKey: rowKey\n            };\n        }\n        return rowSpanData;\n    },\n\n    /**\n     * Returns the object that contains rowState info.\n     * @return {{isDisabled: boolean, isDisabledCheck: boolean, isChecked: boolean}} rowState 정보\n     */\n    getRowState: function() {\n        var result = {\n            isDisabledCheck: false,\n            isDisabled: false,\n            isChecked: false\n        };\n\n        switch (this.data.rowState) {\n            case 'DISABLED':\n                result.isDisabled = true;\n                // intentional no break\n            case 'DISABLED_CHECK':\n                result.isDisabledCheck = true;\n                break;\n            case 'CHECKED':\n                result.isChecked = true;\n            default: // do nothing\n        }\n        return result;\n    },\n\n    /**\n     * Sets the rowSate.\n     * @param {string} rowState - 'DISABLED' | 'DISABLED_CHECK' | 'CHECKED'\n     */\n    setRowState: function(rowState) {\n        this.data.rowState = rowState;\n    },\n\n    /**\n     * Sets the rowSpanData.\n     * @param {string} columnName - Column name\n     * @param {object} data - Data\n     */\n    setRowSpanData: function(columnName, data) {\n        var rowSpanData = _.assign({}, this.data.rowSpanData);\n\n        if (!columnName) {\n            return;\n        }\n        if (!data) {\n            if (rowSpanData[columnName]) {\n                delete rowSpanData[columnName];\n            }\n        } else {\n            rowSpanData[columnName] = data;\n        }\n        this.data.rowSpanData = rowSpanData;\n    },\n\n    /**\n     * Adds className to the cell\n     * @param {String} columnName - Column name\n     * @param {String} className - Class name\n     */\n    addCellClassName: function(columnName, className) {\n        var classNameData, classNameList;\n\n        classNameData = this.data.className || {};\n        classNameData.column = classNameData.column || {};\n        classNameList = classNameData.column[columnName] || [];\n\n        if (!_.contains(classNameList, className)) {\n            classNameList.push(className);\n            classNameData.column[columnName] = classNameList;\n            this.data.className = classNameData;\n        }\n    },\n\n    /**\n     * Adds className to the row\n     * @param {String} className - Class name\n     */\n    addClassName: function(className) {\n        var classNameData, classNameList;\n\n        classNameData = this.data.className || {};\n        classNameList = classNameData.row || [];\n\n        if (tui.util.inArray(className, classNameList) === -1) {\n            classNameList.push(className);\n            classNameData.row = classNameList;\n            this.data.className = classNameData;\n        }\n    },\n\n    /**\n     * Returns the list of className.\n     * @param {String} [columnName] - If specified, the result will only conatins class names of cell.\n     * @return {Array} - The array of class names.\n     */\n    getClassNameList: function(columnName) {\n        var classNameData = this.data.className,\n            arrayPush = Array.prototype.push,\n            classNameList = [];\n\n        if (classNameData) {\n            if (classNameData.row) {\n                arrayPush.apply(classNameList, classNameData.row);\n            }\n            if (columnName &amp;&amp; classNameData.column &amp;&amp; classNameData.column[columnName]) {\n                arrayPush.apply(classNameList, classNameData.column[columnName]);\n            }\n        }\n        return classNameList;\n    },\n\n    /**\n     * className 이 담긴 배열로부터 특정 className 을 제거하여 반환한다.\n     * @param {Array} classNameList 디자인 클래스명 리스트\n     * @param {String} className    제거할 클래스명\n     * @return {Array}  제거된 디자인 클래스명 리스트\n     * @private\n     */\n    _removeClassNameFromArray: function(classNameList, className) {\n        //배열 요소가 'class1 class2' 와 같이 두개 이상의 className을 포함할 수 있어, join &amp; split 함.\n        var singleNameList = classNameList.join(' ').split(' ');\n        return _.without(singleNameList, className);\n    },\n\n    /**\n     * rowKey 와 columnName 에 해당하는 Cell 에 CSS className 을 제거한다.\n     * @param {String} columnName 컬럼 이름\n     * @param {String} className 지정할 디자인 클래스명\n     */\n    removeCellClassName: function(columnName, className) {\n        var classNameData = this.data.className;\n\n        if (tui.util.pick(classNameData, 'column', columnName)) {\n            classNameData.column[columnName] = this._removeClassNameFromArray(classNameData.column[columnName], className);\n            this.data.className = classNameData;\n        }\n    },\n\n    /**\n     * rowKey 에 해당하는 행 전체에 CSS className 을 제거한다.\n     * @param {(Number|String)} rowKey 행 데이터의 고유 rowKey\n     * @param {String} className 지정할 디자인 클래스명\n     */\n    removeClassName: function(className) {\n        var classNameData = this.data.className;\n\n        if (classNameData &amp;&amp; classNameData.row) {\n            classNameData.row = this._removeClassNameFromArray(classNameData.row, className);\n            this.className = classNameData;\n        }\n    }\n});\n\nmodule.exports = ExtraDataManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"