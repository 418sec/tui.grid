tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_container.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview View class that conaints a top element of the DOM structure of the grid.\n * @author NHN Ent. FE Development Team\n */\n 'use strict';\n\nvar View = require('../base/view');\n\n/**\n * Container View\n * @module view/container\n */\nvar Container = View.extend(/**@lends module:view/container.prototype */{\n    /**\n     * @constructs\n     * @extends module:base/view\n     * @param {Object} options\n     */\n    initialize: function(options) {\n        View.prototype.initialize.call(this);\n\n        this.singleClickEdit = options.singleClickEdit;\n        this.dimensionModel = options.dimensionModel;\n        this.focusModel = options.focusModel;\n        this.dataModel = options.dataModel;\n        this.viewFactory = options.viewFactory;\n\n        this._createChildViews();\n\n        this.listenTo(this.dimensionModel, 'change:bodyHeight', this._refreshHeight);\n        this.listenTo(this.dimensionModel, 'setSize', this._onSetSize);\n        $(window).on('resize.grid', $.proxy(this._onResizeWindow, this));\n\n        this.__$el = this.$el.clone();\n    },\n\n    events: {\n        'click': '_onClick',\n        'dblclick': '_onDblClick',\n        'mousedown': '_onMouseDown',\n        'mouseover': '_onMouseOver',\n        'mouseout': '_onMouseOut',\n\n        // for preventing drag\n        'selectstart': '_preventDrag',\n        'dragstart': '_preventDrag'\n    },\n\n    /**\n     * 내부에서 사용할 view 인스턴스들을 초기화한다.\n     * @private\n     */\n    _createChildViews: function() {\n        var factory = this.viewFactory;\n\n        this._addChildren([\n            factory.createFrame('L'),\n            factory.createFrame('R'),\n            factory.createToolbar(),\n            factory.createStateLayer(),\n            factory.createClipboard()\n        ]);\n    },\n\n    /**\n     * Event handler for resize event on window.\n     */\n    _onResizeWindow: function() {\n        this.dimensionModel.refreshLayout();\n    },\n\n    /**\n     * drag 이벤트 발생시 이벤트 핸들러\n     * @returns {boolean} false\n     * @private\n     */\n    _preventDrag: function() {\n        return false;\n    },\n\n    /**\n     * Event handler for 'setSize' event on Dimension\n     */\n    _onSetSize: function() {\n        this.$el.width(this.dimensionModel.get('width'));\n    },\n\n    /**\n     * click 이벤트 핸들러\n     * @param {MouseEvent} mouseEvent 이벤트 객체\n     * @private\n     */\n    _onClick: function(mouseEvent) {\n        var eventData = this.createEventData(mouseEvent),\n            $target = $(mouseEvent.target),\n            cellInfo;\n\n        this.trigger('click', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n        if (this._isCellElement($target, true)) {\n            cellInfo = this._getCellInfoFromElement($target.closest('td'));\n            if (this.singleClickEdit &amp;&amp; !$target.is('input')) {\n                this.focusModel.focusIn(cellInfo.rowKey, cellInfo.columnName);\n            }\n            this._triggerCellMouseEvent('clickCell', eventData, cellInfo);\n        }\n    },\n\n    /**\n     * doubleClick 이벤트 핸들러\n     * @param {MouseEvent} mouseEvent 이벤트 객체\n     * @private\n     */\n    _onDblClick: function(mouseEvent) {\n        var eventData = this.createEventData(mouseEvent),\n            $target = $(mouseEvent.target);\n\n        this.trigger('dblclick', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n        if (this._isCellElement($target, true)) {\n            this._triggerCellMouseEvent('dblclickCell', eventData, $target.closest('td'));\n        }\n    },\n\n    /**\n     * mouseover 이벤트 발생시 실행될 핸들러\n     * @private\n     * @param {MouseEvent} mouseEvent 마우스 이벤트 객체\n     */\n    _onMouseOver: function(mouseEvent) {\n        var $target = $(mouseEvent.target),\n            eventData;\n\n        if (this._isCellElement($target)) {\n            eventData = this.createEventData(mouseEvent);\n            this._triggerCellMouseEvent('mouseoverCell', eventData, $target);\n        }\n    },\n\n    /**\n     * mouseout 이벤트 발생시 실행될 핸들러\n     * @private\n     * @param {MouseEvent} mouseEvent 마우스 이벤트 객체\n     */\n    _onMouseOut: function(mouseEvent) {\n        var $target = $(mouseEvent.target),\n            eventData;\n\n        if (this._isCellElement($target)) {\n            eventData = this.createEventData(mouseEvent);\n            this._triggerCellMouseEvent('mouseoutCell', eventData, $target);\n        }\n    },\n\n    /**\n     * 셀과 관련된 커스텀 마우스 이벤트를 발생시킨다.\n     * @private\n     * @param {string} eventName 이벤트명\n     * @param {MouseEvent} eventData 커스터마이징 된 마우스 이벤트 객체\n     * @param {(jQuery|object)} cell 이벤트가 발생한 cell (jquery 객체이거나 rowKey, columnName, rowData를 갖는 plain 객체)\n     */\n    _triggerCellMouseEvent: function(eventName, eventData, cell) {\n        var cellInfo = cell;\n        if (cell instanceof $) {\n            cellInfo = this._getCellInfoFromElement(cell);\n        }\n        _.extend(eventData, cellInfo);\n        this.trigger(eventName, eventData);\n    },\n\n    /**\n     * 해당 HTML요소가 셀인지 여부를 반환한다.\n     * @private\n     * @param {jQuery} $target 검사할 HTML요소의 jQuery 객체\n     * @param {boolean} isIncludeChild true이면 셀의 자식요소까지 포함한다.\n     * @return {boolean} 셀이면 true, 아니면 false\n     */\n    _isCellElement: function($target, isIncludeChild) {\n        var $cell = isIncludeChild ? $target.closest('td') : $target;\n\n        return !!($cell.is('td') &amp;&amp; $cell.attr('columnname') &amp;&amp; $cell.parent().attr('key'));\n    },\n\n    /**\n     * HTML요소에서 셀의 rowKey와 columnName값을 찾아서 rowData와 함께 객체로 반환한다.\n     * @private\n     * @param {jQuery} $cell TD요소의 jquery 객체\n     * @return {{rowKey: string, rowData: Data.Row, columnName: string}} 셀 관련 정보를 담은 객체\n     */\n    _getCellInfoFromElement: function($cell) {\n        var rowKey = $cell.parent().attr('key'),\n            columnName = $cell.attr('columnname');\n\n        return {\n            rowKey: rowKey,\n            columnName: columnName,\n            rowData: this.dataModel.getRowData(rowKey)\n        };\n    },\n\n    /**\n     * mousedown 이벤트 핸들러\n     * @param {event} mouseDownEvent 이벤트 객체\n     * @private\n     */\n    _onMouseDown: function(mouseDownEvent) {\n        var $target = $(mouseDownEvent.target),\n            eventData = this.createEventData(mouseDownEvent);\n\n        this.trigger('mousedown', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n        if (!$target.is('input, a, button, select')) {\n            mouseDownEvent.preventDefault();\n            this.focusModel.focusClipboard();\n        }\n    },\n\n    /**\n     * rendering 이후, 또는 bodyHeight 가 변경되었을 때, header, toolbar 의 높이를 포함하여\n     * grid 의 전체 너비를 설정한다.\n     * @private\n     */\n    _refreshHeight: function() {\n        this.$el.height(this.dimensionModel.getHeight());\n    },\n\n    /**\n     * Render\n     */\n    render: function() {\n        var childElements = this._renderChildren().concat([\n            $('&lt;div>').addClass('left_line'),\n            $('&lt;div>').addClass('right_line')\n        ]);\n        this.$el.addClass('grid_wrapper uio_grid')\n            .attr('instanceId', this.gridId)\n            .append(childElements);\n\n        this._refreshHeight();\n        this.trigger('rendered');\n    },\n\n    /**\n     * 소멸자\n     */\n    destroy: function() {\n        this.stopListening();\n        $(window).off('resize.grid');\n        this._destroyChildren();\n\n        this.$el.replaceWith(this.__$el);\n        this.$el = this.__$el = null;\n    }\n});\n\nmodule.exports = Container;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"