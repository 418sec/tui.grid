tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_controller.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Controller class to handle actions from the painters\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar util = require('../common/util');\n\n/**\n * Controller class to handle actions from the painters\n * @module painter/controller\n */\nvar PainterController = tui.util.defineClass(/**@lends module:painter/controller.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - options\n     */\n    init: function(options) {\n        this.focusModel = options.focusModel;\n        this.dataModel = options.dataModel;\n        this.columnModel = options.columnModel;\n        this.selectionModel = options.selectionModel;\n    },\n\n    /**\n     * Starts editing a cell identified by a given address, and returns the result.\n     * @param {{rowKey:String, columnName:String}} address - cell address\n     * @param {Boolean} force - if set to true, finish current editing before start.\n     * @returns {Boolean} true if succeeded, false otherwise\n     */\n    startEditing: function(address, force) {\n        var result;\n\n        if (force) {\n            this.focusModel.finishEditing();\n        }\n\n        result = this.focusModel.startEditing(address.rowKey, address.columnName);\n\n        if (result) {\n            this.selectionModel.end();\n        }\n\n        return result;\n    },\n\n    /**\n     * Ends editing a cell identified by a given address, and returns the result.\n     * @param {{rowKey:String, columnName:String}} address - cell address\n     * @param {Boolean} shouldBlur - if set to true, make the current input lose focus.\n     * @param {String} [value] - if exists, set the value of the data model to this value.\n     * @returns {Boolean} - true if succeeded, false otherwise\n     */\n    finishEditing: function(address, shouldBlur, value) {\n        var focusModel = this.focusModel;\n        var row, currentValue;\n\n        if (!focusModel.isEditingCell(address.rowKey, address.columnName)) {\n            return false;\n        }\n\n        this.selectionModel.enable();\n\n        if (!_.isUndefined(value)) {\n            row = this.dataModel.get(address.rowKey);\n            currentValue = row.get(address.columnName);\n\n            if (!(util.isBlank(value) &amp;&amp; util.isBlank(currentValue))) {\n                this.setValue(address, value);\n                row.validateCell(address.columnName);\n            }\n        }\n        focusModel.finishEditing();\n\n        if (shouldBlur) {\n            focusModel.focusClipboard();\n        } else {\n            _.defer(function() {\n                focusModel.refreshState();\n            });\n        }\n\n        return true;\n    },\n\n    /**\n     * Moves focus to the next cell, and starts editing the cell.\n     * @param {Boolean} reverse - if set to true, find the previous cell instead of next cell\n     */\n    focusInToNextCell: function(reverse) {\n        var focusModel = this.focusModel;\n        var address = reverse ? focusModel.prevAddress() : focusModel.nextAddress();\n\n        focusModel.focusIn(address.rowKey, address.columnName, true);\n    },\n\n    /**\n     * Moves focus to the first cell of the given row, and starts editing the cell.\n     * @param {number} rowKey - rowKey\n     */\n    focusInToRow: function(rowKey) {\n        var focusModel = this.focusModel;\n        focusModel.focusIn(rowKey, focusModel.firstColumnName(), true);\n    },\n\n    /**\n     * Executes the custom handler (defined by user) of the input events.\n     * @param {Event} event - DOM Event object\n     * @param {{rowKey:String, columnName:String}} address - cell address\n     */\n    executeCustomInputEventHandler: function(event, address) {\n        var columnModel = this.columnModel.getColumnModel(address.columnName);\n        var eventType = event.type;\n        var eventHandler;\n\n        if (eventType === 'focusin') {\n            eventType = 'focus';\n        } else if (eventType === 'focusout') {\n            eventType = 'blur';\n        }\n\n        eventHandler = tui.util.pick(columnModel, 'editOption', 'inputEvents', eventType);\n\n        if (_.isFunction(eventHandler)) {\n            eventHandler.call(event.target, event, address);\n        }\n    },\n\n    /**\n     * Sets the value of the given cell.\n     * @param {{rowKey:String, columnName:String}} address - cell address\n     * @param {(Number|String|Boolean)} value - value\n     */\n    setValue: function(address, value) {\n        this.dataModel.setValue(address.rowKey, address.columnName, value);\n    }\n});\n\nmodule.exports = PainterController;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"