tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_input_select.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Painter class for 'select' input.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar InputPainter = require('./base');\nvar util = require('../../common/util');\n\n/**\n * Painter class for 'select' input.\n * @module painter/input/select\n * @extends module:painter/input/base\n */\nvar SelectPainter = tui.util.defineClass(InputPainter, /**@lends module:painter/input/select.prototype */{\n    /**\n     * @constructs\n     */\n    init: function() {\n        InputPainter.apply(this, arguments);\n\n        /**\n         * css selector to use delegated event handlers by '$.on()' method.\n         * @type {String}\n         */\n        this.selector = 'select';\n    },\n\n    /**\n     * Content markup template\n     * @returns {string} html\n     */\n    template: _.template(\n        '&lt;select name=\"&lt;%=name%>\" &lt;%=disabled%>>&lt;%=options%>&lt;/select>'\n    ),\n\n    /**\n     * Options markup template\n     * @returns {string} html\n     */\n    optionTemplate: _.template(\n        '&lt;option value=\"&lt;%=value%>\" &lt;%=selected%>>&lt;%=text%>&lt;/option>'\n    ),\n\n    /**\n     * Returns the value string of given data to display in the cell.\n     * @param {Object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {String}\n     * @protected\n     */\n    _getDisplayValue: function(cellData) {\n        var selectedOption = _.find(cellData.optionList, function(item) {\n            return String(item.value) === String(cellData.value);\n        });\n\n        return selectedOption ? selectedOption.text : '';\n    },\n\n    /**\n     * Generates an input HTML string from given data, and returns it.\n     * @param {object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {string}\n     * @protected\n     */\n    _generateInputHtml: function(cellData) {\n        var optionHtml = _.reduce(cellData.optionList, function(html, item) {\n            return html + this.optionTemplate({\n                value: item.value,\n                text: item.text,\n                selected: (String(cellData.value) === String(item.value)) ? 'selected' : ''\n            });\n        }, '', this);\n\n        return this.template({\n            name: util.getUniqueKey(),\n            disabled: cellData.isDisabled ? 'disabled' : '',\n            options: optionHtml\n        });\n    }\n});\n\nmodule.exports = SelectPainter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"