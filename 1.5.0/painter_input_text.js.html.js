tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_input_text.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Painter class for the 'input[type=text]' and 'input[type=password]'.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar InputPainter = require('./base');\nvar util = require('../../common/util');\n\n/**\n * Painter class for the 'input[type=text]' and 'input[type=password]'\n * @module painter/input/text\n * @extends module:painter/input/base\n */\nvar TextPainter = tui.util.defineClass(InputPainter, /**@lends module:painter/input/text.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - options\n     */\n    init: function(options) {\n        InputPainter.apply(this, arguments);\n\n        this.inputType = options.inputType;\n\n        /**\n         * css selector to use delegated event handlers by '$.on()' method.\n         * @type {String}\n         */\n        this.selector = 'input[type=' + this.inputType + ']';\n\n        this._extendEvents({\n            selectstart: '_onSelectStart'\n        });\n    },\n\n    /**\n     * Markup template\n     * @returns {string} html\n     */\n    template: _.template(\n        '&lt;input' +\n        ' type=\"&lt;%=type%>\"' +\n        ' value=\"&lt;%=value%>\"' +\n        ' name=\"&lt;%=name%>\"' +\n        ' align=\"center\"' +\n        ' maxLength=\"&lt;%=maxLength%>\"' +\n        ' &lt;%=disabled%>' +\n        '/>'\n    ),\n\n    /**\n     * Event handler for the'selectstart' event.\n     * (To prevent 'selectstart' event be prevented by module:view/layout/body in IE)\n     * @param {Event} event - DOM event object\n     * @private\n     */\n    _onSelectStart: function(event) {\n        event.stopPropagation();\n    },\n\n    /**\n     * Convert each character in the given string to '*' and returns them as a string.\n     * @param {String} value - value string\n     * @returns {String}\n     * @private\n     */\n    _convertStringToAsterisks: function(value) {\n        return Array(value.length + 1).join('*');\n    },\n\n    /**\n     * Returns the value string of given data to display in the cell.\n     * @param {Object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {String}\n     * @protected\n     */\n    _getDisplayValue: function(cellData) {\n        var value = cellData.formattedValue;\n\n        if (this.inputType === 'password') {\n            value = this._convertStringToAsterisks(cellData.value);\n        }\n\n        return value;\n    },\n\n    /**\n     * Generates an input HTML string from given data, and returns it.\n     * @param {object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {string}\n     * @protected\n     */\n    _generateInputHtml: function(cellData) {\n        var maxLength = tui.util.pick(cellData, 'columnModel', 'editOption', 'maxLength');\n\n        return this.template({\n            type: this.inputType,\n            value: cellData.value,\n            name: util.getUniqueKey(),\n            disabled: cellData.isDisabled ? 'disabled' : '',\n            maxLength: maxLength\n        });\n    },\n\n    /**\n     * Finds an element from the given parent element with 'this.selector', and moves focus to it.\n     * @param {jquery} $parent - parent element\n     * @override\n     */\n    focus: function($parent) {\n        var $input = $parent.find(this.selector);\n\n        if ($input.length === 1 &amp;&amp; !$input.is(':focus')) {\n            $input.select();\n        }\n    }\n});\n\nmodule.exports = TextPainter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"