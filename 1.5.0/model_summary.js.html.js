tui.util.defineNamespace("fedoc.content", {});
fedoc.content["model_summary.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Focus 관련 데이터 처리름 담당한다.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Model = require('../base/model');\nvar typeConst = require('../common/constMap').summaryType;\n\n/**\n * Summary Model\n * @module model/summary\n * @extends module:base/model\n */\nvar Summary = Model.extend(/**@lends module:model/summary.prototype */{\n    /**\n     * @constructs\n     * @param {Object} attr - attributes\n     * @param {Object} options - options\n     */\n    initialize: function(attr, options) {\n        this.dataModel = options.dataModel;\n\n        /**\n         * An array of columnNames using auto calculation\n         * @type {Array.&lt;string>}\n         */\n        this.autoColumnNames = options.autoColumnNames;\n\n        /**\n         * Summary value map (KV)\n         * K: column name {string}\n         * V: value map {object}\n         * @type {object}\n         * @example\n         * {\n         *    columnName1: {\n         *        [typeConst.SUM]: 200,\n         *        [typeConst.AVG]: 200,\n         *    },\n         *    columnName2: {\n         *        [typeConst.MAX]: 100\n         *    }\n         * }\n         */\n        this.columnSummaryMap = {};\n\n        this.listenTo(this.dataModel, 'add remove reset', this._resetSummaryMap);\n        this.listenTo(this.dataModel, 'change', this._onChangeData);\n        this.listenTo(this.dataModel, 'delRange', this._onDeleteRangeData);\n\n        this._resetSummaryMap();\n    },\n\n    /**\n     * Calculate summaries of given array.\n     * Values which can not be converted to Number type will be considered as 0.\n     * @param {Array} values - An array of values (to be converted to Number type)\n     * @returns {Object}\n     * @private\n     */\n    _calculate: function(values) {\n        var min = Number.MAX_VALUE;\n        var max = Number.MIN_VALUE;\n        var sum = 0;\n        var count = values.length;\n        var resultMap = {};\n        var i, value;\n\n        for (i = 0; i &lt; count; i += 1) {\n            value = Number(values[i]);\n            if (isNaN(value)) {\n                value = 0;\n            }\n\n            sum += value;\n            if (min > value) {\n                min = value;\n            }\n            if (max &lt; value) {\n                max = value;\n            }\n        }\n\n        resultMap[typeConst.SUM] = sum;\n        resultMap[typeConst.MIN] = min;\n        resultMap[typeConst.MAX] = max;\n        resultMap[typeConst.AVG] = count ? (sum / count) : 0;\n        resultMap[typeConst.CNT] = count;\n\n        return resultMap;\n    },\n\n    /**\n     * Initialize summary map of columns specified in 'columnSummries' property.\n     * @private\n     */\n    _resetSummaryMap: function() {\n        this._resetFooterSummaryValue();\n    },\n\n    /**\n     * Reset summary values of given columnName\n     * @param {Array.&lt;string>} columnNames - An array of column names\n     * @private\n     */\n    _resetFooterSummaryValue: function(columnNames) {\n        var targetColumnNames = this.autoColumnNames;\n\n        if (columnNames) {\n            targetColumnNames = _.intersection(columnNames, this.autoColumnNames);\n        }\n        _.each(targetColumnNames, function(columnName) {\n            var values = this.dataModel.getColumnValues(columnName);\n            var valueMap = this._calculate(values);\n\n            this.columnSummaryMap[columnName] = valueMap;\n            this.trigger('change', columnName, valueMap);\n        }, this);\n    },\n\n    /**\n     * Event handler for 'change' event on dataModel\n     * @param {object} model - row model\n     * @private\n     */\n    _onChangeData: function(model) {\n        this._resetFooterSummaryValue(_.keys(model.changed));\n    },\n\n    /**\n     * Event handler for 'changeRange' event on dataModel\n     * @param {Array.&lt;number>} rowKeys - An array of rowkeys\n     * @param {Array.&lt;number>} columnNames - An arrya of columnNames\n     * @private\n     */\n    _onDeleteRangeData: function(rowKeys, columnNames) {\n        this._resetFooterSummaryValue(columnNames);\n    },\n\n    /**\n     * Returns the summary value of given column and type.\n     * If the summaryType is not specified, returns all values of types as an object\n     * @param {string} columnName - column name\n     * @param {string} [summaryType] - summary type\n     * @returns {number|Object}\n     */\n    getValue: function(columnName, summaryType) {\n        var valueMap = this.columnSummaryMap[columnName];\n        var value;\n\n        if (!summaryType) {\n            return _.isUndefined(valueMap) ? null : valueMap;\n        }\n\n        value = tui.util.pick(valueMap, summaryType);\n        return _.isUndefined(value) ? null : value;\n    }\n});\n\nmodule.exports = Summary;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"