tui.util.defineNamespace("fedoc.content", {});
fedoc.content["theme_manager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n* @fileoverview theme manager\n* @author NHN Ent. FE Development Team\n*/\n'use strict';\n\nvar util = require('../common/util');\nvar styleGen = require('./styleGenerator');\nvar themeNameConst = require('../common/constMap').themeName;\n\nvar STYLE_ELEMENT_ID = 'tui-grid-theme-style';\n\nvar presetOptions = {};\npresetOptions[themeNameConst.DEFAULT] = require('./preset/default');\npresetOptions[themeNameConst.STRIPED] = require('./preset/striped');\npresetOptions[themeNameConst.CLEAN] = require('./preset/clean');\n\n/**\n * build css string with given options.\n * @param {Object} options - options\n * @returns {String}\n */\nfunction buildCssString(options) {\n    var styles = [\n        styleGen.grid(options.grid),\n        styleGen.scrollbar(options.scrollbar),\n        styleGen.toolbar(options.toolbar),\n        styleGen.heightResizeHandle(options.heightResizeHandle),\n        styleGen.pagination(options.pagination),\n        styleGen.selection(options.selection)\n    ];\n    var cell = options.cell;\n\n    if (cell) {\n        styles = styles.concat([\n            styleGen.cell(cell.normal),\n            styleGen.cellDummy(cell.dummy),\n            styleGen.cellEditable(cell.editable),\n            styleGen.cellHead(cell.head),\n            styleGen.cellOddRow(cell.oddRow),\n            styleGen.cellEvenRow(cell.evenRow),\n            styleGen.cellRequired(cell.required),\n            styleGen.cellDisabled(cell.disabled),\n            styleGen.cellInvalid(cell.invalid),\n            styleGen.cellCurrentRow(cell.currentRow),\n            styleGen.cellSelectedHead(cell.selectedHead),\n            styleGen.cellFocused(cell.focused)\n        ]);\n    }\n\n    return styles.join('');\n}\n\n/**\n * Set document style with given options.\n * @param {Object} options - options\n */\nfunction setDocumentStyle(options) {\n    var cssString = buildCssString(options);\n\n    $('#' + STYLE_ELEMENT_ID).remove();\n    util.appendStyleElement(STYLE_ELEMENT_ID, cssString);\n}\n\nmodule.exports = {\n    /**\n     * Creates a style element using theme options identified by given name,\n     * and appends it to the document.\n     * @param {String} themeName - preset theme name\n     * @param {Object} extOptions - if exist, extend preset theme options with it.\n     */\n    apply: function(themeName, extOptions) {\n        var options = presetOptions[themeName];\n\n        if (!options) {\n            options = presetOptions[themeNameConst.DEFAULT];\n        }\n        options = $.extend(true, {}, options, extOptions);\n        setDocumentStyle(options);\n    },\n\n    /**\n     * Returns whether the style of a theme is applied.\n     * @returns {Boolean}\n     */\n    isApplied: function() {\n        return $('#' + STYLE_ELEMENT_ID).length === 1;\n    }\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"