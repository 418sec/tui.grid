tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_input_button.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Painter class for 'checkbox' and 'radio button'.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar InputPainter = require('./base');\nvar util = require('../../common/util');\n\n/**\n * Painter class for 'checkbox' and 'radio button'.\n * @module painter/input/button\n * @extends module:painter/input/base\n */\nvar ButtonPainter = tui.util.defineClass(InputPainter, /**@lends module:painter/input/button.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - options\n     */\n    init: function(options) {\n        InputPainter.apply(this, arguments);\n\n        this.inputType = options.inputType;\n\n        /**\n         * css selector to use delegated event handlers by '$.on()' method.\n         * @type {String}\n         */\n        this.selector = 'fieldset[data-type=' + this.inputType + ']';\n\n        this._extendEvents({\n            mousedown: '_onMouseDown'\n        });\n\n        this._extendKeydownActions({\n            TAB: function(param) {\n                var value;\n                if (!this._focusNextInput(param.$target, param.shiftKey)) {\n                    value = this._getCheckedValueString(param.$target);\n                    this.controller.finishEditing(param.address, true, value);\n                    this.controller.focusInToNextCell(param.shiftKey);\n                }\n            },\n            ENTER: function(param) {\n                var value = this._getCheckedValueString(param.$target);\n                this.controller.finishEditing(param.address, true, value);\n            },\n            LEFT_ARROW: function(param) {\n                this._focusNextInput(param.$target, true);\n            },\n            RIGHT_ARROW: function(param) {\n                this._focusNextInput(param.$target);\n            },\n            UP_ARROW: function() {},\n            DOWN_ARROW: function() {}\n        });\n    },\n\n    /**\n     * fieldset markup template\n     * @returns {String}\n     */\n    template: _.template(\n        '&lt;fieldset data-type=\"&lt;%=type%>\">&lt;%=content%>&lt;/fieldset>'\n    ),\n\n    /**\n     * Input markup template\n     * @returns {String}\n     */\n    inputTemplate: _.template(\n        '&lt;input type=\"&lt;%=type%>\" data-value-type=\"&lt;%=valueType%>\" name=\"&lt;%=name%>\" id=\"&lt;%=id%>\" value=\"&lt;%=value%>\"' +\n        ' &lt;%=checked%> &lt;%=disabled%> />'\n    ),\n\n    /**\n     * Label markup template\n     * @returns {String}\n     */\n    labelTemplate: _.template(\n        '&lt;label for=\"&lt;%=id%>\">&lt;%=labelText%>&lt;/label>'\n    ),\n\n    /**\n     * Event handler for 'blur' event\n     * @param {Event} event - event object\n     * @override\n     * @private\n     */\n    _onFocusOut: function(event) {\n        var $target = $(event.target);\n        var self = this;\n\n        _.defer(function() {\n            var address, value;\n\n            if (!$target.siblings('input:focus').length) {\n                address = self._getCellAddress($target);\n                value = self._getCheckedValueString($target);\n                self.controller.finishEditing(address, false, value);\n            }\n        });\n    },\n\n    /**\n     * Event handler for 'mousedown' DOM event\n     * @param {MouseEvent} event - mouse event object\n     * @private\n     */\n    _onMouseDown: function(event) {\n        var $target = $(event.target);\n        var hasFocusedInput = $target.closest('fieldset').find('input:focus').length > 0;\n\n        if (!$target.is('input') &amp;&amp; hasFocusedInput) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    },\n\n    /**\n     * Moves focus to the next input element.\n     * @param {jquery} $target - target element\n     * @param {Boolean} reverse - if set to true, find previous element instead of next element.\n     * @returns {Boolean} - false if no element exist, true otherwise.\n     * @private\n     */\n    _focusNextInput: function($target, reverse) {\n        var traverseFuncName = reverse ? 'prevAll' : 'nextAll',\n            $nextInputs = $target[traverseFuncName]('input');\n\n        if ($nextInputs.length) {\n            $nextInputs.first().focus();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns the comma seperated value of all checked inputs\n     * @param {jQuery} $target - target element\n     * @returns {String}\n     * @private\n     */\n    _getCheckedValueString: function($target) {\n        var $checkedInputs = $target.parent().find('input:checked');\n        var checkedValues = [];\n        var result;\n\n        $checkedInputs.each(function() {\n            var $input = $(this);\n            var valueType = $input.attr('data-value-type');\n            var value = util.convertValueType($input.val(), valueType);\n\n            checkedValues.push(value);\n        });\n\n        if (checkedValues.length === 1) {\n            result = checkedValues[0];\n        } else {\n            result = checkedValues.join(',');\n        }\n\n        return result;\n    },\n\n    /**\n     * Returns the set object that contains the checked value.\n     * @param {String} value - value\n     * @returns {Object}\n     * @private\n     */\n    _getCheckedValueSet: function(value) {\n        var checkedMap = {};\n\n        _.each(String(value).split(','), function(itemValue) {\n            checkedMap[itemValue] = true;\n        });\n\n        return checkedMap;\n    },\n\n    /**\n     * Returns the value string of given data to display in the cell.\n     * @param {Object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {String}\n     * @protected\n     */\n    _getDisplayValue: function(cellData) {\n        var checkedSet = this._getCheckedValueSet(cellData.value);\n        var optionTexts = [];\n\n        _.each(cellData.optionList, function(item) {\n            if (checkedSet[item.value]) {\n                optionTexts.push(item.text);\n            }\n        });\n\n        return optionTexts.join(',');\n    },\n\n    /**\n     * Generates an input HTML string from given data, and returns it.\n     * @param {object} cellData - cell data\n     * @implements {module:painter/input/base}\n     * @returns {string}\n     * @protected\n     */\n    _generateInputHtml: function(cellData) {\n        var checkedSet = this._getCheckedValueSet(cellData.value);\n        var name = util.getUniqueKey();\n        var contentHtml = '';\n\n        _.each(cellData.optionList, function(item) {\n            var id = name + '_' + item.value;\n\n            contentHtml += this.inputTemplate({\n                type: this.inputType,\n                id: id,\n                name: name,\n                value: item.value,\n                valueType: typeof item.value,\n                checked: checkedSet[item.value] ? 'checked' : '',\n                disabled: cellData.isDisabled ? 'disabled' : ''\n            });\n            if (item.text) {\n                contentHtml += this.labelTemplate({\n                    id: id,\n                    labelText: item.text\n                });\n            }\n        }, this);\n\n        return this.template({\n            type: this.inputType,\n            content: contentHtml\n        });\n    },\n\n    /**\n     * Finds an element from the given parent element with 'this.selector', and moves focus to it.\n     * @param {jquery} $parent - parent element\n     * @override\n     */\n    focus: function($parent) {\n        var $input = $parent.find('input');\n\n        if (!$input.is(':focus')) {\n            $input.eq(0).focus();\n        }\n    }\n});\n\nmodule.exports = ButtonPainter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"