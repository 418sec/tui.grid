tui.util.defineNamespace("fedoc.content", {});
fedoc.content["publicEventEmitter.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Public Event Emitter\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\nvar Backbone = require('backbone');\n\n/**\n * Class that listens public events (for external user) to the other object and\n * triggers them on the public object(module:grid).\n * @module publicEventEmitter\n */\nvar PublicEventEmitter = tui.util.defineClass(/**@lends module:publicEventEmitter.prototype */{\n    /**\n     * @constructs\n     * @param {Object} publicObject - Object on which event will be triggered.\n     *            This object should have methods of Backbone.Events.\n     */\n    init: function(publicObject) {\n        this.publicObject = publicObject;\n    },\n\n    /**\n     * Listen and trigger specified events with same event name.\n     * @param {Object} target - Target object\n     * @param {String[]} eventNames - An array of the event names\n     * @private\n     */\n    _listenForThrough: function(target, eventNames) {\n        _.each(eventNames, function(eventName) {\n            this.listenTo(target, eventName, _.bind(this._triggerOnPublic, this, eventName));\n        }, this);\n    },\n\n    /**\n     * Listen specified event and rename it to public name and trigger it.\n     * @param  {Object} target - Target object\n     * @param  {String} eventName - Event name\n     * @param  {String} publicEventName - New event name for public use\n     * @private\n     */\n    _listenForRename: function(target, eventName, publicEventName) {\n        this.listenTo(target, eventName, _.bind(this._triggerOnPublic, this, publicEventName));\n    },\n\n    /**\n     * Trigger specified event on the public object.\n     * @param  {String} eventName - Event name\n     * @param  {Object} eventData - Event data\n     * @private\n     */\n    _triggerOnPublic: function(eventName, eventData) {\n        this.publicObject.trigger(eventName, eventData);\n    },\n\n    /**\n     * Listen to Net addon.\n     * @param {module:addon/net} net - Net addon object\n     */\n    listenToNetAddon: function(net) {\n        this._listenForThrough(net, [\n            'beforeRequest',\n            'response',\n            'successResponse',\n            'failResponse',\n            'errorResponse'\n        ]);\n    },\n\n    /**\n     * Listen to Conatiner view.\n     * @param  {module:view/container} container - Container view object\n     */\n    listenToContainerView: function(container) {\n        this._listenForThrough(container, [\n            'click',\n            'dblclick',\n            'mousedown',\n            'clickCell',\n            'dblclickCell',\n            'mouseoverCell',\n            'mouseoutCell',\n            'rendered'\n        ]);\n    },\n\n    /**\n     * Listen to Focus model\n     * @param  {module:model/focus} focusModel - Focus model\n     */\n    listenToFocusModel: function(focusModel) {\n        this._listenForRename(focusModel, 'select', 'selectRow');\n    }\n});\n\n_.extend(PublicEventEmitter.prototype, Backbone.Events);\n\nmodule.exports = PublicEventEmitter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"