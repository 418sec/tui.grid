tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_layout_resizeHandler.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ResizeHandler for the Header\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar View = require('../../base/view');\n\n/**\n * Reside Handler class\n * @module view/layout/resizeHandler\n * @extends module:base/view\n */\nvar ResizeHandler = View.extend(/**@lends module:view/layout/resizeHandler.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - Options\n     */\n    initialize: function(options) {\n        this.setOwnProperties({\n            dimensionModel: options.dimensionModel,\n            columnModel: options.columnModel,\n            whichSide: options.whichSide || 'R',\n\n            isResizing: false,     //현재 resize 발생 상황인지\n            $target: null,         //이벤트가 발생한 target resize handler\n            differenceLeft: 0,\n            initialWidth: 0,\n            initialOffsetLeft: 0,\n            initialLeft: 0\n        });\n        this.listenTo(this.dimensionModel, 'change:which columnWidthChanged', this._refreshHandlerPosition);\n    },\n\n    tagName: 'div',\n\n    className: 'resize_handle_container',\n\n    events: {\n        'mousedown .resize_handle': '_onMouseDown',\n        'click .resize_handle': '_onClick'\n    },\n\n    template: _.template('' +\n        '&lt;div columnindex=\"&lt;%=columnIndex%>\" ' +\n        'columnname=\"&lt;%=columnName%>\" ' +\n        'class=\"resize_handle' +\n        '&lt;% if(isLast === true) ' +\n        ' print(\" resize_handle_last\");%>' +\n        '\" ' +\n        'style=\"&lt;%=height%>\" ' +\n        'title=\"마우스 드래그를 통해 컬럼의 넓이를 변경할 수 있고,더블클릭을 통해 넓이를 초기화할 수 있습니다.\">' +\n        '&lt;/div>'),\n\n    /**\n     * columnWidthList 와 columnModelList 를 함께 반환한다.\n     * @returns {{widthList: (Array|*), modelList: (Array|*)}} Column Data\n     * @private\n     */\n    _getColumnData: function() {\n        var columnModel = this.columnModel,\n            dimensionModel = this.dimensionModel,\n            columnWidthList = dimensionModel.getColumnWidthList(this.whichSide),\n            columnModelList = columnModel.getVisibleColumnModelList(this.whichSide, true);\n\n        return {\n            widthList: columnWidthList,\n            modelList: columnModelList\n        };\n    },\n\n    /**\n     * resize handler 마크업을 구성한다.\n     * @returns {String} resize handler 의 html 마크업 스트링\n     * @private\n     */\n    _getResizeHandlerMarkup: function() {\n        var columnData = this._getColumnData(),\n            columnModelList = columnData.modelList,\n            headerHeight = this.dimensionModel.get('headerHeight'),\n            length = columnModelList.length,\n            resizeHandleMarkupList;\n\n        resizeHandleMarkupList = _.map(columnModelList, function(columnModel, index) {\n            return this.template({\n                columnIndex: index,\n                columnName: columnModel.columnName,\n                isLast: index + 1 === length,\n                height: headerHeight\n            });\n        }, this);\n        return resizeHandleMarkupList.join('');\n    },\n\n    /**\n     * 랜더링 한다.\n     * @returns {View.Layout.Header.ResizeHandler} This object\n     */\n    render: function() {\n        var headerHeight = this.dimensionModel.get('headerHeight'),\n            htmlStr = this._getResizeHandlerMarkup();\n\n        this.$el.empty().show().html(htmlStr).css({\n            marginTop: -headerHeight,\n            height: headerHeight\n        });\n\n        //header 가 랜더링 된 이후 widthList 를 보정 하기위해 setTimeout 을 사용한다.\n        this._refreshHandlerPosition();\n        return this;\n    },\n\n    /**\n     * 생성된 핸들러의 위치를 설정한다.\n     * @private\n     */\n    _refreshHandlerPosition: function() {\n        var columnData = this._getColumnData(),\n            columnWidthList = columnData.widthList,\n            $resizeHandleList = this.$el.find('.resize_handle'),\n            $table = this.$el.parent().find('table:first'),\n            isChanged = false,\n            $handler,\n            columnName,\n            curPos = 0,\n            border = 1,\n            width;\n\n        tui.util.forEachArray($resizeHandleList, function(item, index) {\n            $handler = $resizeHandleList.eq(index);\n            columnName = $handler.attr('columnname');\n            width = $table.find('th[columnname=\"' + columnName + '\"]').width();\n            if (tui.util.isExisty(width)) {\n                isChanged = isChanged || (width !== columnWidthList[index]);\n            } else {\n                width = columnWidthList[index];\n            }\n            curPos += width + border;\n            $handler.css('left', (curPos - 3) + 'px');\n        });\n    },\n\n    /**\n     * 현재 mouse move resizing 중인지 상태 flag 반환\n     * @returns {boolean}    현재 resize 중인지 여부\n     * @private\n     */\n    _isResizing: function() {\n        return !!this.isResizing;\n    },\n\n    /**\n     * mousedown 이벤트 핸들러\n     * @param {event} mouseDownEvent    마우스 이벤트 객체\n     * @private\n     */\n    _onMouseDown: function(mouseDownEvent) {\n        this._startResizing(mouseDownEvent);\n    },\n\n    /**\n     * click 이벤트 핸들러\n     * @param {Event} clickEvent 마우스 이벤트 객체\n     * @private\n     */\n    _onClick: function(clickEvent) {\n        var $target = $(clickEvent.target),\n            index = parseInt($target.attr('columnindex'), 10),\n            isClicked = $target.data('isClicked');\n\n        if (isClicked) {\n            this.dimensionModel.restoreColumnWidth(this._getHandlerColumnIndex(index));\n            this._clearClickedFlag($target);\n            this._refreshHandlerPosition();\n        } else {\n            this._setClickedFlag($target);\n        }\n    },\n\n    /**\n     * 더블클릭을 확인하기 위한 isClicked 플래그를 설정한다.\n     * @param {jQuery} $target 설정할 타겟 엘리먼트\n     * @private\n     */\n    _setClickedFlag: function($target) {\n        $target.data('isClicked', true);\n        setTimeout($.proxy(this._clearClickedFlag, this, $target), 500);\n    },\n\n    /**\n     * 더블클릭을 확인하기 위한 isClicked 를 제거한다.\n     * @param {jQuery} $target 설정할 타겟 엘리먼트\n     * @private\n     */\n    _clearClickedFlag: function($target) {\n        $target.data('isClicked', false);\n    },\n\n    /**\n     * mouseup 이벤트 핸들러\n     * @private\n     */\n    _onMouseUp: function() {\n        this._stopResizing();\n    },\n\n    /**\n     * mousemove 이벤트 핸들러\n     * @param {event} mouseMoveEvent    마우스 이벤트 객체\n     * @private\n     */\n    _onMouseMove: function(mouseMoveEvent) {\n        var left, width, index;\n\n        /* istanbul ignore else */\n        if (this._isResizing()) {\n            mouseMoveEvent.preventDefault();\n\n            left = mouseMoveEvent.pageX - this.initialOffsetLeft;\n            width = this._calculateWidth(mouseMoveEvent.pageX);\n            index = parseInt(this.$target.attr('columnindex'), 10);\n\n            this.$target.css('left', left + 'px');\n            this.dimensionModel.setColumnWidth(this._getHandlerColumnIndex(index), width);\n            this._refreshHandlerPosition();\n        }\n    },\n\n    /**\n     * 너비를 계산한다.\n     * @param {number} pageX    마우스의 x 좌표\n     * @returns {number} x좌표를 기준으로 계산한 width 값\n     * @private\n     */\n    _calculateWidth: function(pageX) {\n        var difference = pageX - this.initialOffsetLeft - this.initialLeft;\n        return this.initialWidth + difference;\n    },\n\n    /**\n     * 핸들러의 index 로부터 컬럼의 index 를 반환한다.\n     * @param {number} index 핸들러의 index 값\n     * @returns {number} 컬럼 index 값\n     * @private\n     */\n    _getHandlerColumnIndex: function(index) {\n        return (this.whichSide === 'R') ? (index + this.columnModel.getVisibleColumnFixCount(true)) : index;\n    },\n\n    /**\n     * resize start 세팅\n     * @param {event} mouseDownEvent 마우스 이벤트\n     * @private\n     */\n    _startResizing: function(mouseDownEvent) {\n        var columnData = this._getColumnData(),\n            columnWidthList = columnData.widthList,\n            $target = $(mouseDownEvent.target);\n\n        this.isResizing = true;\n        this.$target = $target;\n        this.initialLeft = parseInt($target.css('left').replace('px', ''), 10);\n        this.initialOffsetLeft = this.$el.offset().left;\n        this.initialWidth = columnWidthList[$target.attr('columnindex')];\n        $('body').css('cursor', 'col-resize');\n        $(document)\n            .bind('mousemove', $.proxy(this._onMouseMove, this))\n            .bind('mouseup', $.proxy(this._onMouseUp, this));\n\n        // for IE8 and under\n        if ($target[0].setCapture) {\n            $target[0].setCapture();\n        }\n    },\n\n    /**\n     * resize stop 세팅\n     * @private\n     */\n    _stopResizing: function() {\n        // for IE8 and under\n        if (this.$target &amp;&amp; this.$target[0].releaseCapture) {\n            this.$target[0].releaseCapture();\n        }\n\n        this.isResizing = false;\n        this.$target = null;\n        this.initialLeft = 0;\n        this.initialOffsetLeft = 0;\n        this.initialWidth = 0;\n\n        $('body').css('cursor', 'default');\n        $(document)\n            .unbind('mousemove', $.proxy(this._onMouseMove, this))\n            .unbind('mouseup', $.proxy(this._onMouseUp, this));\n    },\n\n    /**\n     * 소멸자\n     */\n    destroy: function() {\n        this.stopListening();\n        this._stopResizing();\n        this.remove();\n    }\n});\n\nmodule.exports = ResizeHandler;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"