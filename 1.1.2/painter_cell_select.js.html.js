tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_cell_select.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Painter class for the select cell\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar ListCell = require('./list');\nvar util = require('../../common/util');\n\n/**\n * Painter class for the select cell\n * @module painter/cell/select\n * @extends module:painter/cell/list\n */\nvar SelectCell = tui.util.defineClass(ListCell,/**@lends module:painter/cell/select.prototype */{\n    /**\n     * @constructs\n     */\n    init: function() {\n        ListCell.apply(this, arguments);\n\n        this.setKeyDownSwitch({\n            'ESC': function(keyDownEvent, param) {\n                this.focusOut(param.$target);\n            },\n            'ENTER': function(keyDownEvent, param) {\n                this.focusOut(param.$target);\n            }\n        });\n    },\n\n    eventHandler: {\n        'change select': '_onChange',\n        'keydown select': '_onKeyDown',\n        'blur select': '_onBlurSelect'\n    },\n\n    /**\n     * Content markup template\n     * @returns {string} html\n     */\n    contentTemplate: _.template(\n        '&lt;select' +\n        ' name=\"&lt;%=name%>\"' +\n        ' &lt;% if (isDisabled) print(\"disabled\"); %>' +\n        '>' +\n        '&lt;%=options%>' +\n        '&lt;/select>'\n    ),\n\n    /**\n     * Options markup template\n     * It will be added to content\n     * :: The value of option is a type of stirng, and use '==' operator for\n     *    comparison regardless of some types of value in cellData\n     * @returns {string} html\n     */\n    optionTemplate: _.template(\n        '&lt;option' +\n        ' value=\"&lt;%=value%>\"' +\n        ' &lt;% if (cellDataValue == value)  print(\"selected\"); %>' +\n        '>' +\n        '&lt;%=text%>' +\n        '&lt;/option>'\n    ),\n\n    /**\n     * Event handler for 'blur' event on select element\n     * @param {Event} ev - Event object\n     */\n    _onBlurSelect: function(ev) {\n        var cellAddr = this._getCellAddress($(ev.target));\n        this._validateData(cellAddr.rowKey, cellAddr.columnName);\n    },\n\n    /**\n     * 자기 자신의 인스턴스의 editType 을 반환한다.\n     * @returns {String} editType 'normal|button|select|button|text|text-password|text-convertible'\n     */\n    getEditType: function() {\n        return 'select';\n    },\n\n    /**\n     * cell 에서 키보드 enter 를 입력했을 때 편집모드로 전환. cell 내 input 에 focus 를 수행하는 로직. 필요에 따라 override 한다.\n     * @param {jQuery} $td 해당 cell 엘리먼트\n     */\n    focusIn: function($td) {\n        /* istanbul ignore next */\n        if ($td.find('select').prop('disabled')) {\n            this.grid.focusModel.focusClipboard();\n        } else {\n            $td.find('select').eq(0).focus();\n        }\n    },\n\n    /**\n     * Cell data 를 인자로 받아 &lt;td> 안에 들아갈 html string 을 반환한다.\n     * redrawAttributes 에 해당하는 프로퍼티가 변경되었을 때 수행될 로직을 구현한다.\n     * @param {object} cellData 모델의 셀 데이터\n     * @returns {string} html 마크업 문자열\n     * @example\n     * var html = this.getContentHtml();\n     * &lt;select>\n     *     &lt;option value='1'>option1&lt;/option>\n     *     &lt;option value='2'>option1&lt;/option>\n     *     &lt;option value='3'>option1&lt;/option>\n     * &lt;/select>\n     */\n    getContentHtml: function(cellData) {\n        var list = this.getOptionList(cellData),\n            isDisabled = cellData.isDisabled,\n            html = this._getConvertedHtml(cellData.value, cellData),\n            optionsHtml = '';\n\n        //@todo html !== null인경우 tc부족\n        if (tui.util.isNull(html)) {\n           _.each(list, function(item) {\n               optionsHtml += this.optionTemplate({\n                   value: item.value,\n                   cellDataValue: cellData.value,\n                   text: item.text\n               });\n           }, this);\n\n           html = this.contentTemplate({\n               name: util.getUniqueKey(),\n               isDisabled: isDisabled,\n               options: optionsHtml\n           });\n        }\n        return html;\n    },\n\n    /**\n     * 각 셀 페인터 인스턴스마다 정의된 getContentHtml 을 이용하여\n     * 컬럼모델의 defaultValue, beforeText, afterText 를 적용한 content html 마크업 스트링 을 반환한다.\n     * (Input의 width를 beforeText와 afterText의 유무에 관계없이 100%로 유지하기 위해 마크업이 달라져야 하기 때문에\n     * View.Base.Painter.Cell로부터 override 해서 구현함)\n     * @param {object} cellData Model 의 셀 데이터\n     * @returns {string} 컬럼모델의 defaultValue, beforeText, afterText 를 적용한 content html 마크업 스트링\n     * @private\n     * @override\n     */\n    _getContentHtml: function(cellData) {\n        var columnName = cellData.columnName,\n            columnModel = this.grid.columnModel.getColumnModel(columnName),\n            editOption = columnModel.editOption || {},\n            content = '',\n            beforeContent, afterContent;\n\n        if (!tui.util.isExisty(cellData.value)) {\n            cellData.value = columnModel.defaultValue;\n        }\n        beforeContent = this._getExtraContent(editOption.beforeContent || editOption.beforeText, cellData);\n        afterContent = this._getExtraContent(editOption.afterContent || editOption.afterText, cellData);\n\n        if (beforeContent) {\n            content += this._getSpanWrapContent(beforeContent, 'before', cellData);\n        }\n        if (afterContent) {\n            content += this._getSpanWrapContent(afterContent, 'after', cellData);\n        }\n        content += this._getSpanWrapContent(this.getContentHtml(cellData), 'input');\n\n        return content;\n    },\n\n    /**\n     * model의 redrawAttributes 에 해당하지 않는 프로퍼티의 변화가 발생했을 때 수행할 메서드\n     * redrawAttributes 에 해당하지 않는 프로퍼티가 변경되었을 때 수행할 로직을 구현한다.\n     * @param {object} cellData 모델의 셀 데이터\n     * @param {jquery} $td 해당 cell 엘리먼트\n     * @param {Boolean} hasFocusedElement 해당 셀에 실제 focus 된 엘리먼트가 존재하는지 여부\n     */\n    setElementAttribute: function(cellData, $td, hasFocusedElement) {\n        var $select = $td.find('select');\n        /*\n        키보드 상하로 조작시 onChange 콜백에서 false 리턴시 이전 값으로\n        돌아가지 않는 현상때문에 blur focus 를 수행한다.\n         */\n\n        /* istanbul ignore next: blur 확인 불가 */\n        if (hasFocusedElement) {\n            $select.blur();\n        }\n        $select.val(cellData.value);\n\n        /* istanbul ignore next: focus 확인 불가 */\n        if (hasFocusedElement) {\n            $select.focus();\n        }\n    },\n\n    /**\n     * change 이벤트 핸들러\n     * @param {Event} changeEvent   이벤트 객체\n     * @private\n     */\n    _onChange: function(changeEvent) {\n        var $target = $(changeEvent.target),\n            cellAddr = this._getCellAddress($target),\n            grid = this.grid;\n        grid.dataModel.setValue(cellAddr.rowKey, cellAddr.columnName, $target.val());\n    }\n});\n\nmodule.exports = SelectCell;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"