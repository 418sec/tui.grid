tui.util.defineNamespace("fedoc.content", {});
fedoc.content["model_row.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Row Model for Rendering (View Model)\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Model = require('../base/model');\nvar util = require('../common/util');\n\n/**\n * Row Model\n * @module model/row\n * @extends module:base/model\n */\nvar Row = Model.extend(/**@lends module:model/row.prototype */{\n    /**\n     * @constructs\n     * @param  {object} attributes - Attributes\n     * @param  {object} options - Options\n     */\n    initialize: function(attributes, options) {\n        var rowKey = attributes &amp;&amp; attributes['rowKey'],\n            rowListData = this.collection.dataModel,\n            rowData = rowListData.get(rowKey);\n\n        if (rowData) {\n            this.listenTo(rowData, 'change restore', this._onDataModelChange);\n            this.listenTo(rowData, 'extraDataChanged', this._setRowExtraData);\n            this.listenTo(rowListData, 'disabledChanged', this._onDataModelDisabledChanged);\n\n            this.rowData = rowData;\n        }\n    },\n\n    idAttribute: 'rowKey',\n\n    /**\n     * Event handler for 'change restore' event on rowData model\n     * @param {Object} model - RowData model on which event occurred\n     * @private\n     */\n    _onDataModelChange: function(model) {\n        _.each(model.changed, function(value, columnName) {\n            this.setCell(columnName, {\n                value: value\n            });\n        }, this);\n    },\n\n    /**\n     * Returns an array of visible column names.\n     * @returns {Array.&lt;String>} Visible column names\n     * @private\n     */\n    _getColumnNameList: function() {\n        var columnModels = this.collection.columnModel.getVisibleColumnModelList(null, true);\n\n        return _.pluck(columnModels, 'columnName');\n    },\n\n    /**\n     * Returns whether the state of specified column is disabled.\n     * @param  {String} columnName - Column name\n     * @param  {{isDisabledCheck: Boolean, isDisabled: Boolean, isChecked: Boolean}} rowState - Row state\n     * @returns {Boolean} - True if disabled\n     * @private\n     */\n    _isDisabled: function(columnName, rowState) {\n        var isDisabled = this.collection.dataModel.isDisabled;\n\n        if (!isDisabled) {\n            isDisabled = (columnName === '_button') ? rowState.isDisabledCheck : rowState.isDisabled;\n        }\n        return isDisabled;\n    },\n\n    /**\n     * Event handler for 'disabledChanged' event on dataModel\n     */\n    _onDataModelDisabledChanged: function() {\n        var columnNames = this._getColumnNameList(),\n            rowState = this.rowData.getRowState();\n\n        _.each(columnNames, function(columnName) {\n            this.setCell(columnName, {\n                isDisabled: this._isDisabled(columnName, rowState)\n            });\n        }, this);\n    },\n\n    /**\n     * Sets the 'isDisabled', 'isEditable', 'className' property of each cell data.\n     * @private\n     */\n    _setRowExtraData: function() {\n        var dataModel = this.collection.dataModel,\n            columnNames = this._getColumnNameList(),\n            rowState = this.rowData.getRowState(),\n            param;\n\n        if (tui.util.isUndefined(this.collection)) {\n            return;\n        }\n\n        _.each(columnNames, function(columnName) {\n            var cellData = this.get(columnName),\n                rowModel = this,\n                isEditable, isDisabled;\n\n            if (!tui.util.isUndefined(cellData)) {\n                isEditable = this.rowData.isEditable(columnName);\n                isDisabled = this._isDisabled(columnName, rowState);\n                if (dataModel.isRowSpanEnable() &amp;&amp; !cellData['isMainRow']) {\n                    rowModel = this.collection.get(cellData['mainRowKey']);\n                }\n                if (rowModel) {\n                    param = {\n                        isDisabled: isDisabled,\n                        isEditable: isEditable,\n                        className: this.rowData.getClassNameList(columnName).join(' ')\n                    };\n                    rowModel.setCell(columnName, param);\n                }\n            }\n        }, this);\n    },\n\n    /**\n     * Overrides Backbone.Model.parse\n     * (this method is called before initialize method)\n     * @param {Array} data - Original data\n     * @param {Object} options - Options\n     * @returns {Array} - Converted data.\n     * @override\n     */\n    parse: function(data, options) {\n        return this._formatData(data, options.collection.dataModel);\n    },\n\n    /**\n     * Convert the original data to rendering data.\n     * @param {Array} data - Original data\n     * @param {module:model/data/rowList} dataModel - Data model\n     * @returns {Array} - Converted data\n     * @private\n     */\n    _formatData: function(data, dataModel) {\n        var rowKey = data.rowKey,\n            row, rowState;\n\n        if (_.isUndefined(rowKey)) {\n            return data;\n        }\n        row = dataModel.get(rowKey),\n        rowState = row.getRowState();\n\n        _.each(data, function(value, columnName) {\n            var rowSpanData;\n\n            if (columnName !== 'rowKey' &amp;&amp; columnName !== '_extraData') {\n                if (dataModel.isRowSpanEnable() &amp;&amp;\n                    data['_extraData'] &amp;&amp; data['_extraData']['rowSpanData'] &amp;&amp;\n                    data['_extraData']['rowSpanData'][columnName]) {\n                    rowSpanData = data['_extraData']['rowSpanData'][columnName];\n                } else {\n                    rowSpanData = {\n                        mainRowKey: rowKey,\n                        count: 0,\n                        isMainRow: true\n                    };\n                }\n                data[columnName] = {\n                    rowKey: rowKey,\n                    columnName: columnName,\n                    value: value,\n                    rowSpan: rowSpanData.count,\n                    isMainRow: rowSpanData.isMainRow,\n                    mainRowKey: rowSpanData.mainRowKey,\n                    isEditable: row.isEditable(columnName),\n                    isDisabled: this._isDisabled(columnName, rowState),\n                    className: row.getClassNameList(columnName).join(' '),\n                    optionList: [], // for list type column (select, checkbox, radio)\n                    changed: [] //changed property names\n                };\n            }\n        }, this);\n        return data;\n    },\n\n    /**\n     * Sets the cell data.\n     * (Each cell data is reference type, so do not change the cell data directly and\n     *  use this method to trigger change event)\n     * @param {String} columnName - Column name\n     * @param {Object} param - Key-Value pair of the data to change\n     */\n    setCell: function(columnName, param) {\n        var isValueChanged = false,\n            changed = [],\n            rowIndex, rowKey, data;\n\n        if (!this.get(columnName)) {\n            return;\n        }\n\n        rowKey = this.get('rowKey');\n        data = _.clone(this.get(columnName));\n\n        _.each(param, function(changeValue, name) {\n            if (!util.isEqual(data[name], changeValue)) {\n                isValueChanged = (name === 'value') ? true : isValueChanged;\n                data[name] = changeValue;\n                changed.push(name);\n            }\n        }, this);\n\n        if (changed.length) {\n            data['changed'] = changed;\n            this.set(columnName, data);\n            if (isValueChanged) {\n                //value 가 변경되었을 경우 relation 을 수행한다.\n                rowIndex = this.collection.dataModel.indexOfRowKey(rowKey);\n                this.trigger('valueChange', rowIndex);\n            }\n        }\n    }\n});\n\nmodule.exports = Row;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"