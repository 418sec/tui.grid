tui.util.defineNamespace("fedoc.content", {});
fedoc.content["domState.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview This class offers methods that can be used to get the current state of DOM element.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar attrNameConst = require('./common/constMap').attrName;\n\n/**\n * Class for offering methods that can be used to get the current state of DOM element.\n * @module domState\n */\nvar DomState = tui.util.defineClass(/**@lends module:domState.prototype */{\n    /**\n     * @constructs\n     * @param {jQuery} $el - jQuery object of the container element.\n     */\n    init: function($el) {\n        this.$el = $el;\n    },\n\n    /**\n     * Returns the element of the table-cell identified by rowKey and columnName\n     * @param {(Number|String)} rowKey - Row key\n     * @param {String} columnName - Column name\n     * @returns {jQuery} Cell(TD) element\n     */\n    getElement: function(rowKey, columnName) {\n        return this.$el.find('tr[' + attrNameConst.ROW_KEY + '=' + rowKey + ']')\n            .find('td[' + attrNameConst.COLUMN_NAME + '=' + columnName + ']');\n    },\n\n    /**\n     * Returns the offset of the container element\n     * @returns {{top: Number, left: Number}} Offset object\n     */\n    getOffset: function() {\n        return this.$el.offset();\n    },\n\n    /**\n     * Returns the width of the container element\n     * @returns {Number} Width of the container element\n     */\n    getWidth: function() {\n        return this.$el.width();\n    },\n\n    /**\n     * Returns the height of the parent of container element.\n     * @returns {Number} Height of the parent of container element\n     */\n    getParentHeight: function() {\n        return this.$el.parent().height();\n    },\n\n    /**\n     * Returns whether there's child element having focus.\n     * @returns {boolean} True if there's child element having focus\n     */\n    hasFocusedElement: function() {\n        return !!this.$el.find(':focus').length;\n    }\n});\n\nmodule.exports = DomState;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"