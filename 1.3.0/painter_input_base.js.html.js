tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_input_base.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Base class for the Input Painter\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Painter = require('../../base/painter');\nvar keyNameMap = require('../../common/constMap').keyName;\n\n/**\n * Input Painter Base\n * @module painter/input/base\n * @extends module:base/painter\n */\nvar InputPainter = tui.util.defineClass(Painter, /**@lends module:painter/input/base.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - options\n     */\n    init: function() {\n        Painter.apply(this, arguments);\n    },\n\n    /**\n     * key-value object contains event names as keys and handler names as values\n     * @type {Object}\n     */\n    events: {\n        keydown: '_onKeyDown',\n        focusin: '_onFocusIn',\n        focusout: '_onFocusOut'\n    },\n\n    /**\n     * keydown Actions\n     * @type {Object}\n     */\n    keyDownActions: {\n        ESC: function(param) {\n            this.controller.finishEditing(param.address, true);\n        },\n        ENTER: function(param) {\n            this.controller.finishEditing(param.address, true, param.value);\n        },\n        TAB: function(param) {\n            this.controller.finishEditing(param.address, true, param.value);\n            this.controller.focusInToNextCell(param.shiftKey);\n        }\n    },\n\n    /**\n     * Extends the default keydown actions.\n     * @param {Object} actions - Object that contains the action functions\n     * @private\n     */\n    _extendKeydownActions: function(actions) {\n        this.keyDownActions = _.assign({}, this.keyDownActions, actions);\n    },\n\n    /**\n     * Extends the default event object\n     * @param {Object} events - Object that contains the names of event handlers\n     */\n    _extendEvents: function(events) {\n        this.events = _.assign({}, this.events, events);\n    },\n\n    /**\n     * Executes the custom handler (defined by user) of the input events.\n     * @param {Event} event - DOM event object\n     * @private\n     */\n    _executeCustomEventHandler: function(event) {\n        var $input = $(event.target);\n        var address = this._getCellAddress($input);\n\n        this.controller.executeCustomInputEventHandler(event, address);\n    },\n\n    /**\n     * Event handler for the 'focusin' event.\n     * @param {Event} event - DOM event object\n     * @private\n     */\n    _onFocusIn: function(event) {\n        var $target = $(event.target);\n        var address = this._getCellAddress($target);\n\n        this._executeCustomEventHandler(event);\n        this.trigger('focusIn', $target, address);\n        this.controller.startEditing(address);\n    },\n\n    /**\n     * Event handler for the 'focusout' event.\n     * @param {Event} event - DOM event object\n     * @private\n     */\n    _onFocusOut: function(event) {\n        var $target = $(event.target);\n        var address = this._getCellAddress($target);\n\n        this._executeCustomEventHandler(event);\n        this.trigger('focusOut', $target, address);\n        this.controller.finishEditing(address, false, $target.val());\n    },\n\n    /**\n     * Event handler for the 'keydown' event.\n     * @param  {KeyboardEvent} event - KeyboardEvent object\n     * @private\n     */\n    _onKeyDown: function(event) {\n        var keyCode = event.keyCode || event.which,\n            keyName = keyNameMap[keyCode],\n            action = this.keyDownActions[keyName],\n            $target = $(event.target),\n            param = {\n                $target: $target,\n                address: this._getCellAddress($target),\n                shiftKey: event.shiftKey,\n                value: $target.val()\n            };\n\n        this._executeCustomEventHandler(event);\n\n        if (action) {\n            action.call(this, param);\n            event.preventDefault();\n        }\n    },\n\n    /**\n     * Returns the value string of given data to display in the cell.\n     * @abstract\n     * @protected\n     */\n    _getDisplayValue: function() {\n        throw new Error('implement _getDisplayValue() method');\n    },\n\n    /**\n     * Generates an input HTML string from given data, and returns it.\n     * @abstract\n     * @protected\n     */\n    _generateInputHtml: function() {\n        throw new Error('implement _generateInputHtml() method');\n    },\n\n    /**\n     * Returns whether the cell has view mode.\n     * @param {Object} cellData - cell data\n     * @returns {Boolean}\n     * @private\n     */\n    _isUsingViewMode: function(cellData) {\n        return tui.util.pick(cellData, 'columnModel', 'editOption', 'useViewMode') !== false;\n    },\n\n    /**\n     * Generates a HTML string from given data, and returns it.\n     * @param {Object} cellData - cell data\n     * @returns {String}\n     * @implements {module:painter/input/base}\n     */\n    generateHtml: function(cellData) {\n        var result;\n\n        if (!_.isNull(cellData.convertedHTML)) {\n            result = cellData.convertedHTML;\n        } else if (!this._isUsingViewMode(cellData) || cellData.isEditing) {\n            result = this._generateInputHtml(cellData);\n        } else {\n            result = this._getDisplayValue(cellData);\n        }\n\n        return result;\n    },\n\n    /**\n     * Finds an element from the given parent element with 'this.selector', and moves focus to it.\n     * @param {jquery} $parent - parent element\n     */\n    focus: function($parent) {\n        var $input = $parent.find(this.selector);\n\n        if (!$input.is(':focus')) {\n            $input.eq(0).focus();\n        }\n    }\n});\n\n_.assign(InputPainter.prototype, Backbone.Events);\n\nmodule.exports = InputPainter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"