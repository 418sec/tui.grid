tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_stateLayer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Layer class that represents the state of rendering phase\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar View = require('../base/view');\nvar stateConst = require('../common/constMap').renderState;\nvar classNameConst = require('../common/classNameConst');\nvar TABLE_BORDER_WIDTH = require('../common/constMap').dimension.TABLE_BORDER_WIDTH;\n\nvar MESSAGE_LOADING = '요청을 처리 중입니다.';\nvar MESSAGE_EMPTY = '데이터가 존재하지 않습니다.';\n\n/**\n * Layer class that represents the state of rendering phase.\n * @module view/stateLayer\n * @extends module:base/view\n */\nvar StateLayer = View.extend(/**@lends module:view/stateLayer.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - Options\n     */\n    initialize: function(options) {\n        this.dimensionModel = options.dimensionModel;\n        this.renderModel = options.renderModel;\n\n        this.listenTo(this.dimensionModel, 'change', this._refreshLayout);\n        this.listenTo(this.renderModel, 'change:state', this.render);\n    },\n\n    className: classNameConst.LAYER_STATE,\n\n    template: _.template(\n        '&lt;div class=\"' + classNameConst.LAYER_STATE_CONTENT + '\">' +\n        '    &lt;p>&lt;%= text %>&lt;/p>' +\n        '    &lt;% if (isLoading) { %>' +\n        '    &lt;div class=\"' + classNameConst.LAYER_STATE_LOADING + '\">&lt;/div>' +\n        '    &lt;% } %>' +\n        '&lt;/div>'\n    ),\n\n    /**\n     * Render\n     * @returns {object} This object\n     */\n    render: function() {\n        var renderState = this.renderModel.get('state');\n\n        if (renderState === stateConst.DONE) {\n            this.$el.hide();\n        } else {\n            this._showLayer(renderState);\n        }\n\n        return this;\n    },\n\n    /**\n     * Shows the state layer.\n     * @param {string} renderState - Render state {@link module:common/constMap#renderState}\n     * @private\n     */\n    _showLayer: function(renderState) {\n        var layerHtml = this.template({\n            text: this._getMessage(renderState),\n            isLoading: (renderState === stateConst.LOADING)\n        });\n\n        this.$el.html(layerHtml).show();\n        this._refreshLayout();\n    },\n\n    /**\n     * Returns the message based on the renderState value\n     * @param  {string} renderState - Renderer.state value\n     * @returns {string} - Message\n     */\n    _getMessage: function(renderState) {\n        switch (renderState) {\n            case stateConst.LOADING:\n                return MESSAGE_LOADING;\n            case stateConst.EMPTY:\n                return (this.renderModel.get('emptyMessage') || MESSAGE_EMPTY);\n            default:\n                return null;\n        }\n    },\n\n    /**\n     * Sets the marginTop and height value.\n     * @private\n     */\n    _refreshLayout: function() {\n        var dimensionModel = this.dimensionModel;\n        var headerHeight = dimensionModel.get('headerHeight');\n        var bodyHeight = dimensionModel.get('bodyHeight');\n        var toolbarHeight = dimensionModel.get('toolbarHeight');\n        var scrollXHeight = dimensionModel.getScrollXHeight();\n        var scrollYWidth = dimensionModel.getScrollYWidth();\n\n        this.$el.css({\n            top: headerHeight + toolbarHeight - TABLE_BORDER_WIDTH,\n            height: bodyHeight - scrollXHeight - TABLE_BORDER_WIDTH,\n            left: 0,\n            right: scrollYWidth\n        });\n    }\n});\n\nStateLayer.MESSAGE_LOADING = MESSAGE_LOADING;\nStateLayer.MESSAGE_EMPTY = MESSAGE_EMPTY;\n\nmodule.exports = StateLayer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"