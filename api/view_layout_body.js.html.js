ne.util.defineNamespace("fedoc.content", {});
fedoc.content["view_layout_body.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Class for the body layout\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar View = require('../../base/view');\nvar SelectionLayer = require('../selectionLayer');\nvar BodyTableView = require('./bodyTable');\n\nvar HTML_CONTAINER = '&lt;div class=\"body_container\">&lt;/div>';\n\n/**\n * Class for the body layout\n * @module view/layout/body\n */\nvar Body = View.extend(/**@lends module:view/layout/body.prototype */{\n    /**\n     * @constructs\n     * @extends module:base/view\n     * @param {Object} options - Options\n     *      @param {String} [options.whichSide='R'] L or R (which side)\n     */\n    initialize: function(options) {\n        View.prototype.initialize.apply(this, arguments);\n        this.setOwnProperties({\n            // DIV for setting rendering position of entire child-nodes of $el.\n            $container: null,\n            whichSide: options &amp;&amp; options.whichSide || 'R'\n        });\n\n        this.listenTo(this.grid.dimensionModel, 'change:bodyHeight', this._onBodyHeightChange)\n            .listenTo(this.grid.dataModel, 'add remove reset', this._resetContainerHeight)\n            .listenTo(this.grid.renderModel, 'change:scrollTop', this._onScrollTopChange)\n            .listenTo(this.grid.renderModel, 'change:scrollLeft', this._onScrollLeftChange);\n    },\n\n    tagName: 'div',\n\n    className: 'data',\n\n    events: {\n        'scroll': '_onScroll',\n        'mousedown .body_container': '_onMouseDown'\n    },\n\n    /**\n     * DimensionModel 의 body Height 가 변경된 경우 element 의 height 를 조정한다.\n     * @param {Object} model 변경이 일어난 model 인스턴스\n     * @param {Number} value bodyHeight 값\n     * @private\n     */\n    _onBodyHeightChange: function(model, value) {\n        this.$el.css('height', value + 'px');\n    },\n\n    /**\n     * Resets the height of a container div.\n     */\n    _resetContainerHeight: function() {\n        this.$container.css({\n            height: this.grid.dimensionModel.get('totalRowHeight')\n        });\n    },\n\n    /**\n     * 스크롤 이벤트 핸들러\n     * @param {event} scrollEvent   스크롤 이벤트\n     * @private\n     */\n    _onScroll: function(scrollEvent) {\n        var attrs = {\n            scrollTop: scrollEvent.target.scrollTop\n        };\n\n        if (this.whichSide === 'R') {\n            attrs.scrollLeft = scrollEvent.target.scrollLeft;\n        }\n        this.grid.renderModel.set(attrs);\n    },\n\n    /**\n     * Render model 의 Scroll left 변경 이벤트 핸들러\n     * @param {object} model 변경이 일어난 모델 인스턴스\n     * @param {Number} value scrollLeft 값\n     * @private\n     */\n    _onScrollLeftChange: function(model, value) {\n        if (this.whichSide === 'R') {\n            this.el.scrollLeft = value;\n        }\n    },\n\n    /**\n     * Render model 의 Scroll top 변경 이벤트 핸들러\n     * @param {object} model 변경이 일어난 모델 인스턴스\n     * @param {Number} value scrollTop값\n     * @private\n     */\n    _onScrollTopChange: function(model, value) {\n        this.el.scrollTop = value;\n    },\n\n    /**\n     * mousedown 이벤트 핸들러\n     * @param {Event} mouseDownEvent 이벤트 객체\n     * @private\n     */\n    _onMouseDown: function(event) {\n        var $td = $(event.target).closest('td'),\n            $tr = $(event.target).closest('tr'),\n            columnName = $td.attr('columnName'),\n            rowKey = $tr.attr('key'),\n            grid = this.grid,\n            columnModel = grid.columnModel;\n\n        if (grid.option('selectType') === 'radio') {\n            grid.check(rowKey);\n        }\n\n        if (columnModel.isMetaColumn(columnName)) {\n            // meta column clicked\n        } else {\n            grid.focus(rowKey, columnName);\n            this._checkSelectionAction(event.pageX, event.pageY, event.shiftKey);\n        }\n    },\n\n    /**\n     * 마우스 down 이벤트가 발생하여 selection 을 시작할 때, selection 영역을 계산하기 위해 document 에 이벤트 핸들러를 추가한다.\n     * @param {Number} pageX    초기값으로 설정할 마우스 x좌표\n     * @param {Number} pageY    초기값으로 설정할 마우스 y 좌표\n     */\n    _attachDragEvents: function(pageX, pageY) {\n        this.setOwnProperties({\n            mouseDownX: pageX,\n            mouseDownY: pageY\n        });\n        this.grid.updateLayoutData();\n        $(document)\n            .on('mousemove', $.proxy(this._onMouseMove, this))\n            .on('mouseup', $.proxy(this._detachDragEvents, this))\n            .on('selectstart', $.proxy(this._onSelectStart, this));\n    },\n\n    /**\n     * 마우스 up 이벤트가 발생하여 selection 이 끝날 때, document 에 달린 이벤트 핸들러를 제거한다.\n     */\n    _detachDragEvents: function() {\n        this.grid.selectionModel.stopAutoScroll();\n        $(document)\n            .off('mousemove', $.proxy(this._onMouseMove, this))\n            .off('mouseup', $.proxy(this._detachDragEvents, this))\n            .off('selectstart', $.proxy(this._onSelectStart, this));\n    },\n\n    /**\n     * Event handler for 'mousemove' event during drag\n     * @param {MouseEvent} event - MouseEvent object\n     */\n    _onMouseMove: function(event) {\n        var selectionModel = this.grid.selectionModel,\n            pageX = event.pageX,\n            pageY = event.pageY;\n\n        if (selectionModel.hasSelection()) {\n            selectionModel.updateByMousePosition(pageX, pageY);\n        } else if (this._getMouseMoveDistance(pageX, pageY) > 10) {\n            selectionModel.startByMousePosition(this.mouseDownX, this.mouseDownY);\n            selectionModel.updateByMousePosition(pageX, pageY);\n        }\n    },\n\n    /**\n     * Returns the distance between 'mousedown' position and specified position.\n     * @param {number} pageX - X position relative to the document\n     * @param {number} pageY - Y position relative to the document\n     * @return {number} Distance\n     * @private\n     */\n    _getMouseMoveDistance: function(pageX, pageY) {\n        var dx = Math.abs(this.mouseDownX - pageX),\n            dy = Math.abs(this.mouseDownY - pageY);\n\n        return Math.round(Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)));\n    },\n\n    /**\n     * select start 이벤트를 방지한다.\n     * @param {event} selectStartEvent 이벤트 객체\n     * @returns {boolean} false\n     * @private\n     */\n    _onSelectStart: function(event) {\n        event.preventDefault();\n        return false;\n    },\n\n    /**\n     * Checks the state of selection model and event, and process actions related to selection.\n     * @param {number} pageX - X position relative to the document\n     * @param {number} pageY - Y position relative to the document\n     * @param {boolean} shiftKey - True if the shiftKey was down\n     */\n    _checkSelectionAction: function(pageX, pageY, shiftKey) {\n        var selectionModel = this.grid.selectionModel;\n\n        if (!selectionModel.isEnabled()) {\n            return;\n        }\n        if (shiftKey) {\n            selectionModel.updateByMousePosition(pageX, pageY);\n        } else {\n            selectionModel.end();\n        }\n        this._attachDragEvents(pageX, pageY);\n    },\n\n    /**\n     * rendering 한다.\n     * @return {View.Layout.Body}   자기 자신\n     */\n    render: function() {\n        var grid = this.grid,\n            whichSide = this.whichSide,\n            selectionLayer, bodyTableView;\n\n        this.destroyChildren();\n\n        if (!this.grid.option('scrollX')) {\n            this.$el.css('overflow-x', 'hidden');\n        }\n        if (!this.grid.option('scrollY') &amp;&amp; whichSide === 'R') {\n            this.$el.css('overflow-y', 'hidden');\n        }\n        this.$el.css('height', grid.dimensionModel.get('bodyHeight'));\n\n        this.$container = $(HTML_CONTAINER);\n        this.$el.append(this.$container);\n\n        bodyTableView = this.createView(BodyTableView, {\n            grid: grid,\n            whichSide: whichSide\n        });\n        selectionLayer = this.createView(SelectionLayer, {\n            grid: grid,\n            whichSide: whichSide\n        });\n\n        this.$container.append(\n            bodyTableView.render().el,\n            selectionLayer.render().el\n        );\n        return this;\n    }\n});\n\nmodule.exports = Body;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"