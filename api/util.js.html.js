ne.util.defineNamespace("fedoc.content", {});
fedoc.content["util.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n* @fileoverview 유틸리티 메서드 모음\n* @author NHN Ent. FE Development Team\n*/\n'use strict';\n\n/**\n* util 모듈\n* @module util\n*/\nvar util = {\n    uniqueId: 0,\n    /**\n     * HTML Attribute 설정 시 필요한 문자열을 가공한다.\n     * @memberof module:util\n     * @param {{key:value}} attributes  문자열로 가공할 attribute 데이터\n     * @return {string} html 마크업에 포함될 문자열\n     * @example\n     var str = util.getAttributesString({\n            'class': 'focused disabled',\n            'width': '100',\n            'height': '200'\n      });\n\n     =>\n     class=\"focused disabled\" width=\"100\" height=\"200\"\n     */\n    getAttributesString: function(attributes) {\n        var str = '';\n        _.each(attributes, function(value, key) {\n            str += ' ' + key + '=\"' + value + '\"';\n        }, this);\n        return str;\n    },\n\n    /**\n     * 템플릿데이터에 객체의 데이터를 삽입해 스트링을 리턴한다.\n     * 매핑데이터를 배열로 전달하면 갯수만큼 템플릿을 반복생성한다.\n     * @memberof module:util\n     * @param {string} template 템플릿 텍스트\n     * @param {object|object[]} mapper 템플릿과 합성될 데이터\n     * @return {Array} replaced array\n     */\n    template: function(template, mapper) {\n        var totalReplaced = [],\n            replaced;\n\n        if (!tui.util.isArray(mapper)) {\n            mapper = [mapper];\n        }\n\n        tui.util.forEach(mapper, function(mapdata) {\n            replaced = template.replace(/&lt;%=([^%]+)%>/g, function(matchedString, name) {\n                return mapdata[name] ? mapdata[name].toString() : '';\n            });\n\n            totalReplaced.push(replaced);\n        });\n\n        return totalReplaced;\n    },\n\n    /**\n     * 배열의 합을 반환한다.\n     * @memberof module:util\n     * @param {number[]} list   총 합을 구할 number 타입 배열\n     * @return {number} 합산한 결과값\n     */\n    sum: function(list) {\n        return _.reduce(list, function(memo, value) {\n            memo += value;\n            return memo;\n        }, 0);\n    },\n\n    /**\n     * 행 개수와 한 행당 높이를 인자로 받아 테이블 body 의 전체 높이를 구한다.\n     * @memberof module:util\n     * @param {number} rowCount  행 개수\n     * @param {number} rowHeight    한 행당 높이\n     * @return {number} 계산된 높이\n     */\n    getHeight: function(rowCount, rowHeight) {\n        return rowCount === 0 ? rowCount : rowCount * (rowHeight + 1) + 1;\n    },\n\n    /**\n     *Table 의 높이와 행당 높이를 인자로 받아, table 에서 보여줄 수 있는 행 개수를 반환한다.\n     * @memberof module:util\n     * @param {number} height 테이블 body 높이\n     * @param {number} rowHeight    한 행당 높이\n     * @return {number} 테이블 body 당 보여지는 행 개수\n     */\n    getDisplayRowCount: function(height, rowHeight) {\n        return Math.ceil((height - 1) / (rowHeight + 1));\n    },\n\n    /**\n     * Table 의 height 와 행 개수를 인자로 받아, 한 행당 높이를 구한다.\n     * @memberof module:util\n     * @param {number} rowCount  행 개수\n     * @param {number} height   테이블 body 높이\n     * @return {number} 한 행당 높이값\n     */\n    getRowHeight: function(rowCount, height) {\n        return rowCount === 0 ? 0 : Math.floor(((height - 1) / rowCount)) - 1;\n    },\n\n    /**\n     * target 과 dist 의 값을 비교하여 같은지 여부를 확인하는 메서드\n     * === 비교 연산자를 사용하므로, object 의 경우 1depth 까지만 지원함.\n     * @memberof module:util\n     * @param {*} target    동등 비교할 target\n     * @param {*} dist      동등 비교할 dist\n     * @return {boolean}    동일한지 여부\n     */\n    isEqual: function(target, dist) {\n        var isDiff,\n            compareObject = function(targetObj, distObj) {\n                var name,\n                    result = true;\n                /*\n                    빠른 loop 탈출을 위해 ne.forEach 대신 for in 구문을 사용한다.\n                    (추후 forEach 에 loop 탈출 기능이 추가되면 forEach 로 적용함.\n                */\n                for (name in targetObj) {\n                    if (targetObj[name] !== distObj[name]) {\n                        result = false;\n                        break;\n                    }\n                }\n                return result;\n            };\n        if (typeof target !== typeof dist) {\n            return false;\n        } else if (tui.util.isArray(target) &amp;&amp; target.length !== dist.length) {\n            return false;\n        } else if (typeof target === 'object') {\n            isDiff = !compareObject(target, dist) || !compareObject(dist, target);\n            return !isDiff;\n        } else if (target !== dist) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Returns whether the string blank.\n     * @memberof module:util\n     * @param {*} target - target object\n     * @return {boolean} True if target is undefined or null or ''\n     */\n    isBlank: function(target) {\n        if (tui.util.isString(target)) {\n            return !target.length;\n        }\n        return target === undefined || target === null;\n    },\n\n    /**\n     * Grid 에서 필요한 형태로 HTML tag 를 제거한다.\n     * @memberof module:util\n     * @param {string} htmlString   html 마크업 문자열\n     * @return {String} HTML tag 에 해당하는 부분을 제거한 문자열\n     */\n    stripTags: function(htmlString) {\n        var matchResult;\n        htmlString = htmlString.replace(/[\\n\\r\\t]/g, '');\n        if (tui.util.hasEncodableString(htmlString)) {\n            if (/&lt;img/i.test(htmlString)) {\n                matchResult = htmlString.match(/&lt;img[^>]*\\ssrc=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/i);\n                htmlString = matchResult ? matchResult[1] : '';\n            } else {\n                htmlString = htmlString.replace(/&lt;button.*?&lt;\\/button>/gi, '');\n            }\n            htmlString = $.trim(tui.util.decodeHTMLEntity(htmlString.replace(/&lt;\\/?(?:h[1-5]|[a-z]+(?:\\:[a-z]+)?)[^>]*>/ig, '')));\n        }\n        return htmlString;\n    },\n\n    /**\n     * Create unique key\n     * @memberof module:util\n     * @return {number} unique key 를 반환한다.\n     */\n    getUniqueKey: function() {\n        this.uniqueId += 1;\n        return this.uniqueId;\n    },\n\n    /**\n     * object 를 query string 으로 변경한다.\n     * @memberof module:util\n     * @param {object} dataObj  쿼리 문자열으로 반환할 객체\n     * @return {string} 변환된 쿼리 문자열\n     */\n    toQueryString: function(dataObj) {\n        var queryList = [];\n\n        tui.util.forEach(dataObj, function(value, name) {\n            if (typeof value !== 'string' &amp;&amp; typeof value !== 'number') {\n                value = $.toJSON(value);\n            }\n            value = encodeURIComponent(value);\n            queryList.push(name + '=' + value);\n        }, this);\n        return queryList.join('&amp;');\n    },\n\n    /**\n     * queryString 을 object 형태로 변형한다.\n     * @memberof module:util\n     * @param {String} queryString 쿼리 문자열\n     * @return {Object} 변환한 Object\n     */\n    toQueryObject: function(queryString) {\n        var queryList = queryString.split('&amp;'),\n            obj = {};\n\n        tui.util.forEach(queryList, function(query) {\n            var tmp = query.split('='),\n                key,\n                value;\n            key = tmp[0];\n            value = decodeURIComponent(tmp[1]);\n            try {\n                value = $.parseJSON(value);\n            } catch(e) {} // eslint-disable-line\n            obj[key] = value;\n        }, this);\n\n        return obj;\n    },\n\n    /**\n     * type 인자에 맞게 value type 을 convert 한다.\n     * Data.Row 의 List 형태에서 editOption.list 에서 검색을 위해,\n     * value type 해당 type 에 맞게 변환한다.\n     * @memberof module:util\n     * @param {*} value 컨버팅할 value\n     * @param {String} type 컨버팅 될 타입\n     * @return {*}  타입 컨버팅된 value\n     */\n    convertValueType: function(value, type) {\n        if (type === 'string') {\n            return value.toString();\n        } else if (type === 'number') {\n            return +value;\n        }\n        return value;\n    },\n\n    /**\n     * Capitalize first character of the target string.\n     * @param  {string} string Target string\n     * @return {string} Converted new string\n     */\n    toUpperCaseFirstLetter: function(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n\n    /**\n     * Returns whether the browser is IE7\n     * @return {boolean} True if the browser is IE7\n     */\n    isBrowserIE7: function() {\n        var browser = tui.util.browser;\n        return browser.msie &amp;&amp; browser.version === 7;\n    },\n\n    /**\n     * form 요소 설정\n     * @memberof module:util\n     */\n    form: {\n        /**\n         * form 의 input 요소 값을 설정하기 위한 객체\n         * @alias form.setInput\n         * @memberof module:util\n         */\n        setInput: {\n            /**\n             * 배열의 값들을 전부 String 타입으로 변환한다.\n             * @memberof module:util\n             * @private\n             * @alias form.setInput['_changeToStringInArray']\n             * @param {Array}  arr 변환할 배열\n             * @return {Array} 변환된 배열 결과 값\n             */\n            '_changeToStringInArray': function(arr) {\n                tui.util.forEach(arr, function(value, i) {\n                    arr[i] = String(value);\n                }, this);\n                return arr;\n            },\n\n            /**\n             * radio type 의 input 요소의 값을 설정한다.\n             * @memberof module:util\n             * @alias form.setInput['radio']\n             * @param {HTMLElement} targetElement - Target element\n             * @param {String} formValue - Form value\n             */\n            'radio': function(targetElement, formValue) {\n                targetElement.checked = (targetElement.value === formValue);\n            },\n\n            /**\n             * radio type 의 input 요소의 값을 설정한다.\n             * @memberof module:util\n             * @alias form.setInput.checkbox\n             * @param {HTMLElement} targetElement - Target element\n             * @param {String} formValue - Form value\n             */\n            'checkbox': function(targetElement, formValue) {\n                if (tui.util.isArray(formValue)) {\n                    targetElement.checked = $.inArray(targetElement.value, this._changeToStringInArray(formValue)) !== -1;\n                } else {\n                    targetElement.checked = (targetElement.value === formValue);\n                }\n            },\n\n            /**\n             * select-one type 의 input 요소의 값을 설정한다.\n             * @memberof module:util\n             * @alias form.setInput['select-one']\n             * @param {HTMLElement} targetElement - Target element\n             * @param {String} formValue - Form value\n             */\n            'select-one': function(targetElement, formValue) {\n                var options = tui.util.toArray(targetElement.options),\n                    index = -1;\n\n                tui.util.forEach(options, function(targetOption, i) {\n                    if (targetOption.value === formValue || targetOption.text === formValue) {\n                        index = i;\n                        return false;\n                    }\n                }, this);\n\n                targetElement.selectedIndex = index;\n            },\n\n            /**\n             * select-multiple type 의 input 요소의 값을 설정한다.\n             * @memberof module:util\n             * @alias form.setinput['select-multiple']\n             * @param {HTMLElement} targetElement - Target element\n             * @param {String} formValue - Form value\n             */\n            'select-multiple': function(targetElement, formValue) {\n                var options = tui.util.toArray(targetElement.options);\n\n                if (tui.util.isArray(formValue)) {\n                    formValue = this._changeToStringInArray(formValue);\n                    tui.util.forEach(options, function(targetOption) {\n                        targetOption.selected = $.inArray(targetOption.value, formValue) !== -1 ||\n                        $.inArray(targetOption.text, formValue) !== -1;\n                    }, this);\n                } else {\n                    this['select-one'].apply(this, arguments);\n                }\n            },\n\n            /**\n             * input 요소의 값을 설정하는 default 로직\n             * @memberof module:util\n             * @alias form.setinput['defaultAction']\n             * @param {HTMLElement} targetElement - Target element\n             * @param {String} formValue - Form value\n             */\n            'defaultAction': function(targetElement, formValue) {\n                targetElement.value = formValue;\n            }\n        },\n\n        /**\n         * $form 에 정의된 인풋 엘리먼트들의 값을 모아서 DataObject 로 구성하여 반환한다.\n         * @memberof module:util\n         * @alias form.getFormData\n         * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n         * @return {object} form 내의 데이터들을 key:value 형태의 DataObject 로 반환한다.\n         **/\n        getFormData: function($form) {\n            var result = {},\n                valueList = $form.serializeArray();\n\n            tui.util.forEach(valueList, function(obj) {\n                var value = obj.value,\n                    name = obj.name;\n                if (tui.util.isExisty(result[name])) {\n                    if (!result[name].push) {\n                        result[name] = [result[name]];\n                    }\n                    result[name].push(value || '');\n                } else {\n                    result[name] = value || '';\n                }\n            }, this);\n\n            return result;\n        },\n\n        /**\n         * 폼 안에 있는 모든 인풋 엘리먼트를 배열로 리턴하거나, elementName에 해당하는 인풋 엘리먼트를 리턴한다.\n         * @memberof module:util\n         * @alias form.getFormElement\n         * @param {jquery} $form jQuery()로 감싼 폼엘리먼트\n         * @param {String} [elementName] 특정 이름의 인풋 엘리먼트만 가져오고 싶은 경우 전달하며, 생략할 경우 모든 인풋 엘리먼트를 배열 형태로 리턴한다.\n         * @return {jQuery}  jQuery 로 감싼 엘리먼트를 반환한다.\n         */\n        getFormElement: function($form, elementName) {\n            var formElement;\n            if ($form &amp;&amp; $form.length) {\n                if (elementName) {\n                    formElement = $form.prop('elements')[elementName + ''];\n                } else {\n                    formElement = $form.prop('elements');\n                }\n            }\n            return $(formElement);\n        },\n\n        /**\n         * 파라미터로 받은 데이터 객체를 이용하여 폼내에 해당하는 input 요소들의 값을 설정한다.\n         * @memberof module:util\n         * @alias form.setFormData\n         * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n         * @param {Object} formData 폼에 설정할 폼 데이터 객체\n         **/\n        setFormData: function($form, formData) {\n            tui.util.forEachOwnProperties(formData, function(value, property) {\n                this.setFormElementValue($form, property, value);\n            }, this);\n        },\n\n        /**\n         * elementName에 해당하는 인풋 엘리먼트에 formValue 값을 설정한다.\n         * -인풋 엘리먼트의 이름을 기준으로 하기에 라디오나 체크박스 엘리먼트에 대해서도 쉽게 값을 설정할 수 있다.\n         * @memberof module:util\n         * @alias form.setFormElementValue\n         * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n         * @param {String}  elementName 값을 설정할 인풋 엘리먼트의 이름\n         * @param {String|Array} formValue 인풋 엘리먼트에 설정할 값으로 체크박스나 멀티플 셀렉트박스인 경우에는 배열로 설정할 수 있다.\n         **/\n        setFormElementValue: function($form, elementName, formValue) {\n            var type,\n                elementList = this.getFormElement($form, elementName);\n\n            if (!elementList) {\n                return;\n            }\n            if (!tui.util.isArray(formValue)) {\n                formValue = String(formValue);\n            }\n            elementList = tui.util.isHTMLTag(elementList) ? [elementList] : elementList;\n            elementList = tui.util.toArray(elementList);\n            tui.util.forEach(elementList, function(targetElement) {\n                type = this.setInput[targetElement.type] ? targetElement.type : 'defaultAction';\n                this.setInput[type](targetElement, formValue);\n            }, this);\n        },\n\n        /**\n         * input 타입의 엘리먼트의 커서를 가장 끝으로 이동한다.\n         * @memberof module:util\n         * @alias form.setCursorToEnd\n         * @param {HTMLElement} target HTML input 엘리먼트\n         */\n        setCursorToEnd: function(target) {\n            var length = target.value.length,\n                range;\n\n            target.focus();\n            if (target.setSelectionRange) {\n                try {\n                    target.setSelectionRange(length, length);\n                } catch(e) {\n                    // to prevent unspecified error in IE (occurs when running test)\n                }\n            } else if (target.createTextRange) {\n                range = target.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', length);\n                range.moveStart('character', length);\n                try {\n                     range.select();\n                } catch(e) {\n                     // to prevent unspecified error in IE (occurs when running test)\n                }\n            }\n        }\n    }\n};\n\nmodule.exports = util;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"