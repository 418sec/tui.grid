tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_layout_footer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Footer\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\nvar View = require('../../base/view');\nvar classNameConst = require('../../common/classNameConst');\nvar constMap = require('../../common/constMap');\n\nvar ATTR_COLUMN_NAME = constMap.attrName.COLUMN_NAME;\n\nvar Footer = View.extend(/**@lends module:view/layout/footer.prototype */{\n    /**\n     * Initialize\n     * @param {object} options - options\n     */\n    initialize: function(options) {\n        /**\n         * Store template functions of each column\n         * K: column name\n         * V: template function\n         * @example\n         * {\n         *     c1: function() {},\n         *     c2: function() {}\n         * }\n         * @type {Object}\n         */\n        this.columnTemplateMap = options.columnTemplateMap || {};\n\n        /**\n         * 'L': Left, 'R': Right\n         * @type {string}\n         */\n        this.whichSide = options.whichSide;\n\n        // models\n        this.columnModel = options.columnModel;\n        this.dimensionModel = options.dimensionModel;\n        this.renderModel = options.renderModel;\n        this.summaryModel = options.summaryModel;\n\n        // events\n        this.listenTo(this.renderModel, 'change:scrollLeft', this._onChangeScrollLeft);\n        this.listenTo(this.columnModel, 'setFooterContent', this._setcolumnContent);\n        if (this.summaryModel) {\n            this.listenTo(this.summaryModel, 'change', this._onChangeSummaryValue);\n        }\n    },\n\n    className: classNameConst.FOOT_AREA,\n\n    events: {\n        scroll: '_onScrollView'\n    },\n\n    /**\n     * template\n     */\n    template: _.template(\n        '&lt;table class=\"&lt;%=className%>\" style=\"height:&lt;%=height%>px\">' +\n            '&lt;tbody>&lt;%=tbody%>&lt;/tbody>' +\n        '&lt;/table>'\n    ),\n\n    /**\n     * Template for &lt;th>\n     */\n    templateHeader: _.template(\n        '&lt;th &lt;%=attrColumnName%>=\"&lt;%=columnName%>\" ' +\n            'class=\"&lt;%=className%>\" ' +\n            'style=\"width:&lt;%=width%>px\"' +\n        '>' +\n        '&lt;%=value%>' +\n        '&lt;/th>'\n    ),\n\n    /**\n     * Event handler for 'scroll' event\n     * @param {UIEvent} event - scroll event\n     * @private\n     */\n    _onScrollView: function(event) {\n        if (this.whichSide === 'R') {\n            this.renderModel.set('scrollLeft', event.target.scrollLeft);\n        }\n    },\n\n    /**\n     * Sync scroll-left position with the value of body\n     * @param {Object} model - render model\n     * @param {Number} value - scrollLeft value\n     * @private\n     */\n    _onChangeScrollLeft: function(model, value) {\n        if (this.whichSide === 'R') {\n            this.el.scrollLeft = value;\n        }\n    },\n\n    /**\n     * Sets the HTML string of &lt;th> of given column\n     * @param {string} columnName - column name\n     * @param {string} contents - HTML string\n     * @private\n     */\n    _setcolumnContent: function(columnName, contents) {\n        var $th = this.$el.find('th[' + ATTR_COLUMN_NAME + '=\"' + columnName + '\"]');\n\n        $th.html(contents);\n    },\n\n    /**\n     * Refresh &lt;th> tag whenever summary value is changed.\n     * @param {string} columnName - column name\n     * @param {object} valueMap - value map\n     * @private\n     */\n    _onChangeSummaryValue: function(columnName, valueMap) {\n        var contents = this._generateValueHTML(columnName, valueMap);\n\n        this._setcolumnContent(columnName, contents);\n    },\n\n    /**\n     * Generates a HTML string of column summary value and returns it.\n     * @param {object} columnName - column name\n     * @param {object} valueMap - value map\n     * @returns {string} HTML string\n     * @private\n     */\n    _generateValueHTML: function(columnName, valueMap) {\n        var template = this.columnTemplateMap[columnName];\n        var html = '';\n\n        if (_.isFunction(template)) {\n            html = template(valueMap);\n        }\n\n        return html;\n    },\n\n    /**\n     * Generates a HTML string of &lt;tbody> and returns it\n     * @returns {string} - HTML String\n     * @private\n     */\n    _generateTbodyHTML: function() {\n        var summaryModel = this.summaryModel;\n        var columnModelList = this.columnModel.getVisibleColumnModelList(this.whichSide, true);\n        var columnWidthList = this.dimensionModel.getColumnWidthList(this.whichSide);\n\n        return _.reduce(columnModelList, function(memo, column, index) {\n            var columnName = column.columnName;\n            var valueMap;\n\n            if (summaryModel) {\n                valueMap = summaryModel.getValue(column.columnName);\n            }\n\n            return memo + this.templateHeader({\n                attrColumnName: ATTR_COLUMN_NAME,\n                columnName: columnName,\n                className: classNameConst.CELL_HEAD + ' ' + classNameConst.CELL,\n                width: columnWidthList[index],\n                value: this._generateValueHTML(columnName, valueMap)\n            });\n        }, '', this);\n    },\n\n    /**\n     * Render\n     * @returns {object}\n     */\n    render: function() {\n        var footerHeight = this.dimensionModel.get('footerHeight');\n\n        if (footerHeight) {\n            this.$el.html(this.template({\n                className: classNameConst.TABLE,\n                height: footerHeight,\n                tbody: this._generateTbodyHTML()\n            }));\n        }\n\n        return this;\n    }\n});\n\nmodule.exports = Footer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"