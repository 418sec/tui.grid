tui.util.defineNamespace("fedoc.content", {});
fedoc.content["common_util.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n* @fileoverview 유틸리티 메서드 모음\n* @author NHN Ent. FE Development Team\n*/\n'use strict';\n\nvar CELL_BORDER_WIDTH = require('./constMap').dimension.CELL_BORDER_WIDTH;\n\n/**\n* util 모듈\n* @module util\n*/\nvar util = {\n    uniqueId: 0,\n    /**\n     * HTML Attribute 설정 시 필요한 문자열을 가공한다.\n     * @memberof module:util\n     * @param {{key:value}} attributes  문자열로 가공할 attribute 데이터\n     * @returns {string} html 마크업에 포함될 문자열\n     * @example\n     var str = util.getAttributesString({\n            'class': 'focused disabled',\n            'width': '100',\n            'height': '200'\n      });\n\n     =>\n     class=\"focused disabled\" width=\"100\" height=\"200\"\n     */\n    getAttributesString: function(attributes) {\n        var str = '';\n        _.each(attributes, function(value, key) {\n            str += ' ' + key + '=\"' + value + '\"';\n        }, this);\n        return str;\n    },\n\n    /**\n     * 배열의 합을 반환한다.\n     * @memberof module:util\n     * @param {number[]} list   총 합을 구할 number 타입 배열\n     * @returns {number} 합산한 결과값\n     */\n    sum: function(list) {\n        return _.reduce(list, function(memo, value) {\n            memo += value;\n            return memo;\n        }, 0);\n    },\n\n    /**\n     * Returns the minimum value and the maximum value of the values in array.\n     * @param {Array} arr - Target array\n     * @returns {{min: number, max: number}} Min and Max\n     * @see {@link http://jsperf.com/getminmax}\n     */\n    getMinMax: function(arr) {\n        return {\n            min: Math.min.apply(null, arr),\n            max: Math.max.apply(null, arr)\n        };\n    },\n\n    /**\n     * Returns the table height including height of rows and borders.\n     * @memberof module:util\n     * @param {number} rowCount - row count\n     * @param {number} rowHeight - row height\n     * @returns {number}\n     */\n    getHeight: function(rowCount, rowHeight) {\n        return rowCount === 0 ? rowCount : rowCount * (rowHeight + CELL_BORDER_WIDTH);\n    },\n\n    /**\n     * Returns the total number of rows by using the table height and row height.\n     * @memberof module:util\n     * @param {number} tableHeight - table height\n     * @param {number} rowHeight - individual row height\n     * @returns {number}\n     */\n    getDisplayRowCount: function(tableHeight, rowHeight) {\n        return Math.ceil(tableHeight / (rowHeight + CELL_BORDER_WIDTH));\n    },\n\n    /**\n     * Returns the individual height of a row bsaed on the total number of rows and table height.\n     * @memberof module:util\n     * @param {number} rowCount - row count\n     * @param {number} tableHeight - table height\n     * @returns {number} 한 행당 높이값\n     */\n    getRowHeight: function(rowCount, tableHeight) {\n        return rowCount === 0 ? 0 : Math.floor(((tableHeight - CELL_BORDER_WIDTH) / rowCount));\n    },\n\n    /**\n     * Returns whether the column of a given name is meta-column.\n     * @param {String} columnName - column name\n     * @returns {Boolean}\n     */\n    isMetaColumn: function(columnName) {\n        return _.contains(['_button', '_number'], columnName);\n    },\n\n    /**\n     * target 과 dist 의 값을 비교하여 같은지 여부를 확인하는 메서드\n     * === 비교 연산자를 사용하므로, object 의 경우 1depth 까지만 지원함.\n     * @memberof module:util\n     * @param {*} target    동등 비교할 target\n     * @param {*} dist      동등 비교할 dist\n     * @returns {boolean}    동일한지 여부\n     */\n    isEqual: function(target, dist) {\n        var isDiff,\n            compareObject = function(targetObj, distObj) {\n                var result = false;\n\n                tui.util.forEach(targetObj, function(item, key) {\n                    result = (item === distObj[key]);\n                    return result;\n                });\n                return result;\n            };\n\n        if (typeof target !== typeof dist) {\n            return false;\n        } else if (_.isArray(target) &amp;&amp; target.length !== dist.length) {\n            return false;\n        } else if (_.isObject(target)) {\n            isDiff = !compareObject(target, dist) || !compareObject(dist, target);\n            return !isDiff;\n        } else if (target !== dist) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Returns whether the string blank.\n     * @memberof module:util\n     * @param {*} target - target object\n     * @returns {boolean} True if target is undefined or null or ''\n     */\n    isBlank: function(target) {\n        if (_.isString(target)) {\n            return !target.length;\n        }\n        return _.isUndefined(target) || _.isNull(target);\n    },\n\n    /**\n     * Grid 에서 필요한 형태로 HTML tag 를 제거한다.\n     * @memberof module:util\n     * @param {string} htmlString   html 마크업 문자열\n     * @returns {String} HTML tag 에 해당하는 부분을 제거한 문자열\n     */\n    stripTags: function(htmlString) {\n        var matchResult;\n        htmlString = htmlString.replace(/[\\n\\r\\t]/g, '');\n        if (tui.util.hasEncodableString(htmlString)) {\n            if (/&lt;img/i.test(htmlString)) {\n                matchResult = htmlString.match(/&lt;img[^>]*\\ssrc=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/i);\n                htmlString = matchResult ? matchResult[1] : '';\n            } else {\n                htmlString = htmlString.replace(/&lt;button.*?&lt;\\/button>/gi, '');\n            }\n            htmlString = $.trim(tui.util.decodeHTMLEntity(\n                htmlString.replace(/&lt;\\/?(?:h[1-5]|[a-z]+(?:\\:[a-z]+)?)[^>]*>/ig, '')\n            ));\n        }\n        return htmlString;\n    },\n\n    /**\n     * Converts the given value to String and returns it.\n     * If the value is undefined or null, returns the empty string.\n     * @param {*} value - value\n     * @returns {String}\n     */\n    toString: function(value) {\n        if (_.isUndefined(value) || _.isNull(value)) {\n            return '';\n        }\n        return String(value);\n    },\n\n    /**\n     * Create unique key\n     * @memberof module:util\n     * @returns {number} unique key 를 반환한다.\n     */\n    getUniqueKey: function() {\n        this.uniqueId += 1;\n        return this.uniqueId;\n    },\n\n    /**\n     * object 를 query string 으로 변경한다.\n     * @memberof module:util\n     * @param {object} dataObj  쿼리 문자열으로 반환할 객체\n     * @returns {string} 변환된 쿼리 문자열\n     */\n    toQueryString: function(dataObj) {\n        var queryList = [];\n\n        _.each(dataObj, function(value, name) {\n            if (!_.isString(value) &amp;&amp; !_.isNumber(value)) {\n                value = $.toJSON(value);\n            }\n            value = encodeURIComponent(value);\n            if (value) {\n                queryList.push(name + '=' + value);\n            }\n        });\n\n        return queryList.join('&amp;');\n    },\n\n    /**\n     * queryString 을 object 형태로 변형한다.\n     * @memberof module:util\n     * @param {String} queryString 쿼리 문자열\n     * @returns {Object} 변환한 Object\n     */\n    toQueryObject: function(queryString) {\n        var queryList = queryString.split('&amp;'),\n            obj = {};\n\n        _.each(queryList, function(query) {\n            var tmp = query.split('='),\n                key, value;\n\n            key = tmp[0];\n            value = decodeURIComponent(tmp[1]);\n            try {\n                value = $.parseJSON(value);\n            } catch(e) {} // eslint-disable-line\n\n            if (!_.isNull(value)) {\n                obj[key] = value;\n            }\n        });\n\n        return obj;\n    },\n\n    /**\n     * type 인자에 맞게 value type 을 convert 한다.\n     * Data.Row 의 List 형태에서 editOption.list 에서 검색을 위해,\n     * value type 해당 type 에 맞게 변환한다.\n     * @memberof module:util\n     * @param {*} value 컨버팅할 value\n     * @param {String} type 컨버팅 될 타입\n     * @returns {*}  타입 컨버팅된 value\n     */\n    convertValueType: function(value, type) {\n        if (type === 'string') {\n            return String(value);\n        } else if (type === 'number') {\n            return Number(value);\n        } else if (type === 'boolean') {\n            return Boolean(value);\n        }\n        return value;\n    },\n\n    /**\n     * Capitalize first character of the target string.\n     * @param  {string} string Target string\n     * @returns {string} Converted new string\n     */\n    toUpperCaseFirstLetter: function(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n\n    /**\n     * Returns a number whose value is limited to the given range.\n     * @param {Number} value - A number to force within given min-max range\n     * @param {Number} min - The lower boundary of the output range\n     * @param {Number} max - The upper boundary of the output range\n     * @returns {number} A number in the range [min, max]\n     * @Example\n     *      // limit the output of this computation to between 0 and 255\n     *      value = clamp(value, 0, 255);\n     */\n    clamp: function(value, min, max) {\n        var temp;\n        if (min > max) { // swap\n            temp = min;\n            min = max;\n            max = temp;\n        }\n        return Math.max(min, Math.min(value, max));\n    },\n\n    /**\n     * Returns whether the browser is IE7\n     * @returns {boolean} True if the browser is IE7\n     */\n    isBrowserIE7: function() {\n        var browser = tui.util.browser;\n        return browser.msie &amp;&amp; browser.version === 7; // eslint-disable-line no-magic-numbers\n    },\n\n    /**\n     * create style element and append it into the head element.\n     * @param {String} id - element id\n     * @param {String} cssString - css string\n     */\n    appendStyleElement: function(id, cssString) {\n        var style = document.createElement('style');\n\n        style.type = 'text/css';\n        style.id = id;\n\n        if (style.styleSheet) {\n            style.styleSheet.cssText = cssString;\n        } else {\n            style.appendChild(document.createTextNode(cssString));\n        }\n\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n};\n\nmodule.exports = util;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"