ne.util.defineNamespace("fedoc.content", {});
fedoc.content["view_layout_header.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Header 관련\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar View = require('../../base/view');\nvar util = require('../../util');\nvar ResizeHandler = require('./resizeHandler');\n\n/**\n * Header 레이아웃 View\n * @module view/layout/header\n */\nvar Header = View.extend(/**@lends module:view/layout/header.prototype */{\n    /**\n     * @constructs\n     * @extends module:base/view \n     * @param {Object} options 옵션\n     *      @param {String} [options.whichSide='R']  어느 영역의 header 인지 여부.\n     */\n    initialize: function(options) {\n        View.prototype.initialize.apply(this, arguments);\n        this.setOwnProperties({\n            timeoutForAllChecked: 0,\n            whichSide: options &amp;&amp; options.whichSide || 'R'\n        });\n        this.listenTo(this.grid.renderModel, 'change:scrollLeft', this._onScrollLeftChange, this)\n            .listenTo(this.grid.dimensionModel, 'columnWidthChanged', this._onColumnWidthChanged, this)\n            .listenTo(this.grid.dataModel, 'change:_button', this._onCheckCountChange, this)\n            .listenTo(this.grid.dataModel, 'sortChanged', this._updateBtnSortState, this);\n    },\n\n    tagName: 'div',\n\n    className: 'header',\n\n    events: {\n        click: '_onClick'\n    },\n\n    /**\n     * 전체 template\n     */\n    template: _.template('' +\n    '    &lt;table width=\"100%\" border=\"0\" cellspacing=\"1\" cellpadding=\"0\" bgcolor=\"#EFEFEF\">' +\n    '        &lt;colgroup>&lt;%=colGroup%>&lt;/colgroup>' +\n    '        &lt;tbody>&lt;%=tBody%>&lt;/tbody>' +\n    '    &lt;/table>'),\n    /**\n     * &lt;th> 템플릿\n     */\n    templateHeader: _.template('' +\n    '&lt;th columnname=\"&lt;%=columnName%>\" ' +\n    'height=\"&lt;%=height%>\" ' +\n    '&lt;%if(colspan > 0) {%>' +\n    'colspan=&lt;%=colspan%> ' +\n    '&lt;%}%>' +\n    '&lt;%if(rowspan > 0) {%>' +\n    'rowspan=&lt;%=rowspan%> ' +\n    '&lt;%}%>' +\n    '>&lt;%=title%>&lt;%=btnSort%>&lt;/th>' +\n    ''),\n    /**\n     * &lt;col> 템플릿\n     */\n    templateCol: _.template('' +\n    '&lt;col ' +\n    'columnname=\"&lt;%=columnName%>\" ' +\n    'style=\"width:&lt;%=width%>px\">' +\n    ''),\n\n    /**\n     * 정렬 버튼을 위한 HTML 마크업\n     */\n    markupBtnSort: '&lt;a class=\"btn_sorting\">&lt;/a>',\n\n    /**\n     * col group 마크업을 생성한다.\n     *\n     * @return {string} &lt;colgroup>에 들어갈 html 마크업 스트링\n     * @private\n     */\n    _getColGroupMarkup: function() {\n        var columnData = this._getColumnData(),\n            columnWidthList = columnData.widthList,\n            columnModelList = columnData.modelList,\n            htmlList = [];\n\n        _.each(columnWidthList, function(width, index) {\n            htmlList.push(this.templateCol({\n                columnName: columnModelList[index]['columnName'],\n                width: width\n            }));\n        }, this);\n        return htmlList.join('');\n    },\n    /**\n     * 그리드의 checkCount 가 변경되었을 때 수행하는 헨들러\n     * @private\n     */\n    _onCheckCountChange: function() {\n        if (this.grid.option('selectType') === 'checkbox') {\n            clearTimeout(this.timeoutForAllChecked);\n            this.timeoutForAllChecked = setTimeout($.proxy(this._syncCheckState, this), 10);\n        }\n    },\n    /**\n     * selectType 이 checkbox 일 때 랜더링 되는 header checkbox 엘리먼트를 반환한다.\n     * @return {jQuery} _butoon 컬럼 헤더의 checkbox input 엘리먼트\n     * @private\n     */\n    _getHeaderMainCheckbox: function() {\n        return this.$el.find('th[columnname=\"_button\"] input');\n    },\n    /**\n     * header 영역의 input 상태를 실제 checked 된 count 에 맞추어 반영한다.\n     * @private\n     */\n    _syncCheckState: function() {\n        var $input, enableCount, checkedCount;\n\n        if (this.grid.option('selectType') !== 'checkbox') {\n            return;\n        }\n\n        $input = this._getHeaderMainCheckbox();\n        if (!$input.length) {\n            return;\n        }\n\n        enableCount = 0;\n        checkedCount = this.grid.dataModel.getRowList(true).length;\n        this.grid.dataModel.forEach(function(row) {\n            var cellState = row.getCellState('_button');\n            if (!cellState.isDisabled &amp;&amp; cellState.isEditable) {\n                enableCount += 1;\n            }\n        }, this);\n        $input.prop('checked', enableCount === checkedCount);\n    },\n\n    /**\n     * column width 변경시 col 엘리먼트들을 조작하기 위한 헨들러\n     * @private\n     */\n    _onColumnWidthChanged: function() {\n        var columnData = this._getColumnData(),\n            columnWidthList = columnData.widthList,\n            $colList = this.$el.find('col');\n\n        _.each(columnWidthList, function(columnWidth, index) {\n            $colList.eq(index).css('width', columnWidth + 'px');\n        });\n    },\n    /**\n     * scroll left 값이 변경되었을 때 header 싱크를 맞추는 이벤트 핸들러\n     * @param {Object} model    변경이 발생한 model 인스턴스\n     * @param {Number} value    scrollLeft 값\n     * @private\n     */\n    /* istanbul ignore next: scrollLeft 를 확인할 수 없음 */\n    _onScrollLeftChange: function(model, value) {\n        if (this.whichSide === 'R') {\n            this.el.scrollLeft = value;\n        }\n    },\n    /**\n     * 클릭 이벤트 핸들러\n     * @param {Event} clickEvent    클릭이벤트\n     * @private\n     */\n    _onClick: function(clickEvent) {\n        var $target = $(clickEvent.target),\n            columnName = $target.closest('th').attr('columnname');\n\n        /* istanbul ignore else */\n        if (columnName === '_button' &amp;&amp; $target.is('input')) {\n            if ($target.prop('checked')) {\n                this.grid.checkAll();\n            } else {\n                this.grid.uncheckAll();\n            }\n        } else if ($target.is('a.btn_sorting')) {\n            this.grid.sort(columnName);\n        }\n    },\n    /**\n     * 정렬 버튼의 상태를 변경한다.\n     * @private\n     * @param {object} sortOptions 정렬 옵션\n     * @param {string} sortOptions.columnName 정렬할 컬럼명\n     * @param {boolean} sortOptions.isAscending 오름차순 여부\n     */\n    _updateBtnSortState: function(sortOptions) {\n        if (this._$currentSortBtn) {\n            this._$currentSortBtn.removeClass('sorting_down sorting_up');\n        }\n        this._$currentSortBtn = this.$el.find('th[columnname=' + sortOptions.columnName + '] a.btn_sorting');\n        this._$currentSortBtn.addClass(sortOptions.isAscending ? 'sorting_up' : 'sorting_down');\n    },\n\n    /**\n     * 랜더링\n     * @return {View.Layout.Header} this\n     */\n    render: function() {\n        var resizeHandler;\n\n        this.destroyChildren();\n\n        resizeHandler = this.createView(ResizeHandler, {\n            whichSide: this.whichSide,\n            grid: this.grid\n        });\n        if (!this.grid.option('scrollX')) {\n            this.$el.css('overflow-x', 'hidden');\n        }\n\n        if (!this.grid.option('scrollY')) {\n            this.$el.css('overflow-y', 'hidden');\n        }\n\n        this.$el.css({\n            height: this.grid.dimensionModel.get('headerHeight')\n        }).html(this.template({\n            colGroup: this._getColGroupMarkup(),\n            tBody: this._getTableBodyMarkup()\n        }));\n\n        this.$el.append(resizeHandler.render().el);\n        return this;\n    },\n\n    /**\n     * 컬럼 정보를 반환한다.\n     * @return {{widthList: (Array|*), modelList: (Array|*)}}   columnWidthList 와 columnModelList 를 함께 반환한다.\n     * @private\n     */\n    _getColumnData: function() {\n        var columnModel = this.grid.columnModel,\n            dimensionModel = this.grid.dimensionModel,\n            columnWidthList = dimensionModel.getColumnWidthList(this.whichSide),\n            columnModelList = columnModel.getVisibleColumnModelList(this.whichSide, true);\n\n        return {\n            widthList: columnWidthList,\n            modelList: columnModelList\n        };\n    },\n\n    /**\n     * Header 의 body markup 을 생성한다.\n     * @return {string} header 의 테이블 body 영역에 들어갈 html 마크업 스트링\n     * @private\n     */\n    _getTableBodyMarkup: function() {\n        var hierarchyList = this._getColumnHierarchyList(),\n            maxRowCount = this._getHierarchyMaxRowCount(hierarchyList);\n        // 가공한 컬럼 모델 리스트 정보를 바탕으로 컬럼 엘리먼트들에 대한 마크업을 구성한다.\n        var headerHeight = this.grid.dimensionModel.get('headerHeight'),\n            rowMarkupList = new Array(maxRowCount),\n            columnNameList = new Array(maxRowCount),\n            colSpanList = [],\n            rowHeight = util.getRowHeight(maxRowCount, headerHeight) - 1,\n            rowSpan = 1,\n            height,\n            headerMarkupList;\n\n        _.each(hierarchyList, function(hierarchy, i) {\n            var length = hierarchyList[i].length,\n                curHeight = 0;\n            _.each(hierarchy, function(columnModel, j) {\n                var columnName = columnModel['columnName'];\n\n                rowSpan = (length - 1 === j &amp;&amp; (maxRowCount - length + 1) > 1) ? (maxRowCount - length + 1) : 1;\n                height = rowHeight * rowSpan;\n\n                if (j === length - 1) {\n                    height = (headerHeight - curHeight) - 2;\n                } else {\n                    curHeight += height + 1;\n                }\n                if (columnNameList[j] === columnName) {\n                    rowMarkupList[j].pop();\n                    colSpanList[j] += 1;\n                } else {\n                    colSpanList[j] = 1;\n                }\n                columnNameList[j] = columnName;\n                rowMarkupList[j] = rowMarkupList[j] || [];\n                rowMarkupList[j].push(this.templateHeader({\n                    columnName: columnName,\n                    height: height,\n                    colspan: colSpanList[j],\n                    rowspan: rowSpan,\n                    title: columnModel.title,\n                    btnSort: columnModel.isSortable ? this.markupBtnSort : ''\n                }));\n            }, this);\n        }, this);\n        headerMarkupList = _.map(rowMarkupList, function(rowMarkup) {\n            return '&lt;tr>' + rowMarkup.join('') + '&lt;/tr>';\n        });\n\n        return headerMarkupList.join('');\n    },\n\n    /**\n     * column merge 가 설정되어 있을 때 헤더의 max row count 를 가져온다.\n     *\n     * @param {Array} hierarchyList 헤더 마크업 생성시 사용될 계층구조 데이터\n     * @return {number} 헤더 영역의 row 최대값\n     * @private\n     */\n    _getHierarchyMaxRowCount: function(hierarchyList) {\n        var lengthList = [0];\n        _.each(hierarchyList, function(hierarchy) {\n            lengthList.push(hierarchy.length);\n        }, this);\n        return Math.max.apply(Math, lengthList);\n    },\n\n    /**\n     * column merge 가 설정되어 있을 때 헤더의 계층구조 리스트를 가져온다.\n     * @return {Array}  계층구조 리스트\n     * @private\n     */\n    _getColumnHierarchyList: function() {\n        var columnModelList = this._getColumnData().modelList,\n            hierarchyList;\n\n        hierarchyList = _.map(columnModelList, function(columnModel) {\n            return this._getColumnHierarchy(columnModel).reverse();\n        }, this);\n\n        return hierarchyList;\n    },\n\n    /**\n     * column merge 가 설정되어 있을 때 재귀적으로 돌면서 계층구조를 형성한다.\n     *\n     * @param {Object} columnModel 컬럼모델\n     * @param {Array} [resultList]  결과로 메모이제이션을 이용하기 위한 인자값\n     * @return {Array} 계층구조 결과값\n     * @private\n     */\n    _getColumnHierarchy: function(columnModel, resultList) {\n        var columnMergeList = this.grid.option('columnMerge');\n        resultList = resultList || [];\n        /* istanbul ignore else */\n        if (columnModel) {\n            resultList.push(columnModel);\n            /* istanbul ignore else */\n            if (columnMergeList) {\n                _.each(columnMergeList, function(columnMerge) {\n                    if ($.inArray(columnModel['columnName'], columnMerge['columnNameList']) !== -1) {\n                        this._getColumnHierarchy(columnMerge, resultList);\n                    }\n                }, this);\n            }\n        }\n        return resultList;\n    }\n});\n\nmodule.exports = Header;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"