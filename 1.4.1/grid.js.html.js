tui.util.defineNamespace("fedoc.content", {});
fedoc.content["grid.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview The tui.Grid class for the external API.\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\n/**\n * Grid public API\n *\n * @param {Object} options\n *      @param {number} [options.columnFixCount=0] - Column index for fixed column. The columns indexed from 0 to this\n *          value will always be shown on the left side. {@link tui.Grid#setColumnFixCount|setColumnFixCount}\n *          can be used for setting this value dynamically.\n *      @param {string} [options.selectType=''] - Type of buttons shown next to the _number(rowKey) column.\n *          The string value 'checkbox' or 'radiobox' can be used.\n *          If not specified, the button column will not be shown.\n *      @param {boolean} [options.autoNumbering=true] - Specifies whether to assign a auto increasing number\n *          to each rows when rendering time.\n *      @param {number} [options.headerHeight=35] - The height of header area.\n *          When rows in header are multiple (merged column), this value must be the total height of rows.\n *      @param {number} [options.rowHeight=27] - The height of each rows.\n *      @param {number} [options.displayRowCount=10] - The number of rows to be shown in the table area.\n *          Total height of grid will be set based on this value.\n *      @param {number} [options.minimumColumnWidth=50] - Minimum width of each columns.\n *      @param {boolean} [options.useClientSort=true] - If set to true, sorting will be executed by client itself\n *          without server.\n *      @param {boolean} [options.singleClickEdit=false] - If set to true, editable cell in the view-mode will be\n *          changed to edit-mode by a single click.\n *      @param {boolean} [options.scrollX=true] - Specifies whether to show horizontal scrollbar.\n *      @param {boolean} [options.scrollY=true] - Specifies whether to show vertical scrollbar.\n *      @param {boolean} [options.fitToParentHeight=false] - If set to true, the height of the grid will expand to\n *          fit the height of parent element.\n *      @param {boolean} [options.showDummyRows=false] - If set to true, empty area will be filled with dummy rows.\n *      @param {string} [options.keyColumnName=null] - The name of the column to be used to identify each rows.\n *          If not specified, unique value for each rows will be created internally.\n *      @param {boolean} [options.toolbar=false] - If set to true, toolbar area will be shown.\n *      @param {boolean} [options.resizeHandle=false] - If set to true, a handle for resizing height will be shown.\n *      @param {Object} [options.pagination=null] - Options for tui.component.Pagination.\n *          If set to null or false, pagination will not be used.\n *      @param {array} options.columnModelList - The configuration of the grid columns.\n *          @param {string} options.columnModelList.columnName - The name of the column.\n *          @param {boolean} [options.columnModelList.isEllipsis=false] - If set to true, ellipsis will be used\n *              for overflowing content.\n *          @param {string} [options.columnModelList.align=left] - Horizontal alignment of the column content.\n *              Available values are 'left', 'center', 'right'.\n *          @param {string} [options.columnModelList.className] - The name of the class to be used for all cells of\n *              the column.\n *          @param {string} [options.columnModelList.title] - The title of the column to be shown on the header.\n *          @param {number} [options.columnModelList.width] - The width of the column. The unit is pixel.\n *          @param {boolean} [options.columnModelList.isHidden] - If set to true, the column will not be shown.\n *          @param {boolean} [options.columnModelList.isFixedWidth=false] - If set to true, the width of the column\n *              will not be changed.\n *          @param {boolean} [options.columnModelList.isRequired=false] - If set to true, the data of the column\n *              will be checked to be not empty whenever data is changed or calling {@link tui.Grid#validate}.\n *          @param {string} [options.columnModelList.defaultValue] - The default value to be shown when the column\n *              doesn't have a value.\n *          @param {function} [options.columnModelList.formatter] - The function that formats the value of the cell.\n *              The retrurn value of the function will be shown as the value of the cell.\n *          @param {boolean} [options.columnModelList.notUseHtmlEntity=false] - If set to true, the value of the cell\n *              will not be encoded as HTML entities.\n *          @param {boolean} [options.columnModelList.isIgnore=false] - If set to true, the value of the column will be\n *               ignored when setting up the list of modified rows.\n *          @param {boolean} [options.columnModelList.isSortable=false] - If set to true, sort button will be shown on\n *              the right side of the column header, which executes the sort action when clicked.\n *          @param {Array} [options.columnModelList.editOption] - The object for configuring editing UI.\n *              @param {string} [options.columnModelList.editOption.type='normal'] - The string value that specifies\n *                  the type of the editing UI.\n *                  Available values are 'text', 'password', 'select', 'radio', 'checkbox'.\n *              @param {boolean} [options.columnModelList.editOption.useViewMode=true] - If set to true, default mode\n *                  of the cell will be the 'view-mode'. The mode will be switched to 'edit-mode' only when user\n *                  double click or press 'ENTER' key on the cell. If set to false, the cell will always show the\n *                  input elements as a default.\n *              @param {Array} [options.columnModelList.editOption.list] - Specifies the option list for the\n *                  'select', 'radio', 'checkbox' type. The item of the array must contain properties named\n *                  'text' and 'value'. (e.g. [{text: 'option1', value: 1}, {...}])\n *              @param {function} [options.columnModelList.editOption.changeBeforeCallback] - The function that will be\n *                   called before changing the value of the cell. If returns false, the changing will be canceled.\n *              @param {function} [options.columnModelList.editOption.changeAfterCallback] - The function that will be\n *                  called after changing the value of the cell.\n *              @param {(string|function)} [options.columnModelList.editOption.beforeContent] - The HTML string to be\n *                  shown left to the value. If it's a function, the return value will be used.\n *              @param {(string|function)} [options.columnModelList.editOption.afterContent] - The HTML string to be\n *                  shown right to the value. If it's a function, the return value will be used.\n *              @param {function} [options.columnModelList.editOption.converter] - The function whose\n *                  return value (HTML) represents the UI of the cell. If the return value is\n *                  falsy(null|undefined|false), default UI will be shown.\n *              @param {Object} [options.columnModelList.editOption.inputEvents] - The object that has an event name\n *                  as a key and event handler as a value for events on input element.\n *          @param {Array} [options.columnModelList.relationList] - Specifies relation between this and other column.\n *              @param {array} [options.columnModelList.relationList.columnList] - Array of the names of target columns.\n *              @param {function} [options.columnModelList.relationList.isDisabled] - If returns true, target columns\n *                  will be disabled.\n *              @param {function} [options.columnModelList.relationList.isEditable] - If returns true, target columns\n *                  will be editable.\n *              @param {function} [options.columnModelList.relationList.optionListChange] - The function whose return\n *                  value specifies the option list for the 'select', 'radio', 'checkbox' type.\n *                  The options list of target columns will be replaced with the return value of this function.\n *          @param {Object} [options.columnModelList.component] - Option for using tui-component\n *              @param {string} [options.columnModelList.component.name] - The name of the compnent to use\n                    for this column\n *              @param {Object} [options.columnModelList.component.option] - The option object to be used for\n                    creating the component\n *      @param {array} options.columnMerge - The array that specifies the merged column.\n *          This options does not merge the cells of multiple columns into a single cell.\n *          This options only effects to the headers of the multiple columns, creates a new parent header\n *          that includes the headers of spcified columns, and sets up the hierarchy.\n * @constructor tui.Grid\n * @example\n     &lt;div id='grid'>&lt;/div>\n     &lt;script>\n var grid = new tui.Grid({\n    el: $('#grid'),\n    columnFixCount: 2,  //(default=0)\n    selectType: 'checkbox', //(default='')\n    autoNumbering: true, //(default=true)\n    headerHeight: 100, //(default=35)\n    rowHeight: 27, // (default=27)\n    displayRowCount: 10, //(default=10)\n    fitToParentHeight: true // (default=false)\n    showDummyRows: false // (default=false)\n    minimumColumnWidth: 50, //(default=50)\n    scrollX: true, //(default:true)\n    scrollY: true, //(default:true)\n    keyColumnName: 'column1', //(default:null)\n    toolbar: false,\n    resizeHandle: true, //(default:false)\n    pagination: true, //(default:null)\n    columnModelList: [\n        {\n            title: 'normal title',\n            columnName: 'column0',\n            className: 'bg_red',\n            width: 100,\n            isEllipsis: false,\n            notUseHtmlEntity: false,\n            defaultValue: 'empty',\n            isIgnore: false\n        },\n        {\n            title: 'hidden column',\n            columnName: 'column1',\n            isHidden: true\n        },\n        {\n            title: 'formatter example',\n            columnName: 'column2',\n            formatter: function(value, row) {\n                return '&lt;img src=\"' + value + '\" />';\n            }\n        },\n        {\n            title: 'converter example',\n            columnName: 'column3',\n            editOption: {\n                type: 'text',\n                converter: function(value, row) {\n                    if (row.rowKey % 2 === 0) {\n                        return 'Plain text value : ' + value;\n                    }\n                }\n            }\n        },\n        {\n            title: 'normal text input column',\n            columnName: 'column4',\n            editOption: {\n                type: 'text',\n                beforeContent: 'price:',\n                afterContent: '$'\n            },\n            // - param {Object}  changeEvent\n            //      - param {(number|string)} changeEvent.rowKey - The rowKey of the target cell\n            //      - param {(number|string)} changeEvent.columnName - The field(column) name of the target cell\n            //      - param {*} changeEvent.value - The changed value of the target cell\n            //      - param {Object} changeEvent.instance - The instance of the Grid\n            // - returns {boolean}\n            changeBeforeCallback: function(changeEvent) {\n                if (!/[0-9]+/.test(changeEvent.value)) {\n                    alert('Integer only.');\n                    return false;\n                }\n            },\n            // - param {Object}  changeEvent\n            //      - param {(number|string)} changeEvent.rowKey - The rowKey of the target cell\n            //      - param {(number|string)} changeEvent.columnName - The field(column) name of the target\n            //      - param {*} changeEvent.value - The changed value of the target cell\n            //      - param {Object} changeEvent.instance - - The instance of the Grid\n            // - returns {boolean}\n            //\n            changeAfterCallback: function(changeEvent) {}\n        },\n        {\n            title: 'password input column',\n            columnName: 'column5',\n            width: 100,\n            isRequired: true,\n            isFixedWidth: true,\n            editOption: {\n                type: 'password',\n                beforeContent: 'password:'\n            }\n        },\n        {\n            title: 'text input when editing mode',\n            columnName: 'column6',\n            editOption: {\n                type: 'text',\n                useViewMode: fales\n            },\n            isIgnore: true\n        },\n        {\n            title: 'select box',\n            columnName: 'column7',\n            editOption: {\n                type: 'select',\n                list: [\n                    {text: '1', value: 1},\n                    {text: '2', value: 2},\n                    {text: '3', value: 3},\n                    {text: '4', value: 4}\n                ]\n            },\n            relationList: [\n                {\n                    columnList: ['column8', 'column9'],\n                    // - param {*} value - The changed value of the target cell\n                    // - param {Object} rowData - The data of the row that contains the target cell\n                    // - return {boolean}\n                    isDisabled: function(value, rowData) {\n                        return value == 2;\n                    },\n                    // - param {*} value - The changed value of the target cell\n                    // - param {Object} rowData - The data of the row that contains the target cell\n                    // - return {boolean}\n                    //\n                    isEditable: function(value, rowData) {\n                        return value != 3;\n                    },\n                    // - param {*} value - The changed value of the target cell\n                    // - param {Object} rowData - The data of the row that contains the target cell\n                    // - return {{text: string, value: number}[]}\n                    optionListChange: function(value, rowData) {\n                        if (value == 1) {\n                            console.log('changev return');\n                            return [\n                                { text: 'option 1', value: 1},\n                                { text: 'option 2', value: 2},\n                                { text: 'option 3', value: 3},\n                                { text: 'option 4', value: 4}\n                            ];\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            title: 'checkbox',\n            columnName: 'column8',\n            editOption: {\n                type: 'checkbox',\n                list: [\n                    {text: 'option 1', value: 1},\n                    {text: 'option 2', value: 2},\n                    {text: 'option 3', value: 3},\n                    {text: 'option 4', value: 4}\n                ]\n            }\n        },\n        {\n            title: 'radio button',\n            columnName: 'column9',\n            editOption: {\n                type: 'radio',\n                list: [\n                    {text: 'option 1', value: 1},\n                    {text: 'option 2', value: 2},\n                    {text: 'option 3', value: 3},\n                    {text: 'option 4', value: 4}\n                ]\n            }\n        },\n    ],\n    columnMerge: [\n        {\n            'columnName' : 'mergeColumn1',\n            'title' : '1 + 2',\n            'columnNameList' : ['column1', 'column2']\n        },\n        {\n            'columnName' : 'mergeColumn2',\n            'title' : '1 + 2 + 3',\n            'columnNameList' : ['mergeColumn1', 'column3']\n        },\n        {\n            'columnName' : 'mergeColumn3',\n            'title' : '1 + 2 + 3 + 4 + 5',\n            'columnNameList' : ['mergeColumn2', 'column4', 'column5']\n        }\n    ]\n});\n\n     &lt;/script>\n *\n */\nvar _ = require('underscore');\n\nvar View = require('./base/view');\nvar ModelManager = require('./model/manager');\nvar ViewFactory = require('./view/factory');\nvar DomState = require('./domState');\nvar PublicEventEmitter = require('./publicEventEmitter');\nvar PainterManager = require('./painter/manager');\nvar PainterController = require('./painter/controller');\nvar NetAddOn = require('./addon/net');\nvar ComponentHolder = require('./componentHolder');\nvar util = require('./common/util');\nvar themeManager = require('./theme/manager');\nvar themeNameConst = require('./common/constMap').themeName;\n\nvar instanceMap = {};\n\nrequire('../css/index.styl');\n\n /**\n  * Toast UI\n  * @namespace\n  */\ntui = window.tui = tui || {};\n\ntui.Grid = View.extend(/**@lends tui.Grid.prototype */{\n    /**\n     * Initializes the instance.\n     * @param {Object} options - Options set by user\n     */\n    initialize: function(options) {\n        var domState = new DomState(this.$el);\n\n        options = util.enableDeprecatedOptions(options);\n        this.id = util.getUniqueKey();\n        this.modelManager = this._createModelManager(options, domState);\n        this.painterManager = this._createPainterManager();\n        this.componentHolder = this._createComponentHolder(options.pagination);\n        this.viewFactory = this._createViewFactory(domState, options);\n        this.container = this.viewFactory.createContainer();\n        this.publicEventEmitter = this._createPublicEventEmitter();\n\n        this.container.render();\n        this.refreshLayout();\n\n        if (!themeManager.isApplied()) {\n            themeManager.apply(themeNameConst.DEFAULT);\n        }\n\n        this.addOn = {};\n        instanceMap[this.id] = this;\n    },\n\n    /**\n     * Creates core model and returns it.\n     * @param {Object} options - Options set by user\n     * @param {module:domState} domState - domState\n     * @returns {module:model/manager} - New model manager object\n     * @private\n     */\n    _createModelManager: function(options, domState) {\n        var modelOptions = _.assign({}, options, {\n            gridId: this.id\n        });\n\n        _.omit(modelOptions, 'el', 'singleClickEdit');\n\n        return new ModelManager(modelOptions, domState);\n    },\n\n    /**\n     * Creates painter manager and returns it\n     * @returns {module:painter/manager}\n     * @private\n     */\n    _createPainterManager: function() {\n        var controller = new PainterController({\n            focusModel: this.modelManager.focusModel,\n            dataModel: this.modelManager.dataModel,\n            columnModel: this.modelManager.columnModel,\n            selectionModel: this.modelManager.selectionModel\n        });\n\n        return new PainterManager({\n            gridId: this.id,\n            selectType: this.modelManager.columnModel.get('selectType'),\n            controller: controller\n        });\n    },\n\n    /**\n     * Creates a view factory.\n     * @param {module:domState} domState - dom state\n     * @param {options} options - options\n     * @returns {module:view/factory}\n     * @private\n     */\n    _createViewFactory: function(domState, options) {\n        var viewOptions = _.pick(options, 'singleClickEdit', 'resizeHandle', 'toolbar', 'copyOption');\n        var dependencies = {\n            modelManager: this.modelManager,\n            painterManager: this.painterManager,\n            componentHolder: this.componentHolder,\n            domState: domState\n        };\n\n        return new ViewFactory(_.assign(dependencies, viewOptions));\n    },\n\n    /**\n     * Creates a pagination component.\n     * @param {Object} pgOptions - pagination options\n     * @returns {module:component/pagination}\n     * @private\n     */\n    _createComponentHolder: function(pgOptions) {\n        return new ComponentHolder({\n            pagination: pgOptions\n        });\n    },\n\n    /**\n     * Creates public event emitter and returns it.\n     * @returns {module:publicEventEmitter} - New public event emitter\n     * @private\n     */\n    _createPublicEventEmitter: function() {\n        var emitter = new PublicEventEmitter(this);\n\n        emitter.listenToFocusModel(this.modelManager.focusModel);\n        emitter.listenToContainerView(this.container);\n\n        return emitter;\n    },\n\n    /**\n     * Disables all rows.\n     * @api\n     */\n    disable: function() {\n        this.modelManager.dataModel.setDisabled(true);\n    },\n\n    /**\n     * Enables all rows.\n     * @api\n     */\n    enable: function() {\n        this.modelManager.dataModel.setDisabled(false);\n    },\n\n    /**\n     * Disables the row identified by the rowkey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the target row\n     */\n    disableRow: function(rowKey) {\n        this.modelManager.dataModel.disableRow(rowKey);\n    },\n\n    /**\n     * Enables the row identified by the rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the target row\n     */\n    enableRow: function(rowKey) {\n        this.modelManager.dataModel.enableRow(rowKey);\n    },\n\n    /**\n     * Returns the value of the cell identified by the rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the target row.\n     * @param {string} columnName - The name of the column\n     * @param {boolean} [isOriginal] - It set to true, the original value will be return.\n     * @returns {(number|string)} - The value of the cell\n     */\n    getValue: function(rowKey, columnName, isOriginal) {\n        return this.modelManager.dataModel.getValue(rowKey, columnName, isOriginal);\n    },\n\n    /**\n     * Returns a list of all values in the specified column.\n     * @api\n     * @param {string} columnName - The name of the column\n     * @param {boolean} [isJsonString=false] - It set to true, return value will be converted to JSON string.\n     * @returns {(Array|string)} - A List of all values in the specified column. (or JSON string of the list)\n     */\n    getColumnValues: function(columnName, isJsonString) {\n        return this.modelManager.dataModel.getColumnValues(columnName, isJsonString);\n    },\n\n    /**\n     * Returns the object that contains all values in the specified row.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the target row\n     * @param {boolean} [isJsonString=false] - If set to true, return value will be converted to JSON string.\n     * @returns {(Object|string)} - The object that contains all values in the row. (or JSON string of the object)\n     */\n    getRow: function(rowKey, isJsonString) {\n        return this.modelManager.dataModel.getRowData(rowKey, isJsonString);\n    },\n\n    /**\n     * Returns the object that contains all values in the row at specified index.\n     * @api\n     * @param {number} index - The index of the row\n     * @param {Boolean} [isJsonString=false] - If set to true, return value will be converted to JSON string.\n     * @returns {Object|string} - The object that contains all values in the row. (or JSON string of the object)\n     */\n    getRowAt: function(index, isJsonString) {\n        return this.modelManager.dataModel.getRowDataAt(index, isJsonString);\n    },\n\n    /**\n     * Returns the total number of the rows.\n     * @api\n     * @returns {number} - The total number of the rows\n     */\n    getRowCount: function() {\n        return this.modelManager.dataModel.length;\n    },\n\n    /**\n     * Returns the rowKey of the currently selected row.\n     * @api\n     * @returns {(number|string)} - The rowKey of the row\n     */\n    getSelectedRowKey: function() {\n        return this.modelManager.focusModel.which().rowKey;\n    },\n\n    /**\n     * Returns the jquery object of the cell identified by the rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @returns {jQuery} - The jquery object of the cell element\n     */\n    getElement: function(rowKey, columnName) {\n        return this.modelManager.dataModel.getElement(rowKey, columnName);\n    },\n\n    /**\n     * Sets the value of the cell identified by the specified rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @param {(number|string)} columnValue - The value to be set\n     */\n    setValue: function(rowKey, columnName, columnValue) {\n        this.modelManager.dataModel.setValue(rowKey, columnName, columnValue);\n    },\n\n    /**\n     * Sets the all values in the specified column.\n     * @api\n     * @param {string} columnName - The name of the column\n     * @param {(number|string)} columnValue - The value to be set\n     * @param {Boolean} [isCheckCellState=true] - If set to true, only editable and not disabled cells will be affected.\n     */\n    setColumnValues: function(columnName, columnValue, isCheckCellState) {\n        this.modelManager.dataModel.setColumnValues(columnName, columnValue, isCheckCellState);\n    },\n\n    /**\n     * Replace all rows with the specified list. This will not change the original data.\n     * @api\n     * @param {Array} rowList - A list of new rows\n     */\n    replaceRowList: function(rowList) {\n        this.modelManager.dataModel.replaceRowList(rowList);\n    },\n\n    /**\n     * Replace all rows with the specified list. This will change the original data.\n     * @api\n     * @param {Array} rowList - A list of new rows\n     * @param {function} callback - The function that will be called when done.\n     */\n    setRowList: function(rowList, callback) {\n        this.modelManager.dataModel.setRowList(rowList, true, callback);\n    },\n\n    /**\n     * Sets focus on the cell identified by the specified rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @param {boolean} [isScrollable=false] - If set to true, the view will scroll to the cell element.\n     */\n    focus: function(rowKey, columnName, isScrollable) {\n        this.modelManager.focusModel.focusClipboard();\n        this.modelManager.focusModel.focus(rowKey, columnName, isScrollable);\n    },\n\n    /**\n     * Sets focus on the cell at the specified index of row and column.\n     * @api\n     * @param {(number|string)} rowIndex - The index of the row\n     * @param {string} columnIndex - The index of the column\n     * @param {boolean} [isScrollable=false] - If set to true, the view will scroll to the cell element.\n     */\n    focusAt: function(rowIndex, columnIndex, isScrollable) {\n        this.modelManager.focusModel.focusAt(rowIndex, columnIndex, isScrollable);\n    },\n\n    /**\n     * Sets focus on the cell at the specified index of row and column and starts to edit.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @param {boolean} [isScrollable=false] - If set to true, the view will scroll to the cell element.\n     */\n    focusIn: function(rowKey, columnName, isScrollable) {\n        this.modelManager.focusModel.focusIn(rowKey, columnName, isScrollable);\n    },\n\n    /**\n     * Sets focus on the cell at the specified index of row and column and starts to edit.\n     * @api\n     * @param {(number|string)} rowIndex - The index of the row\n     * @param {string} columnIndex - The index of the column\n     * @param {boolean} [isScrollable=false] - If set to true, the view will scroll to the cell element.     */\n    focusInAt: function(rowIndex, columnIndex, isScrollable) {\n        this.modelManager.focusModel.focusInAt(rowIndex, columnIndex, isScrollable);\n    },\n\n    /**\n     * Makes view ready to get keyboard input.\n     * @api\n     */\n    readyForKeyControl: function() {\n        this.modelManager.focusModel.focusClipboard();\n    },\n\n    /**\n     * Removes focus from the focused cell.\n     * @api\n     */\n    blur: function() {\n        this.modelManager.focusModel.blur();\n    },\n\n    /**\n     * Checks all rows.\n     * @api\n     */\n    checkAll: function() {\n        this.modelManager.dataModel.checkAll();\n    },\n\n    /**\n     * Checks the row identified by the specified rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     */\n    check: function(rowKey) {\n        this.modelManager.dataModel.check(rowKey);\n    },\n\n    /**\n     * Unchecks all rows.\n     * @api\n     */\n    uncheckAll: function() {\n        this.modelManager.dataModel.uncheckAll();\n    },\n\n    /**\n     * Unchecks the row identified by the specified rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     */\n    uncheck: function(rowKey) {\n        this.modelManager.dataModel.uncheck(rowKey);\n    },\n\n    /**\n     * Removes all rows.\n     * @api\n     */\n    clear: function() {\n        this.modelManager.dataModel.setRowList([]);\n    },\n\n    /**\n     * Removes the row identified by the specified rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {(boolean|object)} [options] - Options. If the type is boolean, this value is equivalent to\n     *     options.removeOriginalData.\n     * @param {boolean} [options.removeOriginalData] - If set to true, the original data will be removed.\n     * @param {boolean} [options.keepRowSpanData] - If set to true, the value of the merged cells will not be\n     *     removed although the target is first cell of them.\n     */\n    removeRow: function(rowKey, options) {\n        if (tui.util.isBoolean(options) &amp;&amp; options) {\n            options = {\n                removeOriginalData: true\n            };\n        }\n        this.modelManager.dataModel.removeRow(rowKey, options);\n    },\n\n    /**\n     * Removes all checked rows.\n     * @api\n     * @param {boolean} isConfirm - If set to true, confirm message will be shown before remove.\n     * @returns {boolean} - True if there's at least one row removed.\n     */\n    removeCheckedRows: function(isConfirm) {\n        var rowKeyList = this.getCheckedRowKeyList(),\n            message = rowKeyList.length + '건의 데이터를 삭제하시겠습니까?';\n\n        if (rowKeyList.length > 0 &amp;&amp; (!isConfirm || confirm(message))) {\n            _.each(rowKeyList, function(rowKey) {\n                this.modelManager.dataModel.removeRow(rowKey);\n            }, this);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Enables the row identified by the rowKey to be able to check.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     */\n    enableCheck: function(rowKey) {\n        this.modelManager.dataModel.enableCheck(rowKey);\n    },\n\n    /**\n     * Disables the row identified by the spcified rowKey to not be abled to check.\n     * @api\n     * @param {(number|string)} rowKey - The unique keyof the row.\n     */\n    disableCheck: function(rowKey) {\n        this.modelManager.dataModel.disableCheck(rowKey);\n    },\n\n    /**\n     * Returns a list of the rowKey of checked rows.\n     * @api\n     * @param {Boolean} [isJsonString=false] - If set to true, return value will be converted to JSON string.\n     * @returns {Array|string} - A list of the rowKey. (or JSON string of the list)\n     */\n    getCheckedRowKeyList: function(isJsonString) {\n        var checkedRowList = this.modelManager.dataModel.getRowList(true);\n        var checkedRowKeyList = _.pluck(checkedRowList, 'rowKey');\n\n        return isJsonString ? JSON.stringify(checkedRowKeyList) : checkedRowKeyList;\n    },\n\n    /**\n     * Returns a list of the checked rows.\n     * @api\n     * @param {Boolean} [isJsonString=false] - If set to true, return value will be converted to JSON string.\n     * @returns {Array|string} - A list of the checked rows. (or JSON string of the list)\n     */\n    getCheckedRowList: function(isJsonString) {\n        var checkedRowList = this.modelManager.dataModel.getRowList(true);\n\n        return isJsonString ? JSON.stringify(checkedRowList) : checkedRowList;\n    },\n\n    /**\n     * Returns a list of the column model.\n     * @api\n     * @returns {Array} - A list of the column model.\n     */\n    getColumnModelList: function() {\n        return this.modelManager.columnModel.get('dataColumnModelList');\n    },\n\n    /**\n     * Returns the object that contains the lists of changed data compared to the original data.\n     * The object has properties 'createList', 'updateList', 'deleteList'.\n     * @api\n     * @param {Object} [options] Options\n     *      @param {boolean} [options.isOnlyChecked=false] - If set to true, only checked rows will be considered.\n     *      @param {boolean} [options.isRaw=false] - If set to true, the data will contains\n     *          the row data for internal use.\n     *      @param {boolean} [options.isOnlyRowKeyList=false] - If set to true, only keys of the changed\n     *          rows will be returned.\n     *      @param {Array} [options.filteringColumnList] - A list of column name to be excluded.\n     * @returns {{createList: Array, updateList: Array, deleteList: Array}} - Object that contains the result list.\n     */\n    getModifiedRowList: function(options) {\n        return this.modelManager.dataModel.getModifiedRowList(options);\n    },\n\n    /**\n     * Insert the new row with specified data to the end of table.\n     * @api\n     * @param {object} [row] - The data for the new row\n     * @param {object} [options] - Options\n     * @param {number} [options.at] - The index at which new row will be inserted\n     * @param {boolean} [options.extendPrevRowSpan] - If set to true and the previous row at target index\n     *        has a rowspan data, the new row will extend the existing rowspan data.\n     * @param {boolean} [options.focus] - If set to true, move focus to the new row after appending\n     */\n    appendRow: function(row, options) {\n        this.modelManager.dataModel.append(row, options);\n    },\n\n    /**\n     * Insert the new row with specified data to the beginning of table.\n     * @api\n     * @param {object} [row] - The data for the new row\n     * @param {object} [options] - Options\n     * @param {boolean} [options.focus] - If set to true, move focus to the new row after appending\n     */\n    prependRow: function(row, options) {\n        this.modelManager.dataModel.prepend(row, options);\n    },\n\n    /**\n     * Returns true if there are at least one row changed.\n     * @api\n     * @returns {boolean} - True if there are at least one row changed.\n     */\n    isChanged: function() {\n        return this.modelManager.dataModel.isChanged();\n    },\n\n    /**\n     * Returns the instance of specified AddOn.\n     * @api\n     * @param {string} name - The name of the AddOn\n     * @returns {instance} addOn - The instance of the AddOn\n     */\n    getAddOn: function(name) {\n        return name ? this.addOn[name] : this.addOn;\n    },\n\n    /**\n     * Restores the data to the original data.\n     * (Original data is set by {@link tui.Grid#setRowList|setRowList}\n     * @api\n     */\n    restore: function() {\n        this.modelManager.dataModel.restore();\n    },\n\n    /**\n     * Selects the row identified by the rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     */\n    select: function(rowKey) {\n        var firstColumn = this.modelManager.columnModel.at(0, true);\n\n        this.modelManager.focusModel.focus(rowKey, firstColumn.columnName);\n    },\n\n    /**\n     * Unselects selected rows.\n     * @api\n     */\n    unselect: function() {\n        this.modelManager.focusModel.unselect(true);\n    },\n\n    /**\n     * Sets the count of fixed column.\n     * @api\n     * @param {number} count - The count of column to be fixed\n     */\n    setColumnFixCount: function(count) {\n        this.modelManager.columnModel.set('columnFixCount', count);\n    },\n\n    /**\n     * Sets the list of column model.\n     * @api\n     * @param {Array} columnModelList - A new list of column model\n     */\n    setColumnModelList: function(columnModelList) {\n        this.modelManager.columnModel.set('columnModelList', columnModelList);\n    },\n\n    /**\n     * Create an specified AddOn and use it on this instance.\n     * @api\n     * @param {string} name - The name of the AddOn to use.\n     * @param {object} options - The option objects for configuring the AddON.\n     * @returns {tui.Grid} - This instance.\n     */\n    use: function(name, options) {\n        if (name === 'Net') {\n            options = $.extend({\n                toolbarModel: this.modelManager.toolbarModel,\n                renderModel: this.modelManager.renderModel,\n                dataModel: this.modelManager.dataModel,\n                pagination: this.componentHolder.getInstance('pagination')\n            }, options);\n            this.addOn.Net = new NetAddOn(options);\n            this.publicEventEmitter.listenToNetAddon(this.addOn.Net);\n        }\n        return this;\n    },\n\n    /**\n     * Returns a list of all rows.\n     * @api\n     * @returns {Array} - A list of all rows\n     */\n    getRowList: function() {\n        return this.modelManager.dataModel.getRowList();\n    },\n\n    /**\n     * Sorts all rows by the specified column.\n     * @api\n     * @param {string} columnName - The name of the column to be used to compare the rows\n     * @param {boolean} [isAscending] - Whether the sort order is ascending.\n     *        If not specified, use the negative value of the current order.\n     */\n    sort: function(columnName, isAscending) {\n        this.modelManager.dataModel.sortByField(columnName, isAscending);\n    },\n\n    /**\n     * Unsorts all rows. (Sorts by rowKey).\n     * @api\n     */\n    unSort: function() {\n        this.sort('rowKey');\n    },\n\n    /**\n     * Adds the specified css class to cell element identified by the rowKey and className\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @param {string} className - The css class name to add\n     */\n    addCellClassName: function(rowKey, columnName, className) {\n        this.modelManager.dataModel.get(rowKey).addCellClassName(columnName, className);\n    },\n\n    /**\n     * Adds the specified css class to all cell elements in the row identified by the rowKey\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} className - The css class name to add\n     */\n    addRowClassName: function(rowKey, className) {\n        this.modelManager.dataModel.get(rowKey).addClassName(className);\n    },\n\n    /**\n     * Removes the specified css class from the cell element indentified by the rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @param {string} className - The css class name to be removed\n     */\n    removeCellClassName: function(rowKey, columnName, className) {\n        this.modelManager.dataModel.get(rowKey).removeCellClassName(columnName, className);\n    },\n\n    /**\n     * Removes the specified css class from all cell elements in the row identified by the rowKey.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} className - The css class name to be removed\n     */\n    removeRowClassName: function(rowKey, className) {\n        this.modelManager.dataModel.get(rowKey).removeClassName(className);\n    },\n\n    /**\n     * Returns the rowspan data of the cell identified by the rowKey and columnName.\n     * @api\n     * @param {(number|string)} rowKey - The unique key of the row\n     * @param {string} columnName - The name of the column\n     * @returns {Object} - Row span data\n     */\n    getRowSpanData: function(rowKey, columnName) {\n        return this.modelManager.dataModel.getRowSpanData(rowKey, columnName);\n    },\n\n    /**\n     * Returns the index of the row indentified by the rowKey.\n     * @api\n     * @param {number|string} rowKey - The unique key of the row\n     * @returns {number} - The index of the row\n     */\n    getIndexOfRow: function(rowKey) {\n        return this.modelManager.dataModel.indexOfRowKey(rowKey);\n    },\n\n    /**\n     * Returns an instance of tui.component.Pagination.\n     * @returns {tui.component.Pagination}\n     */\n    getPagination: function() {\n        return this.componentHolder.getInstance('pagination');\n    },\n\n    /**\n     * Sets the number of rows to be shown in the table area.\n     * @api\n     * @param {number} count - The number of rows\n     */\n    setDisplayRowCount: function(count) {\n        this.modelManager.dimensionModel.set('displayRowCount', count);\n    },\n\n    /**\n     * Sets the width and height of the dimension.\n     * @api\n     * @param  {(number|null)} width - The width of the dimension\n     * @param  {(number|null)} height - The height of the dimension\n     */\n    setSize: function(width, height) {\n        this.modelManager.dimensionModel.setSize(width, height);\n    },\n\n    /**\n     * Refresh the layout view. Use this method when the view was rendered while hidden.\n     * @api\n     */\n    refreshLayout: function() {\n        this.modelManager.dimensionModel.refreshLayout();\n    },\n\n    /**\n     * Show columns\n     * @api\n     * @param {...string} arguments - Column names to show\n     */\n    showColumn: function() {\n        var args = tui.util.toArray(arguments);\n        this.modelManager.columnModel.setHidden(args, false);\n    },\n\n    /**\n     * Hide columns\n     * @api\n     * @param {...string} arguments - Column names to hide\n     */\n    hideColumn: function() {\n        var args = tui.util.toArray(arguments);\n        this.modelManager.columnModel.setHidden(args, true);\n    },\n\n    /**\n     * Validates all data and returns the result.\n     * Return value is an array which contains only rows which have invalid cell data.\n     * @returns {Array.&lt;Object>} An array of error object\n     * @api\n     * @example\n     // return value example\n    [\n        {\n            rowKey: 1,\n            errors: [\n                {\n                    columnName: 'c1',\n                    errorCode: 'REQUIRED'\n                },\n                {\n                    columnName: 'c2',\n                    errorCode: 'REQUIRED'\n                }\n            ]\n        },\n        {\n            rowKey: 3,\n            errors: [\n                {\n                    columnName: 'c2',\n                    errorCode: 'REQUIRED'\n                }\n            ]\n        }\n    ]\n     */\n    validate: function() {\n        return this.modelManager.dataModel.validate();\n    },\n\n    /**\n     * Destroys the instance.\n     * @api\n     */\n    destroy: function() {\n        this.modelManager.destroy();\n        this.container.destroy();\n        this.modelManager = this.container = null;\n    }\n});\n\n/**\n * Returns an instance of the grid associated to the id.\n * @api\n * @static\n * @param  {number} id - ID of the target grid\n * @returns {tui.Grid} - Grid instance\n */\ntui.Grid.getInstanceById = function(id) {\n    return instanceMap[id];\n};\n\n/**\n * Apply theme to all grid instances with the preset options of a given name.\n * @api\n * @static\n * @param {String} presetName - preset theme name. Available values are 'default', 'striped' and 'clean'.\n * @param {Object} [extOptions] - if exist, extend preset options with this object.\n *   @param {Object} [extOptions.grid] - Styles for the grid (container)\n *     @param {String} [extOptions.grid.background] - Background color of the grid.\n *     @param {number} [extOptions.grid.border] - Border color of the grid\n *     @param {number} [extOptions.grid.text] - Text color of the grid.\n *   @param {Object} [extOptions.selection] - Styles for a selection layer.\n *     @param {String} [extOptions.selection.background] - Background color of a selection layer.\n *     @param {String} [extOptions.selection.border] - Border color of a selection layer.\n *   @param {Object} [extOptions.toolbar] - Styles for a toolbar area.\n *     @param {String} [extOptions.toolbar.background] - Background color of a toolbar area.\n *     @param {String} [extOptions.toolbar.border] - Border color of a toolbar area.\n *   @param {Object} [extOptions.scrollbar] - Styles for scrollbars.\n *     @param {String} [extOptions.scrollbar.background] - Background color of scrollbars.\n *     @param {String} [extOptions.scrollbar.thumb] - Color of thumbs in scrollbars.\n *     @param {String} [extOptions.scrollbar.active] - Color of arrows(for IE) or\n *          thumb:hover(for other browsers) in scrollbars.\n *   @param {Object} [extOptions.cell] - Styles for the table cells.\n *     @param {Object} [extOptions.cell.normal] - Styles for normal cells.\n *       @param {String} [extOptions.cell.normal.background] - Background color of normal cells.\n *       @param {String} [extOptions.cell.normal.border] - Border color of normal cells.\n *       @param {String} [extOptions.cell.normal.text] - Text color of normal cells.\n *       @param {Boolean} [extOptions.cell.normal.showVerticalBorder] - Whether vertical borders of\n *           normal cells are visible.\n *       @param {Boolean} [extOptions.cell.normal.showHorizontalBorder] - Whether horizontal borders of\n *           normal cells are visible.\n *     @param {Object} [extOptions.cell.head] - Styles for the head cells.\n *       @param {String} [extOptions.cell.head.background] - Background color of head cells.\n *       @param {String} [extOptions.cell.head.border] - border color of head cells.\n *       @param {String} [extOptions.cell.head.text] - text color of head cells.\n *       @param {Boolean} [extOptions.cell.head.showVerticalBorder] - Whether vertical borders of\n *           head cells are visible.\n *       @param {Boolean} [extOptions.cell.head.showHorizontalBorder] - Whether horizontal borders of\n *           head cells are visible.\n *     @param {Object} [extOptions.cell.selectedHead] - Styles for selected head cells.\n *       @param {String} [extOptions.cell.selectedHead.background] - background color of selected haed cells.\n *       @param {String} [extOptions.cell.selectedHead.text] - text color of selected head cells.\n *     @param {Object} [extOptions.cell.focused] - Styles for a focused cell.\n *       @param {String} [extOptions.cell.focused.background] - background color of a focused cell.\n *       @param {String} [extOptions.cell.focused.border] - border color of a focused cell.\n *     @param {Object} [extOptions.cell.required] - Styles for required cells.\n *       @param {String} [extOptions.cell.required.background] - background color of required cells.\n *       @param {String} [extOptions.cell.required.text] - text color of required cells.\n *     @param {Object} [extOptions.cell.editable] - Styles for editable cells.\n *       @param {String} [extOptions.cell.editable.background] - background color of the editable cells.\n *       @param {String} [extOptions.cell.editable.text] - text color of the selected editable cells.\n *     @param {Object} [extOptions.cell.disabled] - Styles for disabled cells.\n *       @param {String} [extOptions.cell.disabled.background] - background color of disabled cells.\n *       @param {String} [extOptions.cell.disabled.text] - text color of disabled cells.\n *     @param {Object} [extOptions.cell.invalid] - Styles for invalid cells.\n *       @param {String} [extOptions.cell.invalid.background] - background color of invalid cells.\n *       @param {String} [extOptions.cell.invalid.text] - text color of invalid cells.\n *     @param {Object} [extOptions.cell.currentRow] - Styles for cells in a current row.\n *       @param {String} [extOptions.cell.currentRow.background] - background color of cells in a current row.\n *       @param {String} [extOptions.cell.currentRow.text] - text color of cells in a current row.\n *     @param {Object} [extOptions.cell.evenRow] - Styles for cells in even rows.\n *       @param {String} [extOptions.cell.evenRow.background] - background color of cells in even rows.\n *       @param {String} [extOptions.cell.evenRow.text] - text color of cells in even rows.\n *     @param {Object} [extOptions.cell.dummy] - Styles for dummy cells.\n *       @param {String} [extOptions.cell.dummy.background] - background color of dummy cells.\n * @example\ntui.Grid.applyTheme('striped', {\n    grid: {\n        border: '#aaa',\n        text: '#333'\n    },\n    cell: {\n        disabled: {\n            text: '#999'\n        }\n    }\n});\n */\ntui.Grid.applyTheme = function(presetName, extOptions) {\n    themeManager.apply(presetName, extOptions);\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"