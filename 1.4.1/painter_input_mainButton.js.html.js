tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_input_mainButton.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Main Button Painter\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar Painter = require('../../base/painter');\nvar classNameConst = require('../../common/classNameConst');\n\n/**\n * Main Button Painter\n * (This class does not extend from module:painter/input/base but from module:base/painter directly)\n * @module painter/input/mainButton\n * @extends module:base/painter\n */\nvar InputPainter = tui.util.defineClass(Painter, /**@lends module:painter/input/mainButton.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - options\n     */\n    init: function(options) {\n        Painter.apply(this, arguments);\n\n        this.selector = 'input.' + classNameConst.CELL_MAIN_BUTTON;\n        this.inputType = options.inputType;\n        this.gridId = options.gridId;\n    },\n\n    /**\n     * key-value object contains event names as keys and handler names as values\n     * @type {Object}\n     */\n    events: {\n        change: '_onChange'\n    },\n\n    /**\n     * markup template\n     * @returns {String}\n     */\n    template: _.template(\n        '&lt;input class=\"' + classNameConst.CELL_MAIN_BUTTON + '\"' +\n        ' type=\"&lt;%=type%>\" name=\"&lt;%=name%>\" &lt;%=checked%> &lt;%=disabled%> />'\n    ),\n\n     /**\n     * Event handler for 'change' DOM event.\n     * @param {Event} event - DOM event object\n     * @private\n     */\n    _onChange: function(event) {\n        var $target = $(event.target);\n        var address = this._getCellAddress($target);\n\n        this.controller.setValue(address, $target.is(':checked'));\n    },\n\n    /**\n     * Generates a HTML string from given data, and returns it.\n     * @param {Object} cellData - cell data\n     * @returns {String}\n     * @implements {module:painter/input/base}\n     */\n    generateHtml: function(cellData) {\n        return this.template({\n            type: this.inputType,\n            name: this.gridId,\n            checked: cellData.value ? 'checked' : '',\n            disabled: cellData.isDisabled ? 'disabled' : ''\n        });\n    }\n});\n\nmodule.exports = InputPainter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"