tui.util.defineNamespace("fedoc.content", {});
fedoc.content["addon_net.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Network 모듈 addon\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar Backbone = require('backbone');\nvar _ = require('underscore');\n\nvar View = require('../base/view');\nvar Router = require('./net-router');\nvar util = require('../common/util');\nvar formUtil = require('../common/formUtil');\nvar GridEvent = require('../common/gridEvent');\n\nvar renderStateMap = require('../common/constMap').renderState;\nvar DELAY_FOR_LOADING_STATE = 200;\n\n/**\n * Net Addon\n * @module addon/net\n * @mixes module:base/common\n */\nvar Net = View.extend(/**@lends module:addon/net.prototype */{\n    /**\n     * @constructs\n     * @param {object} options\n     *      @param {jquery} options.el   form 엘리먼트\n     *      @param {boolean} [options.initialRequest=true]   Net 인스턴스 생성과 동시에 readData request 요청을 할 지 여부.\n     *      @param {object} [options.api]   사용할 API URL 리스트\n     *          @param {string} [options.api.readData]  데이터 조회 API 주소\n     *          @param {string} [options.api.createData] 데이터 생성 API 주소\n     *          @param {string} [options.api.updateData] 데이터 업데이트 API 주소\n     *          @param {string} [options.api.modifyData] 데이터 수정 API 주소 (생성/조회/삭제 한번에 처리하는 API 주소)\n     *          @param {string} [options.api.deleteData] 데이터 삭제 API 주소\n     *      @param {number} [options.perPage=500]  한 페이지당 보여줄 item 개수\n     *      @param {boolean} [options.enableAjaxHistory=true]   ajaxHistory 를 사용할지 여부\n     * @example\n     *   &lt;form id=\"data_form\">\n     *   &lt;input type=\"text\" name=\"query\"/>\n     *   &lt;/form>\n     *   &lt;script>\n     *      var net,\n     *          grid = new tui.Grid({\n     *                 //...option 생략...\n     *          });\n     *\n     *      //Net AddOn 을 그리드 내부에서 인스턴스화 하며 초기화 한다.\n     *      grid.use('Net', {\n     *         el: $('#data_form'),         //필수 - form 엘리먼트\n     *         initialRequest: true,   //(default: true) Net 인스턴스 생성과 동시에 readData request 요청을 할 지 여부.\n     *         perPage: 500,           //(default: 500) 한 페이지당 load 할 데이터 개수\n     *         enableAjaxHistory: true, //(default: true) ajaxHistory 를 사용할지 여부\n     *         //사용할 API URL 리스트\n     *         api: {\n     *             'readData': './api/read',                       //데이터 조회 API 주소\n     *             'createData': './api/create',                   //데이터 생성 API 주소\n     *             'updateData': './api/update',                   //데이터 업데이트 API 주소\n     *             'deleteData': './api/delete',                   //데이터 삭제 API 주소\n     *             'modifyData': './api/modify',                   //데이터 수정 API 주소 (생성/조회/삭제 한번에 처리하는 API 주소)\n     *             'downloadExcel': './api/download/excel',        //엑셀 다운로드 (현재페이지) API 주소\n     *             'downloadExcelAll': './api/download/excelAll'   //엑셀 다운로드 (전체 데이터) API 주소\n     *         }\n     *      });\n     *       //이벤트 핸들러 바인딩\n     *       grid.on('beforeRequest', function(data) {\n     *          //모든 dataRequest 시 호출된다.\n     *      }).on('response', function(data) {\n     *          //response 이벤트 핸들러\n     *          //성공/실패와 관계없이 response 를 받을 떄 호출된다.\n     *      }).on('successResponse', function(data) {\n     *          //successResponse 이벤트 핸들러\n     *          //response.result 가 true 일 때 호출된다.\n     *      }).on('failResponse', function(data) {\n     *          //failResponse 이벤트 핸들러\n     *          //response.result 가 false 일 때 호출된다.\n     *      }).on('errorResponse', function(data) {\n     *          //ajax error response 이벤트 핸들러\n     *      });\n     *\n     *      //grid 로부터 사용할 net 인스턴스를 가져온다.\n     *      net = grid.getAddOn('Net');\n     *\n     *      //request 관련 자세한 옵션은 Net#request 를 참고한다.\n     *      //createData API 요청\n     *      net.request('createData');\n     *\n     *      //updateData API 요청\n     *      net.request('updateData');\n     *\n     *      //deleteData API 요청\n     *      net.request('deleteData');\n     *\n     *      //modifyData API 요청\n     *      net.request('modifyData');\n     *   &lt;/script>\n     */\n\n    initialize: function(options) {\n        var defaultOptions;\n\n        defaultOptions = {\n            initialRequest: true,\n            api: {\n                readData: '',\n                createData: '',\n                updateData: '',\n                deleteData: '',\n                modifyData: '',\n                downloadExcel: '',\n                downloadExcelAll: ''\n            },\n            perPage: 500,\n            enableAjaxHistory: true\n        };\n        options = $.extend(true, defaultOptions, options); // deep extend\n\n        this.setOwnProperties({\n            // models\n            dataModel: options.dataModel,\n            toolbarModel: options.toolbarModel,\n            renderModel: options.renderModel,\n\n            // extra objects\n            router: null,\n            pagination: options.pagination,\n\n            // configs\n            api: options.api,\n            enableAjaxHistory: options.enableAjaxHistory,\n            perPage: options.perPage,\n\n            // state data\n            curPage: 1,\n            timeoutIdForDelay: null,\n            requestedFormData: null,\n            isLocked: false,\n            lastRequestedReadData: null\n        });\n\n        this._initializeDataModelNetwork();\n        this._initializeRouter();\n        this._initializePagination();\n        this._showToolbarExcelBtns();\n\n        this.listenTo(this.dataModel, 'sortChanged', this._onSortChanged, this);\n\n        if (options.initialRequest) {\n            if (!this.lastRequestedReadData) {\n                this._readDataAt(1, false);\n            }\n        }\n    },\n\n    tagName: 'form',\n\n    events: {\n        submit: '_onSubmit'\n    },\n\n    /**\n     * pagination instance 를 초기화 한다.\n     * @private\n     */\n    _initializePagination: function() {\n        var pagination = this.pagination;\n\n        if (pagination) {\n            pagination.setOption('itemPerPage', this.perPage);\n            pagination.setOption('itemCount', 1);\n            pagination.on('beforeMove', $.proxy(this._onPageBeforeMove, this));\n        }\n    },\n\n    /**\n     * Event listener for 'route:read' event on Router\n     * @param  {String} queryStr - Query string\n     * @private\n     */\n    _onRouterRead: function(queryStr) {\n        var data = util.toQueryObject(queryStr);\n        this._requestReadData(data);\n    },\n\n    /**\n     * dataModel 이 network 통신을 할 수 있도록 설정한다.\n     * @private\n     */\n    _initializeDataModelNetwork: function() {\n        this.dataModel.url = this.api.readData;\n        this.dataModel.sync = $.proxy(this._sync, this);\n    },\n\n    /**\n     * ajax history 를 사용하기 위한 router 를 초기화한다.\n     * @private\n     */\n    _initializeRouter: function() {\n        if (this.enableAjaxHistory) {\n            this.router = new Router({\n                net: this\n            });\n            this.listenTo(this.router, 'route:read', this._onRouterRead);\n\n            if (!Backbone.History.started) {\n                Backbone.history.start();\n            }\n        }\n    },\n\n    /**\n     * Shows the excel-buttons in a toolbar (control-panel) area if the matching api exist.\n     * @private\n     */\n    _showToolbarExcelBtns: function() {\n        var toolbarModel = this.toolbarModel,\n            api = this.api;\n\n        if (!toolbarModel) {\n            return;\n        }\n\n        if (api.downloadExcel) {\n            toolbarModel.set('isExcelButtonVisible', true);\n        }\n        if (api.downloadExcelAll) {\n            toolbarModel.set('isExcelAllButtonVisible', true);\n        }\n    },\n\n    /**\n     * pagination 에서 before page move가 발생했을 때 이벤트 핸들러\n     * @param {{page:number}} customEvent pagination 으로부터 전달받는 이벤트 객체\n     * @private\n     */\n    _onPageBeforeMove: function(customEvent) {\n        var page = customEvent.page;\n        if (this.curPage !== page) {\n            this._readDataAt(page, true);\n        }\n    },\n\n    /**\n     * form 의 submit 이벤트 발생시 이벤트 핸들러\n     * @param {event} submitEvent   submit 이벤트 객체\n     * @private\n     */\n    _onSubmit: function(submitEvent) {\n        submitEvent.preventDefault();\n        this._readDataAt(1, false);\n    },\n\n    /**\n     * 폼 데이터를 설정한다.\n     * @param {Object} data - 폼 데이터 정보\n     * @private\n     */\n    _setFormData: function(data) {\n        var formData = _.clone(data);\n\n        _.each(this.lastRequestedReadData, function(value, key) {\n            if ((_.isUndefined(formData[key]) || _.isNull(formData[key])) &amp;&amp; value) {\n                formData[key] = '';\n            }\n        });\n        formUtil.setFormData(this.$el, formData);\n    },\n\n    /**\n     * fetch 수행 이후 custom ajax 동작 처리를 위해 Backbone 의 기본 sync 를 오버라이드 하기위한 메서드.\n     * @param {String} method   router 로부터 전달받은 method 명\n     * @param {Object} model    fetch 를 수행한 dataModel\n     * @param {Object} options  request 정보\n     * @private\n     */\n    _sync: function(method, model, options) {\n        var params;\n        if (method === 'read') {\n            options = options || {};\n            params = $.extend({}, options);\n            if (!options.url) {\n                params.url = _.result(model, 'url');\n            }\n            this._ajax(params);\n        } else {\n            Backbone.sync(Backbone, method, model, options);\n        }\n    },\n\n    /**\n     * network 통신에 대한 _lock 을 건다.\n     * @private\n     */\n    _lock: function() {\n        var renderModel = this.renderModel;\n\n        this.timeoutIdForDelay = setTimeout(function() {\n            renderModel.set('state', renderStateMap.LOADING);\n        }, DELAY_FOR_LOADING_STATE);\n\n        this.isLocked = true;\n    },\n\n    /**\n     * network 통신에 대해 unlock 한다.\n     * loading layer hide 는 rendering 하는 로직에서 수행한다.\n     * @private\n     */\n    _unlock: function() {\n        if (this.timeoutIdForDelay !== null) {\n            clearTimeout(this.timeoutIdForDelay);\n            this.timeoutIdForDelay = null;\n        }\n\n        this.isLocked = false;\n    },\n\n    /**\n     * form 으로 지정된 엘리먼트의 Data 를 반환한다.\n     * @returns {object} formData 데이터 오브젝트\n     * @private\n     */\n    _getFormData: function() {\n        return formUtil.getFormData(this.$el);\n    },\n\n    /**\n     * DataModel 에서 Backbone.fetch 수행 이후 success 콜백\n     * @param {object} dataModel grid 의 dataModel\n     * @param {object} responseData 응답 데이터\n     * @private\n     */\n    _onReadSuccess: function(dataModel, responseData) {\n        var pagination = this.pagination;\n        var page, totalCount;\n\n        dataModel.setOriginalRowList();\n\n        if (pagination &amp;&amp; responseData.pagination) {\n            page = responseData.pagination.page;\n            totalCount = responseData.pagination.totalCount;\n            pagination.setOption('itemPerPage', this.perPage);\n            pagination.setOption('itemCount', totalCount);\n            pagination.movePageTo(page);\n            this.curPage = page;\n        }\n    },\n\n    /**\n     * DataModel 에서 Backbone.fetch 수행 이후 error 콜백\n     * @param {object} dataModel grid 의 dataModel\n     * @param {object} responseData 응답 데이터\n     * @param {object} options  ajax 요청 정보\n     * @private\n     */\n    _onReadError: function(dataModel, responseData, options) {}, // eslint-disable-line\n\n    /**\n     * Requests 'readData' with last requested data.\n     * @api\n     */\n    reloadData: function() {\n        this._requestReadData(this.lastRequestedReadData);\n    },\n\n    /**\n     * Requests 'readData' to the server. The last requested data will be extended with new data.\n     * @api\n     * @param {Number} page - Page number\n     * @param {Object} data - Data(parameters) to send to the server\n     * @param {Boolean} resetData - If set to true, last requested data will be ignored.\n     */\n    readData: function(page, data, resetData) {\n        if (resetData) {\n            if (!data) {\n                data = {};\n            }\n            data.perPage = this.perPage;\n            this._changeSortOptions(data, this.dataModel.sortOptions);\n        } else {\n            data = _.assign({}, this.lastRequestedReadData, data);\n        }\n        data.page = page;\n        this._requestReadData(data);\n    },\n\n    /**\n     * 데이터 조회 요청.\n     * @param {object} data 요청시 사용할 request 파라미터\n     * @private\n     */\n    _requestReadData: function(data) {\n        var startNumber = 1;\n\n        this._setFormData(data);\n\n        if (!this.isLocked) {\n            this.renderModel.initializeVariables();\n            this._lock();\n\n            this.requestedFormData = _.clone(data);\n            this.curPage = data.page || this.curPage;\n            startNumber = (this.curPage - 1) * this.perPage + 1;\n            this.renderModel.set({\n                startNumber: startNumber\n            });\n\n            //마지막 요청한 reloadData에서 사용하기 위해 data 를 저장함.\n            this.lastRequestedReadData = _.clone(data);\n            this.dataModel.fetch({\n                requestType: 'readData',\n                data: data,\n                type: 'POST',\n                success: $.proxy(this._onReadSuccess, this),\n                error: $.proxy(this._onReadError, this),\n                reset: true\n            });\n            this.dataModel.setSortOptionValues(data.sortColumn, data.sortAscending);\n        }\n\n        if (this.router) {\n            this.router.navigate('read/' + util.toQueryString(data), {\n                trigger: false\n            });\n        }\n    },\n\n    /**\n     * sortChanged 이벤트 발생시 실행되는 함수\n     * @private\n     * @param {object} sortOptions 정렬 옵션\n     * @param {string} sortOptions.sortColumn 정렬할 컬럼명\n     * @param {boolean} sortOptions.isAscending 오름차순 여부\n     */\n    _onSortChanged: function(sortOptions) {\n        if (sortOptions.isRequireFetch) {\n            this._readDataAt(1, true, sortOptions);\n        }\n    },\n\n    /**\n     * 데이터 객체의 정렬 옵션 관련 값을 변경한다.\n     * @private\n     * @param {object} data 데이터 객체\n     * @param {object} sortOptions 정렬 옵션\n     * @param {string} sortOptions.sortColumn 정렬할 컬럼명\n     * @param {boolean} sortOptions.isAscending 오름차순 여부\n     */\n    _changeSortOptions: function(data, sortOptions) {\n        if (!sortOptions) {\n            return;\n        }\n        if (sortOptions.columnName === 'rowKey') {\n            delete data.sortColumn;\n            delete data.sortAscending;\n        } else {\n            data.sortColumn = sortOptions.columnName;\n            data.sortAscending = sortOptions.isAscending;\n        }\n    },\n\n    /**\n     * 현재 form data 기준으로, page 에 해당하는 데이터를 조회 한다.\n     * @param {Number} page 조회할 페이지 정보\n     * @param {Boolean} [isUsingRequestedData=true] page 단위 검색이므로, form 수정여부와 관계없이 처음 보낸 form 데이터로 조회할지 여부를 결정한다.\n     * @param {object} sortOptions 정렬 옵션\n     * @param {string} sortOptions.sortColumn 정렬할 컬럼명\n     * @param {boolean} sortOptions.isAscending 오름차순 여부\n     * @private\n     */\n    _readDataAt: function(page, isUsingRequestedData, sortOptions) {\n        var data;\n\n        isUsingRequestedData = _.isUndefined(isUsingRequestedData) ? true : isUsingRequestedData;\n        data = isUsingRequestedData ? this.requestedFormData : this._getFormData();\n        data.page = page;\n        data.perPage = this.perPage;\n        this._changeSortOptions(data, sortOptions);\n        this._requestReadData(data);\n    },\n\n    /**\n     * 서버로 API request 한다.\n     * @api\n     * @param {String} requestType 요청 타입. 'createData|updateData|deleteData|modifyData' 중 하나를 인자로 넘긴다.\n     * @param {object} options Options\n     *      @param {String} [options.url]  url 정보. 생략시 Net 에 설정된 api 옵션 정보로 요청한다.\n     *      @param {String} [options.hasDataParam=true] rowList 데이터 파라미터를 포함하여 보낼지 여부\n     *      @param {String} [options.isOnlyChecked=true]  선택(Check)된 row 에 대한 목록 데이터를 포함하여 요청한다.\n     *      isOnlyModified 도 설정되었을 경우, 선택&amp;변경된 목록을 요청한다.\n     *      @param {String} [options.isOnlyModified=true]  수정된 행 데이터 목록을 간추려 요청한다.\n     *      isOnlyChecked 도 설정되었을 경우, 선택&amp;변경된 목록을 요청한다.\n     *      @param {String} [options.isSkipConfirm=false]  confirm 메세지를 보여줄지 여부를 지정한다.\n     */\n    request: function(requestType, options) {\n        var defaultOptions = {\n                url: this.api[requestType],\n                type: null,\n                hasDataParam: true,\n                isOnlyChecked: true,\n                isOnlyModified: true,\n                isSkipConfirm: false\n            },\n            newOptions = $.extend(defaultOptions, options),\n            param = this._getRequestParam(requestType, newOptions);\n\n        if (param) {\n            this._ajax(param);\n        }\n    },\n\n    /**\n     * Change window.location to registered url for downloading data\n     * @api\n     * @param {string} type - Download type. 'excel' or 'excelAll'.\n     *        Will be matched with API 'downloadExcel', 'downloadExcelAll'.\n     */\n    download: function(type) {\n        var apiName = 'download' + util.toUpperCaseFirstLetter(type),\n            data = this.requestedFormData,\n            url = this.api[apiName],\n            paramStr;\n\n        if (type === 'excel') {\n            data.page = this.curPage;\n            data.perPage = this.perPage;\n        } else {\n            data = _.omit(data, 'page', 'perPage');\n        }\n\n        paramStr = $.param(data);\n        window.location = url + '?' + paramStr;\n    },\n\n    /**\n     * Set number of rows per page and reload current page\n     * @api\n     * @param {number} perPage - Number of rows per page\n     */\n    setPerPage: function(perPage) {\n        this.perPage = perPage;\n        this._readDataAt(1);\n    },\n\n    /**\n     * 서버로 요청시 사용될 파라미터 중 Grid 의 데이터에 해당하는 데이터를 Option 에 맞추어 반환한다.\n     * @param {String} requestType  요청 타입. 'createData|updateData|deleteData|modifyData' 중 하나를 인자로 넘긴다.\n     * @param {Object} [options] Options\n     *      @param {boolean} [options.hasDataParam=true] request 데이터에 rowList 관련 데이터가 포함될 지 여부.\n     *      @param {boolean} [options.isOnlyModified=true] rowList 관련 데이터 중 수정된 데이터만 포함할 지 여부\n     *      @param {boolean} [options.isOnlyChecked=true] rowList 관련 데이터 중 checked 된 데이터만 포함할 지 여부\n     * @returns {{count: number, data: {requestType: string, url: string, data: object,\n     *      type: string, dataType: string}}} 옵션 조건에 해당하는 그리드 데이터 정보\n     * @private\n     */\n    _getDataParam: function(requestType, options) {\n        var dataModel = this.dataModel,\n            checkMap = {\n                createData: ['createList'],\n                updateData: ['updateList'],\n                deleteData: ['deleteList'],\n                modifyData: ['createList', 'updateList', 'deleteList']\n            },\n            checkList = checkMap[requestType],\n            data = {},\n            count = 0,\n            dataMap;\n\n        options = _.defaults(options || {}, {\n            hasDataParam: true,\n            isOnlyModified: true,\n            isOnlyChecked: true\n        });\n\n        if (options.hasDataParam) {\n            if (options.isOnlyModified) {\n                //{createList: [], updateList:[], deleteList: []} 에 담는다.\n                dataMap = dataModel.getModifiedRowList({\n                    isOnlyChecked: options.isOnlyChecked\n                });\n                _.each(dataMap, function(list, name) {\n                    if (_.contains(checkList, name) &amp;&amp; list.length) {\n                        count += list.length;\n                        data[name] = JSON.stringify(list);\n                    }\n                }, this);\n            } else {\n                //{rowList: []} 에 담는다.\n                data.rowList = dataModel.getRowList(options.isOnlyChecked);\n                count = data.rowList.length;\n            }\n        }\n\n        return {\n            data: data,\n            count: count\n        };\n    },\n\n    /**\n     * requestType 에 따라 서버에 요청할 파라미터를 반환한다.\n     * @param {String} requestType 요청 타입. 'createData|updateData|deleteData|modifyData' 중 하나를 인자로 넘긴다.\n     * @param {Object} [options] Options\n     *      @param {String} [options.url=this.api[requestType]] 요청할 url.\n     *      지정하지 않을 시 option 으로 넘긴 API 중 request Type 에 해당하는 url 로 지정됨\n     *      @param {String} [options.type='POST'] request method 타입\n     *      @param {boolean} [options.hasDataParam=true] request 데이터에 rowList 관련 데이터가 포함될 지 여부.\n     *      @param {boolean} [options.isOnlyModified=true] rowList 관련 데이터 중 수정된 데이터만 포함할 지 여부\n     *      @param {boolean} [options.isOnlyChecked=true] rowList 관련 데이터 중 checked 된 데이터만 포함할 지 여부\n     * @returns {{requestType: string, url: string, data: object, type: string, dataType: string}}\n     *      ajax 호출시 사용될 option 파라미터\n     * @private\n     */\n    _getRequestParam: function(requestType, options) {\n        var defaultOptions = {\n            url: this.api[requestType],\n            type: null,\n            hasDataParam: true,\n            isOnlyModified: true,\n            isOnlyChecked: true\n        };\n        var newOptions = $.extend(defaultOptions, options);\n        var dataParam = this._getDataParam(requestType, newOptions);\n        var param = null;\n\n        if (newOptions.isSkipConfirm || this._isConfirmed(requestType, dataParam.count)) {\n            param = {\n                requestType: requestType,\n                url: newOptions.url,\n                data: dataParam.data,\n                type: newOptions.type\n            };\n        }\n\n        return param;\n    },\n\n    /**\n     * requestType 에 따른 컨펌 메세지를 노출한다.\n     * @param {String} requestType 요청 타입. 'createData|updateData|deleteData|modifyData' 중 하나를 인자로 넘긴다.\n     * @param {Number} count   전송될 데이터 개수\n     * @returns {boolean}    계속 진행할지 여부를 반환한다.\n     * @private\n     */\n    _isConfirmed: function(requestType, count) {\n        var result = false;\n\n        if (count > 0) {\n            result = confirm(this._getConfirmMessage(requestType, count));\n        } else {\n            alert(this._getConfirmMessage(requestType, count));\n        }\n\n        return result;\n    },\n\n    /**\n     * confirm message 를 반환한다.\n     * @param {String} requestType 요청 타입. 'createData|updateData|deleteData|modifyData' 중 하나를 인자로 넘긴다.\n     * @param {Number} count 전송될 데이터 개수\n     * @returns {string} 생성된 confirm 메세지\n     * @private\n     */\n    _getConfirmMessage: function(requestType, count) {\n        var textMap = {\n            createData: '입력',\n            updateData: '수정',\n            deleteData: '삭제',\n            modifyData: '반영'\n        };\n        var actionName = textMap[requestType];\n        var message;\n\n        if (count > 0) {\n            message = count + '건의 데이터를 ' + actionName + '하시겠습니까?';\n        } else {\n            message = actionName + '할 데이터가 없습니다.';\n        }\n\n        return message;\n    },\n\n    /**\n     * ajax 통신을 한다.\n     * @param {{requestType: string, url: string, data: object, type: string, dataType: string}} options ajax 요청 파라미터\n     * @private\n     */\n    _ajax: function(options) {\n        var eventData = new GridEvent(options.data);\n        var params;\n\n        this.trigger('beforeRequest', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n\n        options = $.extend({requestType: ''}, options);\n        params = {\n            url: options.url,\n            data: options.data || {},\n            type: options.type || 'POST',\n            dataType: options.dataType || 'json',\n            complete: $.proxy(this._onComplete, this, options.complete, options),\n            success: $.proxy(this._onSuccess, this, options.success, options),\n            error: $.proxy(this._onError, this, options.error, options)\n        };\n        if (options.url) {\n            $.ajax(params);\n        }\n    },\n\n    /**\n     * ajax complete 이벤트 핸들러\n     * @param {Function} callback   통신 완료 이후 수행할 콜백함수\n     * @param {object} jqXHR    jqueryXHR  객체\n     * @param {number} status   http status 정보\n     * @private\n     */\n    _onComplete: function(callback, jqXHR, status) { // eslint-disable-line no-unused-vars\n        this._unlock();\n    },\n\n    /**\n     * ajax success 이벤트 핸들러\n     * @param {Function} callback Callback function\n     * @param {{requestType: string, url: string, data: object, type: string, dataType: string}} options ajax 요청 파라미터\n     * @param {Object} responseData 응답 데이터\n     * @param {number} status   http status 정보\n     * @param {object} jqXHR    jqueryXHR  객체\n     * @private\n     */\n    _onSuccess: function(callback, options, responseData, status, jqXHR) {\n        var message = responseData &amp;&amp; responseData.message;\n        var eventData = new GridEvent({\n            httpStatus: status,\n            requestType: options.requestType,\n            requestParameter: options.data,\n            responseData: responseData\n        });\n\n        this.trigger('response', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n        if (responseData &amp;&amp; responseData.result) {\n            this.trigger('successResponse', eventData);\n            if (eventData.isStopped()) {\n                return;\n            }\n            if (_.isFunction(callback)) {\n                callback(responseData.data || {}, status, jqXHR);\n            }\n        } else {\n            this.trigger('failResponse', eventData);\n            if (eventData.isStopped()) {\n                return;\n            }\n            if (message) {\n                alert(message);\n            }\n        }\n    },\n\n    /**\n     * ajax error 이벤트 핸들러\n     * @param {Function} callback Callback function\n     * @param {{requestType: string, url: string, data: object, type: string, dataType: string}} options ajax 요청 파라미터\n     * @param {object} jqXHR    jqueryXHR  객체\n     * @param {number} status   http status 정보\n     * @param {String} errorMessage 에러 메세지\n     * @private\n     */\n    _onError: function(callback, options, jqXHR, status) {\n        var eventData = new GridEvent({\n            httpStatus: status,\n            requestType: options.requestType,\n            requestParameter: options.data,\n            responseData: null\n        });\n        this.renderModel.set('state', renderStateMap.DONE);\n\n        this.trigger('response', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n\n        this.trigger('errorResponse', eventData);\n        if (eventData.isStopped()) {\n            return;\n        }\n\n        if (jqXHR.readyState > 1) {\n            alert('데이터 요청 중에 에러가 발생하였습니다.\\n\\n다시 시도하여 주시기 바랍니다.');\n        }\n    }\n});\n\nmodule.exports = Net;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"