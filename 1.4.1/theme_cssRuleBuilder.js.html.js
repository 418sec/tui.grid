tui.util.defineNamespace("fedoc.content", {});
fedoc.content["theme_cssRuleBuilder.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n* @fileoverview CSS Rule string builder\n* @author NHN Ent. FE Development Team\n*/\n'use strict';\n\nvar _ = require('underscore');\n\n/**\n * create css rule string and returns it\n * @param {String} selector - css selector\n * @param {String} property - css property\n * @param {String} value - css value\n */\nvar CSSRuleBuilder = tui.util.defineClass({\n    init: function(selector) {\n        if (!_.isString(selector) || !selector) {\n            throw new Error('The Selector must be a string and not be empty.');\n        }\n        this._selector = selector;\n        this._propValues = [];\n    },\n\n    /**\n     * Add a set of css property and value.\n     * @param {String} property - css property\n     * @param {String} value - css value\n     * @returns {CSSRuleBuilder}\n     */\n    add: function(property, value) {\n        if (value) {\n            this._propValues.push(property + ':' + value);\n        }\n        return this;\n    },\n\n    /**\n     * Shortcut for add('border-color', value)\n     * @param {String} value - css value\n     * @returns {CSSRuleBuilder}\n     */\n    border: function(value) {\n        return this.add('border-color', value);\n    },\n\n    /**\n     * Add a border-width style to the rule.\n     * @param {Object} options - visible options\n     * @param {Boolean} [options.showVerticalBorder] - whether the vertical border is visible\n     * @param {Boolean} [options.showHorizontalBorder] - whether the horizontal border is visible\n     * @returns {CSSRuleBuilder}\n     */\n    borderWidth: function(options) {\n        var vertical = options.showVerticalBorder;\n        var horizontal = options.showHorizontalBorder;\n        var value;\n\n        if (_.isBoolean(vertical)) {\n            value = vertical ? '1px' : '0';\n            this.add('border-left-width', value)\n                .add('border-right-width', value);\n        }\n        if (_.isBoolean(horizontal)) {\n            value = horizontal ? '1px' : '0';\n            this.add('border-top-width', value)\n                .add('border-bottom-width', value);\n        }\n        return this;\n    },\n\n    /**\n     * Shortcut for add('background-color', value)\n     * @param {String} value - css value\n     * @returns {CSSRuleBuilder}\n     */\n    bg: function(value) {\n        return this.add('background-color', value);\n    },\n\n    /**\n     * Shortcut for add('color', value)\n     * @param {String} value - css value\n     * @returns {CSSRuleBuilder}\n     */\n    text: function(value) {\n        return this.add('color', value);\n    },\n\n    /**\n     * Create a CSS rule string with a selector and prop-values.\n     * @returns {String}\n     */\n    build: function() {\n        var result = '';\n\n        if (this._propValues.length) {\n            result = this._selector + '{' + this._propValues.join(';') + '}';\n        }\n\n        return result;\n    }\n});\n\nmodule.exports = {\n    /**\n     * Creates new Builder instance.\n     * @param {String} selector - selector\n     * @returns {CSSRuleBuilder}\n     */\n    create: function(selector) {\n        return new CSSRuleBuilder(selector);\n    },\n\n    /**\n     * Creates a new Builder instance with a class name selector.\n     * @param {String} className - class name\n     * @returns {Builder}\n     */\n    createClassRule: function(className) {\n        return this.create('.' + className);\n    },\n\n    /**\n     * Creates an array of new Builder instances for the -webkit-scrollbar styles.\n     * @param {String} selector - selector\n     * @param {Object} options - options\n     * @returns {Array.&lt;CSSRuleBuilder>}\n     */\n    createWebkitScrollbarRules: function(selector, options) {\n        return [\n            this.create(selector + ' ::-webkit-scrollbar').bg(options.background),\n            this.create(selector + ' ::-webkit-scrollbar-thumb').bg(options.thumb),\n            this.create(selector + ' ::-webkit-scrollbar-thumb:hover').bg(options.active)\n        ];\n    },\n\n    /**\n     * Creates a builder instance for the IE scrollbar styles.\n     * @param {String} selector - selector\n     * @param {Object} options - options\n     * @returns {Array.&lt;CSSRuleBuilder>}\n     */\n    createIEScrollbarRule: function(selector, options) {\n        var bgProps = [\n            'scrollbar-3dlight-color',\n            'scrollbar-darkshadow-color',\n            'scrollbar-track-color',\n            'scrollbar-shadow-color'\n        ];\n        var thumbProps = [\n            'scrollbar-face-color',\n            'scrollbar-highlight-color'\n        ];\n        var ieScrollbarRule = this.create(selector);\n\n        _.each(bgProps, function(prop) {\n            ieScrollbarRule.add(prop, options.background);\n        });\n        _.each(thumbProps, function(prop) {\n            ieScrollbarRule.add(prop, options.thumb);\n        });\n        ieScrollbarRule.add('scrollbar-arrow-color', options.active);\n\n        return ieScrollbarRule;\n    },\n\n    /**\n     * Build all rules and returns the concatenated string.\n     * @param {Array.&lt;Rule>} rules - rule builders\n     * @returns {String}\n     */\n    buildAll: function(rules) {\n        return _.map(rules, function(rule) {\n            return rule.build();\n        }).join('');\n    }\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"