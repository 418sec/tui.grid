tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_rowList.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview RowList View\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar View = require('../base/view'),\n    util = require('../common/util');\n\nvar CLASSNAME_SELECTED = 'selected',\n    CLASSNAME_META_COLUMN = 'td.meta_column';\n\n/**\n * RowList View\n * @module view/rowList\n * @extends module:baes/view\n */\nvar RowList = View.extend(/**@lends module:view/rowList.prototype */{\n    /**\n     * @constructs\n     * @param {object} options - Options\n     * @param {string} [options.whichSide='R']   어느 영역에 속하는 rowList 인지 여부. 'L|R' 중 하나를 지정한다.\n     */\n    initialize: function(options) {\n        var focusModel = options.focusModel,\n            renderModel = options.renderModel,\n            selectionModel = options.selectionModel,\n            whichSide = options.whichSide || 'R';\n\n        this.setOwnProperties({\n            whichSide: whichSide,\n            bodyTableView: options.bodyTableView,\n            focusModel: focusModel,\n            renderModel: renderModel,\n            selectionModel: selectionModel,\n            dataModel: options.dataModel,\n            columnModel: options.columnModel,\n            collection: renderModel.getCollection(whichSide),\n            painterManager: options.painterManager,\n            sortOptions: null,\n            renderedRowKeys: null\n        });\n\n        this.listenTo(this.collection, 'change', this._onModelChange)\n            .listenTo(this.collection, 'restore', this._onModelRestore)\n            .listenTo(focusModel, 'focus', this._onFocus)\n            .listenTo(focusModel, 'blur', this._onBlur)\n            .listenTo(focusModel, 'focusIn', this._onFocusIn)\n            .listenTo(renderModel, 'rowListChanged', this.render);\n\n        if (this.whichSide === 'L') {\n            this.listenTo(focusModel, 'change:rowKey', this._refreshSelectedMetaColumns)\n                .listenTo(selectionModel, 'change:range', this._refreshSelectedMetaColumns)\n                .listenTo(renderModel, 'rowListChanged', this._refreshSelectedMetaColumns);\n        }\n    },\n\n    /**\n     * Returns the list of column models in it's own side\n     * @returns {Array} - Column model list\n     */\n    _getColumnModelList: function() {\n        return this.columnModel.getVisibleColumnModelList(this.whichSide, true);\n    },\n\n    /**\n     * 기존에 생성되어 있던 TR요소들 중 새로 렌더링할 데이터와 중복되지 않은 목록의 TR요소만 삭제한다.\n     * @param {array} dupRowKeys 중복된 데이터의 rowKey 목록\n     */\n    _removeOldRows: function(dupRowKeys) {\n        var firstIdx = _.indexOf(this.renderedRowKeys, dupRowKeys[0]),\n            lastIdx = _.indexOf(this.renderedRowKeys, _.last(dupRowKeys)),\n            $rows = this.$el.children('tr');\n\n        $rows.slice(0, firstIdx).remove();\n        $rows.slice(lastIdx + 1).remove();\n    },\n\n    /**\n     * 기존의 렌더링된 데이터와 중복되지 않은 목록에 대해서만 TR요소를 추가한다.\n     * @param {array} rowKeys 렌더링할 데이터의 rowKey 목록\n     * @param {array} dupRowKeys 중복된 데이터의 rowKey 목록\n     */\n    _appendNewRows: function(rowKeys, dupRowKeys) {\n        var beforeRows = this.collection.slice(0, _.indexOf(rowKeys, dupRowKeys[0])),\n            afterRows = this.collection.slice(_.indexOf(rowKeys, _.last(dupRowKeys)) + 1);\n\n        this.$el.prepend(this._getRowsHtml(beforeRows));\n        this.$el.append(this._getRowsHtml(afterRows));\n    },\n\n    /**\n     * 전체 행목록을 갱신한다.\n     */\n    _resetRows: function() {\n        var html = this._getRowsHtml(this.collection.models),\n            $tbody;\n\n        if (RowList.isInnerHtmlOfTbodyReadOnly) {\n            $tbody = this.bodyTableView.redrawTable(html);\n            this.setElement($tbody, false); // table이 다시 생성되었기 때문에 tbody의 참조를 갱신해준다.\n\n            // IE7에서 레이아웃이 틀어지는 현상 방지\n            if (util.isBrowserIE7()) {\n                $tbody.width($tbody.width());\n            }\n        } else {\n            // IE의 호환성 보기를 사용하면 브라우저 검출이 정확하지 않기 때문에, try/catch로 방어코드를 추가함.\n            try {\n                this.$el[0].innerHTML = html;\n            } catch (e) {\n                RowList.isInnerHtmlOfTbodyReadOnly = true;\n                this._resetRows();\n            }\n        }\n    },\n\n    /**\n     * 행데이터 목록을 받아, HTML 문자열을 생성해서 반환한다.\n     * @param {Model.Row[]} rows - 행데이터 목록\n     * @returns {string} 생성된 HTML 문자열\n     */\n    _getRowsHtml: function(rows) {\n        var rowPainter = this.painterManager.getRowPainter(),\n            columnModelList = this._getColumnModelList();\n\n        return _.map(rows, function(row) {\n            return rowPainter.getHtml(row, columnModelList);\n        }).join('');\n    },\n\n    /**\n     * Returns a TR element of given rowKey\n     * @param {(string|number)} rowKey - rowKey\n     * @returns {jquery}\n     * @private\n     */\n    _getRowElement: function(rowKey) {\n        return this.$el.find('tr[key=\"' + rowKey + '\"]');\n    },\n\n    /**\n     * Refreshes 'selected' class of meta columns.\n     * @private\n     */\n    _refreshSelectedMetaColumns: function() {\n        var $rows = this.$el.find('tr'),\n            $filteredRows;\n\n        if (this.selectionModel.hasSelection()) {\n            $filteredRows = this._filterRowsByIndexRange($rows, this.selectionModel.get('range').row);\n        } else {\n            $filteredRows = this._filterRowByKey($rows, this.focusModel.get('rowKey'));\n        }\n\n        $rows.find(CLASSNAME_META_COLUMN).removeClass(CLASSNAME_SELECTED);\n        $filteredRows.find(CLASSNAME_META_COLUMN).addClass(CLASSNAME_SELECTED);\n    },\n\n    /**\n     * Filters the rows by given range(index) and returns them.\n     * @param {jQuery} $rows - rows (tr elements)\n     * @param {Array.&lt;Number>} rowRange - [startIndex, endIndex]\n     * @returns {jQuery}\n     * @private\n     */\n    _filterRowsByIndexRange: function($rows, rowRange) {\n        var renderModel = this.renderModel,\n            renderStartIndex = renderModel.get('startIndex'),\n            startIndex, endIndex;\n\n        startIndex = Math.max(rowRange[0] - renderStartIndex, 0);\n        endIndex = Math.max(rowRange[1] - renderStartIndex + 1, 0); // add 1 for exclusive value\n\n        if (!startIndex &amp;&amp; !endIndex) {\n            return $();\n        }\n        return $rows.slice(startIndex, endIndex);\n    },\n\n    /**\n     * Filters the row by given rowKey\n     * @param {jQuery} $rows - rows (tr elements)\n     * @param {Number} rowKey - rowKey\n     * @returns {jQuery}\n     * @private\n     */\n    _filterRowByKey: function($rows, rowKey) {\n        var rowIndex = this.dataModel.indexOfRowKey(rowKey),\n            renderStartIndex = this.renderModel.get('startIndex');\n\n        if (renderStartIndex > rowIndex) {\n            return $();\n        }\n        return $rows.eq(rowIndex - renderStartIndex);\n    },\n\n    /**\n     * focusModel 의 blur 이벤트 발생시 해당 $td 를 찾고, focus 클래스를 제거한다.\n     * @param {(Number|String)} rowKey 대상의 키값\n     * @param {String} columnName 컬럼명\n     * @private\n     */\n    _onBlur: function(rowKey, columnName) {\n        var $td = this.dataModel.getElement(rowKey, columnName);\n        if ($td.length) {\n            $td.removeClass('focused');\n        }\n    },\n\n    /**\n     * focusModel 의 _onFocus 이벤트 발생시 해당 $td 를 찾고, focus 클래스를 추가한다.\n     * @param {(Number|String)} rowKey 대상의 키값\n     * @param {String} columnName 컬럼명\n     * @private\n     */\n    _onFocus: function(rowKey, columnName) {\n        var $td = this.dataModel.getElement(rowKey, columnName);\n        if ($td.length) {\n            $td.addClass('focused');\n        }\n    },\n\n    /**\n     * Event handler for 'focusIn' event on module:model/focus\n     * @param  {(Number|String)} rowKey - RowKey of the target cell\n     * @param  {String} columnName columnName - ColumnName of the target cell\n     * @private\n     */\n    _onFocusIn: function(rowKey, columnName) {\n        var whichSide = this.columnModel.isLside(columnName) ? 'L' : 'R',\n            $td, editType, cellPainter;\n\n        if (whichSide === this.whichSide) {\n            $td = this.dataModel.getElement(rowKey, columnName);\n            editType = this.columnModel.getEditType(columnName);\n            cellPainter = this.painterManager.getCellPainter(editType);\n\n            cellPainter.focusIn($td);\n        }\n    },\n\n    /**\n     * Renders.\n     * @param {boolean} isModelChanged - 모델이 변경된 경우(add, remove..) true, 아니면(스크롤 변경 등) false\n     * @returns {View.RowList} this 객체\n     */\n    render: function(isModelChanged) {\n        var rowKeys = this.collection.pluck('rowKey'),\n            dupRowKeys;\n\n        this.bodyTableView.resetTablePosition();\n\n        if (isModelChanged) {\n            this._resetRows();\n        } else {\n            dupRowKeys = _.intersection(rowKeys, this.renderedRowKeys);\n            if (_.isEmpty(rowKeys) || _.isEmpty(dupRowKeys) ||\n                // 중복된 데이터가 70% 미만일 경우에는 성능을 위해 innerHTML을 사용.\n                (dupRowKeys.length / rowKeys.length &lt; 0.7)) { // eslint-disable-line no-magic-numbers\n                this._resetRows();\n            } else {\n                this._removeOldRows(dupRowKeys);\n                this._appendNewRows(rowKeys, dupRowKeys);\n            }\n        }\n\n        this.renderedRowKeys = rowKeys;\n        this.focusModel.focusClipboard();\n\n        return this;\n    },\n\n    /**\n     * modelChange 이벤트 발생시 실행되는 핸들러 함수.\n     * @param {Model.Row} model Row 모델 객체\n     * @private\n     */\n    _onModelChange: function(model) {\n        var $tr = this._getRowElement(model.get('rowKey'));\n        this.painterManager.getRowPainter().onModelChange(model.changed, $tr);\n    },\n\n    /**\n     * Event handler for 'restore' event on module:model/row\n     * @param {Object} cellData - CellData\n     * @private\n     */\n    _onModelRestore: function(cellData) {\n        var $td = this.dataModel.getElement(cellData.rowKey, cellData.columnName),\n            editType = this.columnModel.getEditType(cellData.columnName);\n\n        this.painterManager.getCellPainter(editType).redraw(cellData, $td);\n    }\n}, {\n    /**\n     * Whether the innerHTML property of a tbody element is readonly.\n     * @memberof RowList\n     * @static\n     */\n    isInnerHtmlOfTbodyReadOnly: (tui.util.browser.msie &amp;&amp;\n        tui.util.browser.version &lt;= 9) // eslint-disable-line no-magic-numbers\n});\n\nmodule.exports = RowList;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"