tui.util.defineNamespace("fedoc.content", {});
fedoc.content["common_formUtil.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Utilities for form data, form element\n * @author NHN Ent. Fe Development Team\n */\n'use strict';\n\n/**\n * @module formUtil\n */\nvar formUtil = {\n    /**\n     * form 의 input 요소 값을 설정하기 위한 객체\n     * @alias form.setInput\n     * @memberof module:util\n     */\n    setInput: {\n        /**\n         * 배열의 값들을 전부 String 타입으로 변환한다.\n         * @ignore\n         * @param {Array}  arr 변환할 배열\n         * @returns {Array} 변환된 배열 결과 값\n         */\n        '_changeToStringInArray': function(arr) {\n            _.each(arr, function(value, i) {\n                arr[i] = String(value);\n            });\n            return arr;\n        },\n\n        /**\n         * radio type 의 input 요소의 값을 설정한다.\n         * @ignore\n         * @param {HTMLElement} targetElement - Target element\n         * @param {String} formValue - Form value\n         */\n        'radio': function(targetElement, formValue) {\n            targetElement.checked = (targetElement.value === formValue);\n        },\n\n        /**\n         * radio type 의 input 요소의 값을 설정한다.\n         * @ignore\n         * @memberof module:util\n         * @param {HTMLElement} targetElement - Target element\n         * @param {String} formValue - Form value\n         */\n        'checkbox': function(targetElement, formValue) {\n            if (_.isArray(formValue)) {\n                targetElement.checked = $.inArray(targetElement.value, this._changeToStringInArray(formValue)) !== -1;\n            } else {\n                targetElement.checked = (targetElement.value === formValue);\n            }\n        },\n\n        /**\n         * select-one type 의 input 요소의 값을 설정한다.\n         * @ignore\n         * @param {HTMLElement} targetElement - Target element\n         * @param {String} formValue - Form value\n         */\n        'select-one': function(targetElement, formValue) {\n            var options = tui.util.toArray(targetElement.options);\n\n            tui.util.forEach(options, function(targetOption, index) {\n                if (targetOption.value === formValue || targetOption.text === formValue) {\n                    targetElement.selectedIndex = index;\n                    return false;\n                }\n            });\n        },\n\n        /**\n         * select-multiple type 의 input 요소의 값을 설정한다.\n         * @ignore\n         * @param {HTMLElement} targetElement - Target element\n         * @param {String} formValue - Form value\n         */\n        'select-multiple': function(targetElement, formValue) {\n            var options = tui.util.toArray(targetElement.options);\n\n            if (_.isArray(formValue)) {\n                formValue = this._changeToStringInArray(formValue);\n                _.each(options, function(targetOption) {\n                    targetOption.selected = $.inArray(targetOption.value, formValue) !== -1 ||\n                    $.inArray(targetOption.text, formValue) !== -1;\n                });\n            } else {\n                this['select-one'].apply(this, arguments);\n            }\n        },\n\n        /**\n         * input 요소의 값을 설정하는 default 로직\n         * @memberof module:util\n         * @param {HTMLElement} targetElement - Target element\n         * @param {String} formValue - Form value\n         */\n        'defaultAction': function(targetElement, formValue) {\n            targetElement.value = formValue;\n        }\n    },\n\n    /**\n     * $form 에 정의된 인풋 엘리먼트들의 값을 모아서 DataObject 로 구성하여 반환한다.\n     * @memberof module:util\n     * @alias form.getFormData\n     * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n     * @returns {object} form 내의 데이터들을 key:value 형태의 DataObject 로 반환한다.\n     **/\n    getFormData: function($form) {\n        var result = {},\n            valueList = $form.serializeArray(),\n            isExisty = tui.util.isExisty;\n\n        _.each(valueList, function(obj) {\n            var value = obj.value || '',\n                name = obj.name;\n\n            if (isExisty(result[name])) {\n                result[name] = [].concat(result[name], value);\n            } else {\n                result[name] = value;\n            }\n        });\n\n        return result;\n    },\n\n    /**\n     * 폼 안에 있는 모든 인풋 엘리먼트를 배열로 리턴하거나, elementName에 해당하는 인풋 엘리먼트를 리턴한다.\n     * @memberof module:util\n     * @alias form.getFormElement\n     * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n     * @param {String} [elementName] 특정 이름의 인풋 엘리먼트만 가져오고 싶은 경우 전달하며, 생략할 경우 모든 인풋 엘리먼트를 배열 형태로 리턴한다.\n     * @returns {jQuery} jQuery 로 감싼 엘리먼트를 반환한다.\n     */\n    getFormElement: function($form, elementName) {\n        var formElement;\n        if ($form &amp;&amp; $form.length) {\n            if (elementName) {\n                formElement = $form.prop('elements')[String(elementName)];\n            } else {\n                formElement = $form.prop('elements');\n            }\n        }\n        return $(formElement);\n    },\n\n    /**\n     * 파라미터로 받은 데이터 객체를 이용하여 폼내에 해당하는 input 요소들의 값을 설정한다.\n     * @memberof module:util\n     * @alias form.setFormData\n     * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n     * @param {Object} formData 폼에 설정할 폼 데이터 객체\n     **/\n    setFormData: function($form, formData) {\n        _.each(formData, function(value, property) {\n            this.setFormElementValue($form, property, value);\n        }, this);\n    },\n\n    /**\n     * elementName에 해당하는 인풋 엘리먼트에 formValue 값을 설정한다.\n     * -인풋 엘리먼트의 이름을 기준으로 하기에 라디오나 체크박스 엘리먼트에 대해서도 쉽게 값을 설정할 수 있다.\n     * @memberof module:util\n     * @alias form.setFormElementValue\n     * @param {jQuery} $form jQuery()로 감싼 폼엘리먼트\n     * @param {String}  elementName 값을 설정할 인풋 엘리먼트의 이름\n     * @param {String|Array} formValue 인풋 엘리먼트에 설정할 값으로 체크박스나 멀티플 셀렉트박스인 경우에는 배열로 설정할 수 있다.\n     **/\n    setFormElementValue: function($form, elementName, formValue) {\n        var $elementList = this.getFormElement($form, elementName),\n            type;\n\n        if (!$elementList.length) {\n            return;\n        }\n        if (!_.isArray(formValue)) {\n            formValue = String(formValue);\n        }\n\n        $elementList = tui.util.isHTMLTag($elementList) ? [$elementList] : $elementList;\n        $elementList = tui.util.toArray($elementList);\n        _.each($elementList, function(targetElement) {\n            type = this.setInput[targetElement.type] ? targetElement.type : 'defaultAction';\n            this.setInput[type](targetElement, formValue);\n        }, this);\n    },\n\n    /**\n     * input 타입의 엘리먼트의 커서를 가장 끝으로 이동한다.\n     * @memberof module:util\n     * @alias form.setCursorToEnd\n     * @param {HTMLElement} target HTML input 엘리먼트\n     */\n    setCursorToEnd: function(target) {\n        var length = target.value.length,\n            range;\n\n        target.focus();\n        if (target.setSelectionRange) {\n            try {\n                target.setSelectionRange(length, length);\n            } catch (e) {\n                // to prevent unspecified error in IE (occurs when running test)\n            }\n        } else if (target.createTextRange) {\n            range = target.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', length);\n            range.moveStart('character', length);\n            try {\n                range.select();\n            } catch (e) {\n                // to prevent unspecified error in IE (occurs when running test)\n            }\n        }\n    }\n};\n\nmodule.exports = formUtil;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"