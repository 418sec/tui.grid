tui.util.defineNamespace("fedoc.content", {});
fedoc.content["painter_manager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Painter Manager\n * @author NHN Ent. FE Development Team\n */\n'use strict';\n\nvar MainButtonCell = require('./cell/mainButton');\nvar NumberCell = require('./cell/number');\nvar NormalCell = require('./cell/normal');\nvar ButtonListCell = require('./cell/button');\nvar SelectCell = require('./cell/select');\nvar TextCell = require('./cell/text');\nvar TextConvertibleCell = require('./cell/text-convertible');\nvar TextPasswordCell = require('./cell/text-password');\nvar DummyCell = require('./dummyCell');\nvar RowPainter = require('./row');\n\n/**\n * Painter manager\n * @module painter/manager\n */\nvar PainterManager = tui.util.defineClass(/**@lends module:painter/manager.prototype */{\n    /**\n     * @constructs\n     * @param {Object} options - Options\n     */\n    init: function(options) {\n        this.modelManager = options.modelManager;\n\n        this.cellPainters = this._createCellPainters();\n        this.rowPainter = this._createRowPainter();\n    },\n\n    /**\n     * Creates instances of cell painters and returns the map object that stores them\n     * using 'editType' as a key.\n     * @returns {Object} Key-value object\n     * @private\n     */\n    _createCellPainters: function() {\n        var cellPainters = {},\n            args = {\n                grid: this.modelManager\n            },\n            instanceList = [\n                new MainButtonCell(args),\n                new NumberCell(args),\n                new NormalCell(args),\n                new ButtonListCell(args),\n                new SelectCell(args),\n                new TextCell(args),\n                new TextPasswordCell(args),\n                new TextConvertibleCell(args),\n                new DummyCell(args)\n            ];\n\n        _.each(instanceList, function(instance) {\n            cellPainters[instance.getEditType()] = instance;\n        });\n        return cellPainters;\n    },\n\n    /**\n     * Creates row painter and returns it.\n     * @returns {module:painter/row} New row painter instance\n     */\n    _createRowPainter: function() {\n        return new RowPainter({\n            grid: this.modelManager,\n            painterManager: this\n        });\n    },\n\n    /**\n     * Returns an instance of cell painter which has given editType\n     * @param {String} editType - Edit type\n     * @returns {Object} - Cell painter instance\n     */\n    getCellPainter: function(editType) {\n        var instance = this.cellPainters[editType];\n\n        if (!instance) {\n            if (editType === 'radio' || editType === 'checkbox') {\n                instance = this.cellPainters['button'];\n            } else {\n                instance = this.cellPainters['normal'];\n            }\n        }\n        return instance;\n    },\n\n    /**\n     * Returns all cell painters\n     * @returns {Object} Object that has edit-type as a key and cell painter as a value\n     */\n    getCellPainters: function() {\n        return this.cellPainters;\n    },\n\n    /**\n     * Returns a row painter\n     * @returns {module:painter/row} Row painter\n     */\n    getRowPainter: function() {\n        return this.rowPainter;\n    }\n});\n\nmodule.exports = PainterManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"